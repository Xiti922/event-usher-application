{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useConnectWalletToChain = exports.useWallet = exports.useWalletManager = exports.WalletManagerContext = void 0;\nconst tslib_1 = require(\"tslib\");\nconst react_1 = require(\"react\");\nconst types_1 = require(\"../types\");\nconst utils_1 = require(\"../utils\");\nexports.WalletManagerContext = (0, react_1.createContext)(null);\nconst useWalletManager = () => {\n  const context = (0, react_1.useContext)(exports.WalletManagerContext);\n  if (!context) {\n    throw new Error(\"You forgot to use WalletManagerProvider.\");\n  }\n  return context;\n};\nexports.useWalletManager = useWalletManager;\nconst useWallet = chainId => {\n  const {\n    status: managerStatus,\n    error: managerError,\n    connectedWallet: managerConnectedWallet,\n    chainInfoOverrides,\n    getSigningCosmWasmClientOptions,\n    getSigningStargateClientOptions\n  } = (0, exports.useWalletManager)();\n  // Connect to chain ID if provided when main wallet connection has been\n  // established.\n  const shouldConnectToChainId = managerStatus === types_1.WalletConnectionStatus.Connected && !!managerConnectedWallet && !!chainId;\n  const [chainIdStatus, setChainIdStatus] = (0, react_1.useState)(types_1.WalletConnectionStatus.Initializing);\n  const [chainIdError, setChainIdError] = (0, react_1.useState)();\n  const [chainIdConnectedWallet, setChainIdConnectedWallet] = (0, react_1.useState)();\n  (0, react_1.useEffect)(() => {\n    // If should not connect, already connecting, or already connected, do\n    // nothing.\n    if (!shouldConnectToChainId || chainIdStatus === types_1.WalletConnectionStatus.Connecting || chainIdStatus === types_1.WalletConnectionStatus.Connected || chainIdStatus === types_1.WalletConnectionStatus.Errored) {\n      return;\n    }\n    // Try to connect.\n    const connect = () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {\n      setChainIdStatus(types_1.WalletConnectionStatus.Connecting);\n      setChainIdConnectedWallet(undefined);\n      setChainIdError(undefined);\n      try {\n        const chainInfo = yield (0, utils_1.getChainInfo)(chainId, chainInfoOverrides);\n        setChainIdConnectedWallet(yield (0, utils_1.getConnectedWalletInfo)(managerConnectedWallet.wallet, managerConnectedWallet.walletClient, chainInfo, yield getSigningCosmWasmClientOptions === null || getSigningCosmWasmClientOptions === void 0 ? void 0 : getSigningCosmWasmClientOptions(chainInfo), yield getSigningStargateClientOptions === null || getSigningStargateClientOptions === void 0 ? void 0 : getSigningStargateClientOptions(chainInfo)));\n        setChainIdStatus(types_1.WalletConnectionStatus.Connected);\n      } catch (error) {\n        console.error(error);\n        setChainIdError(error);\n        setChainIdStatus(types_1.WalletConnectionStatus.Errored);\n      }\n    });\n    connect();\n  }, [managerStatus, managerConnectedWallet, chainId, getSigningCosmWasmClientOptions, getSigningStargateClientOptions, chainInfoOverrides, shouldConnectToChainId, chainIdStatus]);\n  const status = shouldConnectToChainId ? chainIdStatus : managerStatus;\n  const connected = status === types_1.WalletConnectionStatus.Connected;\n  const error = shouldConnectToChainId ? chainIdError : managerError;\n  const connectedWallet = chainId ? chainIdConnectedWallet : managerConnectedWallet;\n  return Object.assign({\n    status,\n    connected,\n    error\n  }, connectedWallet);\n};\nexports.useWallet = useWallet;\nconst useConnectWalletToChain = () => {\n  const {\n    status,\n    connectedWallet,\n    chainInfoOverrides,\n    getSigningCosmWasmClientOptions,\n    getSigningStargateClientOptions\n  } = (0, exports.useWalletManager)();\n  const connectWalletToChain = (0, react_1.useCallback)(chainId => tslib_1.__awaiter(void 0, void 0, void 0, function* () {\n    if (status !== types_1.WalletConnectionStatus.Connected || !connectedWallet) {\n      throw new Error(\"Wallet must first be connected to the default chain.\");\n    }\n    const chainInfo = yield (0, utils_1.getChainInfo)(chainId, chainInfoOverrides);\n    return yield (0, utils_1.getConnectedWalletInfo)(connectedWallet.wallet, connectedWallet.walletClient, chainInfo, yield getSigningCosmWasmClientOptions === null || getSigningCosmWasmClientOptions === void 0 ? void 0 : getSigningCosmWasmClientOptions(chainInfo), yield getSigningStargateClientOptions === null || getSigningStargateClientOptions === void 0 ? void 0 : getSigningStargateClientOptions(chainInfo));\n  }), [chainInfoOverrides, connectedWallet, getSigningCosmWasmClientOptions, getSigningStargateClientOptions, status]);\n  return connectWalletToChain;\n};\nexports.useConnectWalletToChain = useConnectWalletToChain;","map":{"version":3,"mappings":"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","names":["exports","useWalletManager","context","Error","useWallet","chainId","status","managerStatus","error","managerError","connectedWallet","managerConnectedWallet","chainInfoOverrides","getSigningCosmWasmClientOptions","getSigningStargateClientOptions","shouldConnectToChainId","types_1","Connected","chainIdStatus","setChainIdStatus","Initializing","chainIdError","setChainIdError","chainIdConnectedWallet","setChainIdConnectedWallet","Connecting","Errored","connect","tslib_1","undefined","chainInfo","wallet","walletClient","console","connected","useConnectWalletToChain","connectWalletToChain"],"sources":["../../src/components/WalletManagerContext.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}