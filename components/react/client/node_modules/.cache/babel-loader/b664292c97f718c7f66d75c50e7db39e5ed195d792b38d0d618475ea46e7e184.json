{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BackgroundTxService = void 0;\nconst axios_1 = __importDefault(require(\"axios\"));\nconst cosmos_1 = require(\"@keplr-wallet/cosmos\");\nconst buffer_1 = require(\"buffer/\");\nclass BackgroundTxService {\n  constructor(notification) {\n    this.notification = notification;\n  }\n  init(chainsService, permissionService) {\n    this.chainsService = chainsService;\n    this.permissionService = permissionService;\n  }\n  sendTx(chainId, tx, mode) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const chainInfo = yield this.chainsService.getChainInfo(chainId);\n      const restInstance = axios_1.default.create(Object.assign({\n        baseURL: chainInfo.rest\n      }, chainInfo.restConfig));\n      this.notification.create({\n        iconRelativeUrl: \"assets/logo-256.png\",\n        title: \"Tx is pending...\",\n        message: \"Wait a second\"\n      });\n      const isProtoTx = buffer_1.Buffer.isBuffer(tx) || tx instanceof Uint8Array;\n      const params = isProtoTx ? {\n        tx_bytes: buffer_1.Buffer.from(tx).toString(\"base64\"),\n        mode: (() => {\n          switch (mode) {\n            case \"async\":\n              return \"BROADCAST_MODE_ASYNC\";\n            case \"block\":\n              return \"BROADCAST_MODE_BLOCK\";\n            case \"sync\":\n              return \"BROADCAST_MODE_SYNC\";\n            default:\n              return \"BROADCAST_MODE_UNSPECIFIED\";\n          }\n        })()\n      } : {\n        tx,\n        mode: mode\n      };\n      try {\n        const result = yield restInstance.post(isProtoTx ? \"/cosmos/tx/v1beta1/txs\" : \"/txs\", params);\n        const txResponse = isProtoTx ? result.data[\"tx_response\"] : result.data;\n        if (txResponse.code != null && txResponse.code !== 0) {\n          throw new Error(txResponse[\"raw_log\"]);\n        }\n        const txHash = buffer_1.Buffer.from(txResponse.txhash, \"hex\");\n        const txTracer = new cosmos_1.TendermintTxTracer(chainInfo.rpc, \"/websocket\");\n        txTracer.traceTx(txHash).then(tx => {\n          txTracer.close();\n          BackgroundTxService.processTxResultNotification(this.notification, tx);\n        });\n        return txHash;\n      } catch (e) {\n        console.log(e);\n        BackgroundTxService.processTxErrorNotification(this.notification, e);\n        throw e;\n      }\n    });\n  }\n  static processTxResultNotification(notification, result) {\n    var _a;\n    try {\n      if (result.mode === \"commit\") {\n        if (result.checkTx.code !== undefined && result.checkTx.code !== 0) {\n          throw new Error(result.checkTx.log);\n        }\n        if (result.deliverTx.code !== undefined && result.deliverTx.code !== 0) {\n          throw new Error(result.deliverTx.log);\n        }\n      } else {\n        if (result.code != null && result.code !== 0) {\n          // XXX: Hack of the support of the stargate.\n          const log = (_a = result.log) !== null && _a !== void 0 ? _a : result[\"raw_log\"];\n          throw new Error(log);\n        }\n      }\n      notification.create({\n        iconRelativeUrl: \"assets/logo-256.png\",\n        title: \"Tx succeeds\",\n        // TODO: Let users know the tx id?\n        message: \"Congratulations!\"\n      });\n    } catch (e) {\n      BackgroundTxService.processTxErrorNotification(notification, e);\n    }\n  }\n  static processTxErrorNotification(notification, e) {\n    console.log(e);\n    let message = e.message;\n    // Tendermint rpc error.\n    const regResult = /code:\\s*(-?\\d+),\\s*message:\\s*(.+),\\sdata:\\s(.+)/g.exec(e.message);\n    if (regResult && regResult.length === 4) {\n      // If error is from tendermint\n      message = regResult[3];\n    }\n    try {\n      // Cosmos-sdk error in ante handler\n      const sdkErr = JSON.parse(e.message);\n      if (sdkErr === null || sdkErr === void 0 ? void 0 : sdkErr.message) {\n        message = sdkErr.message;\n      }\n    } catch (_a) {\n      // noop\n    }\n    try {\n      // Cosmos-sdk error in processing message\n      const abciMessageLogs = JSON.parse(e.message);\n      if (abciMessageLogs && abciMessageLogs.length > 0) {\n        for (const abciMessageLog of abciMessageLogs) {\n          if (!abciMessageLog.success) {\n            const sdkErr = JSON.parse(abciMessageLog.log);\n            if (sdkErr === null || sdkErr === void 0 ? void 0 : sdkErr.message) {\n              message = sdkErr.message;\n              break;\n            }\n          }\n        }\n      }\n    } catch (_b) {\n      // noop\n    }\n    notification.create({\n      iconRelativeUrl: \"assets/logo-256.png\",\n      title: \"Tx failed\",\n      message\n    });\n  }\n}\nexports.BackgroundTxService = BackgroundTxService;","map":{"version":3,"mappings":"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","names":["BackgroundTxService","constructor","notification","init","chainsService","permissionService","sendTx","chainId","tx","mode","chainInfo","getChainInfo","restInstance","axios_1","create","baseURL","rest","restConfig","iconRelativeUrl","title","message","isProtoTx","buffer_1","isBuffer","Uint8Array","params","tx_bytes","from","toString","result","post","txResponse","data","code","Error","txHash","txhash","txTracer","cosmos_1","rpc","traceTx","then","close","processTxResultNotification","e","console","log","processTxErrorNotification","checkTx","undefined","deliverTx","regResult","exec","length","sdkErr","JSON","parse","abciMessageLogs","abciMessageLog","success","exports"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/@keplr-wallet/background/src/tx/service.ts"],"sourcesContent":["import Axios from \"axios\";\nimport { ChainsService } from \"../chains\";\nimport { PermissionService } from \"../permission\";\nimport { TendermintTxTracer } from \"@keplr-wallet/cosmos\";\nimport { Notification } from \"./types\";\n\nimport { Buffer } from \"buffer/\";\n\ninterface CosmosSdkError {\n  codespace: string;\n  code: number;\n  message: string;\n}\n\ninterface ABCIMessageLog {\n  msg_index: number;\n  success: boolean;\n  log: string;\n  // Events StringEvents\n}\n\nexport class BackgroundTxService {\n  protected chainsService!: ChainsService;\n  public permissionService!: PermissionService;\n\n  constructor(protected readonly notification: Notification) {}\n\n  init(chainsService: ChainsService, permissionService: PermissionService) {\n    this.chainsService = chainsService;\n    this.permissionService = permissionService;\n  }\n\n  async sendTx(\n    chainId: string,\n    tx: unknown,\n    mode: \"async\" | \"sync\" | \"block\"\n  ): Promise<Uint8Array> {\n    const chainInfo = await this.chainsService.getChainInfo(chainId);\n    const restInstance = Axios.create({\n      ...{\n        baseURL: chainInfo.rest,\n      },\n      ...chainInfo.restConfig,\n    });\n\n    this.notification.create({\n      iconRelativeUrl: \"assets/logo-256.png\",\n      title: \"Tx is pending...\",\n      message: \"Wait a second\",\n    });\n\n    const isProtoTx = Buffer.isBuffer(tx) || tx instanceof Uint8Array;\n\n    const params = isProtoTx\n      ? {\n          tx_bytes: Buffer.from(tx as any).toString(\"base64\"),\n          mode: (() => {\n            switch (mode) {\n              case \"async\":\n                return \"BROADCAST_MODE_ASYNC\";\n              case \"block\":\n                return \"BROADCAST_MODE_BLOCK\";\n              case \"sync\":\n                return \"BROADCAST_MODE_SYNC\";\n              default:\n                return \"BROADCAST_MODE_UNSPECIFIED\";\n            }\n          })(),\n        }\n      : {\n          tx,\n          mode: mode,\n        };\n\n    try {\n      const result = await restInstance.post(\n        isProtoTx ? \"/cosmos/tx/v1beta1/txs\" : \"/txs\",\n        params\n      );\n\n      const txResponse = isProtoTx ? result.data[\"tx_response\"] : result.data;\n\n      if (txResponse.code != null && txResponse.code !== 0) {\n        throw new Error(txResponse[\"raw_log\"]);\n      }\n\n      const txHash = Buffer.from(txResponse.txhash, \"hex\");\n\n      const txTracer = new TendermintTxTracer(chainInfo.rpc, \"/websocket\");\n      txTracer.traceTx(txHash).then((tx) => {\n        txTracer.close();\n        BackgroundTxService.processTxResultNotification(this.notification, tx);\n      });\n\n      return txHash;\n    } catch (e) {\n      console.log(e);\n      BackgroundTxService.processTxErrorNotification(this.notification, e);\n      throw e;\n    }\n  }\n\n  private static processTxResultNotification(\n    notification: Notification,\n    result: any\n  ): void {\n    try {\n      if (result.mode === \"commit\") {\n        if (result.checkTx.code !== undefined && result.checkTx.code !== 0) {\n          throw new Error(result.checkTx.log);\n        }\n        if (\n          result.deliverTx.code !== undefined &&\n          result.deliverTx.code !== 0\n        ) {\n          throw new Error(result.deliverTx.log);\n        }\n      } else {\n        if (result.code != null && result.code !== 0) {\n          // XXX: Hack of the support of the stargate.\n          const log = result.log ?? (result as any)[\"raw_log\"];\n          throw new Error(log);\n        }\n      }\n\n      notification.create({\n        iconRelativeUrl: \"assets/logo-256.png\",\n        title: \"Tx succeeds\",\n        // TODO: Let users know the tx id?\n        message: \"Congratulations!\",\n      });\n    } catch (e) {\n      BackgroundTxService.processTxErrorNotification(notification, e);\n    }\n  }\n\n  private static processTxErrorNotification(\n    notification: Notification,\n    e: Error\n  ): void {\n    console.log(e);\n    let message = e.message;\n\n    // Tendermint rpc error.\n    const regResult = /code:\\s*(-?\\d+),\\s*message:\\s*(.+),\\sdata:\\s(.+)/g.exec(\n      e.message\n    );\n    if (regResult && regResult.length === 4) {\n      // If error is from tendermint\n      message = regResult[3];\n    }\n\n    try {\n      // Cosmos-sdk error in ante handler\n      const sdkErr: CosmosSdkError = JSON.parse(e.message);\n      if (sdkErr?.message) {\n        message = sdkErr.message;\n      }\n    } catch {\n      // noop\n    }\n\n    try {\n      // Cosmos-sdk error in processing message\n      const abciMessageLogs: ABCIMessageLog[] = JSON.parse(e.message);\n      if (abciMessageLogs && abciMessageLogs.length > 0) {\n        for (const abciMessageLog of abciMessageLogs) {\n          if (!abciMessageLog.success) {\n            const sdkErr: CosmosSdkError = JSON.parse(abciMessageLog.log);\n            if (sdkErr?.message) {\n              message = sdkErr.message;\n              break;\n            }\n          }\n        }\n      }\n    } catch {\n      // noop\n    }\n\n    notification.create({\n      iconRelativeUrl: \"assets/logo-256.png\",\n      title: \"Tx failed\",\n      message,\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}