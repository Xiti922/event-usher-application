{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ChainInfoSchema = exports.SuggestingBIP44Schema = exports.Bech32ConfigSchema = exports.Secret20CurrencySchema = exports.CW20CurrencySchema = exports.CurrencySchema = void 0;\nconst router_1 = require(\"@keplr-wallet/router\");\nconst joi_1 = __importDefault(require(\"joi\"));\nexports.CurrencySchema = joi_1.default.object({\n  coinDenom: joi_1.default.string().required(),\n  coinMinimalDenom: joi_1.default.string().required(),\n  coinDecimals: joi_1.default.number().integer().min(0).max(18).required(),\n  coinGeckoId: joi_1.default.string(),\n  coinImageUrl: joi_1.default.string().uri()\n});\nexports.CW20CurrencySchema = exports.CurrencySchema.keys({\n  type: joi_1.default.string().equal(\"cw20\").required(),\n  contractAddress: joi_1.default.string().required()\n}).custom(value => {\n  if (value.coinMinimalDenom.startsWith(`${value.type}:${value.contractAddress}:`)) {\n    return value;\n  } else {\n    return Object.assign(Object.assign({}, value), {\n      coinMinimalDenom: `${value.type}:${value.contractAddress}:` + value.coinMinimalDenom\n    });\n  }\n});\nexports.Secret20CurrencySchema = exports.CurrencySchema.keys({\n  type: joi_1.default.string().equal(\"secret20\").required(),\n  contractAddress: joi_1.default.string().required(),\n  viewingKey: joi_1.default.string().required()\n}).custom(value => {\n  if (value.coinMinimalDenom.startsWith(`${value.type}:${value.contractAddress}:`)) {\n    return value;\n  } else {\n    return Object.assign(Object.assign({}, value), {\n      coinMinimalDenom: `${value.type}:${value.contractAddress}:` + value.coinMinimalDenom\n    });\n  }\n});\nexports.Bech32ConfigSchema = joi_1.default.object({\n  bech32PrefixAccAddr: joi_1.default.string().required(),\n  bech32PrefixAccPub: joi_1.default.string().required(),\n  bech32PrefixValAddr: joi_1.default.string().required(),\n  bech32PrefixValPub: joi_1.default.string().required(),\n  bech32PrefixConsAddr: joi_1.default.string().required(),\n  bech32PrefixConsPub: joi_1.default.string().required()\n});\nexports.SuggestingBIP44Schema = joi_1.default.object({\n  coinType: joi_1.default.number().integer().min(0).required()\n}).unknown(true);\nexports.ChainInfoSchema = joi_1.default.object({\n  rpc: joi_1.default.string().required().uri(),\n  // TODO: Handle rpc config.\n  rest: joi_1.default.string().required().uri(),\n  // TODO: Handle rest config.\n  chainId: joi_1.default.string().required().min(1).max(30),\n  chainName: joi_1.default.string().required().min(1).max(30),\n  stakeCurrency: exports.CurrencySchema.required(),\n  walletUrl: joi_1.default.string().uri(),\n  walletUrlForStaking: joi_1.default.string().uri(),\n  bip44: exports.SuggestingBIP44Schema.required(),\n  bech32Config: exports.Bech32ConfigSchema.required(),\n  currencies: joi_1.default.array().min(1).items(exports.CurrencySchema, exports.CW20CurrencySchema, exports.Secret20CurrencySchema).required(),\n  feeCurrencies: joi_1.default.array().min(1).items(exports.CurrencySchema).required(),\n  coinType: joi_1.default.number().integer(),\n  beta: joi_1.default.boolean(),\n  gasPriceStep: joi_1.default.object({\n    low: joi_1.default.number().required(),\n    average: joi_1.default.number().required(),\n    high: joi_1.default.number().required()\n  }),\n  features: joi_1.default.array().items(joi_1.default.string().valid(\"stargate\", \"cosmwasm\", \"wasmd_0.24+\", \"secretwasm\", \"ibc-transfer\", \"no-legacy-stdTx\", \"ibc-go\", \"eth-address-gen\", \"eth-key-sign\", \"query:/cosmos/bank/v1beta1/spendable_balances\", \"axelar-evm-bridge\")).unique().custom(value => {\n    if (value.indexOf(\"cosmwasm\") >= 0 && value.indexOf(\"secretwasm\") >= 0) {\n      throw new router_1.KeplrError(\"chains\", 430, \"cosmwasm and secretwasm are not compatible\");\n    }\n    return value;\n  })\n});","map":{"version":3,"mappings":"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","names":["exports","joi_1","object","coinDenom","string","required","coinMinimalDenom","coinDecimals","number","integer","min","max","coinGeckoId","coinImageUrl","uri","keys","type","equal","contractAddress","custom","value","startsWith","viewingKey","bech32PrefixAccAddr","bech32PrefixAccPub","bech32PrefixValAddr","bech32PrefixValPub","bech32PrefixConsAddr","bech32PrefixConsPub","coinType","unknown","rpc","rest","chainId","chainName","stakeCurrency","walletUrl","walletUrlForStaking","bip44","bech32Config","currencies","array","items","feeCurrencies","beta","boolean","gasPriceStep","low","average","high","features","valid","unique","indexOf","router_1"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/@keplr-wallet/background/src/chains/types.ts"],"sourcesContent":["import { KeplrError } from \"@keplr-wallet/router\";\nimport {\n  Bech32Config,\n  ChainInfo,\n  Currency,\n  CW20Currency,\n  Secret20Currency,\n} from \"@keplr-wallet/types\";\n\nimport Joi, { ObjectSchema } from \"joi\";\n\nexport type ChainInfoWithEmbed = ChainInfo & {\n  embeded: boolean;\n};\n\nexport const CurrencySchema = Joi.object<Currency>({\n  coinDenom: Joi.string().required(),\n  coinMinimalDenom: Joi.string().required(),\n  coinDecimals: Joi.number().integer().min(0).max(18).required(),\n  coinGeckoId: Joi.string(),\n  coinImageUrl: Joi.string().uri(),\n});\n\nexport const CW20CurrencySchema = (CurrencySchema as ObjectSchema<CW20Currency>)\n  .keys({\n    type: Joi.string().equal(\"cw20\").required(),\n    contractAddress: Joi.string().required(),\n  })\n  .custom((value: CW20Currency) => {\n    if (\n      value.coinMinimalDenom.startsWith(\n        `${value.type}:${value.contractAddress}:`\n      )\n    ) {\n      return value;\n    } else {\n      return {\n        ...value,\n        coinMinimalDenom:\n          `${value.type}:${value.contractAddress}:` + value.coinMinimalDenom,\n      };\n    }\n  });\n\nexport const Secret20CurrencySchema = (CurrencySchema as ObjectSchema<Secret20Currency>)\n  .keys({\n    type: Joi.string().equal(\"secret20\").required(),\n    contractAddress: Joi.string().required(),\n    viewingKey: Joi.string().required(),\n  })\n  .custom((value: Secret20Currency) => {\n    if (\n      value.coinMinimalDenom.startsWith(\n        `${value.type}:${value.contractAddress}:`\n      )\n    ) {\n      return value;\n    } else {\n      return {\n        ...value,\n        coinMinimalDenom:\n          `${value.type}:${value.contractAddress}:` + value.coinMinimalDenom,\n      };\n    }\n  });\n\nexport const Bech32ConfigSchema = Joi.object<Bech32Config>({\n  bech32PrefixAccAddr: Joi.string().required(),\n  bech32PrefixAccPub: Joi.string().required(),\n  bech32PrefixValAddr: Joi.string().required(),\n  bech32PrefixValPub: Joi.string().required(),\n  bech32PrefixConsAddr: Joi.string().required(),\n  bech32PrefixConsPub: Joi.string().required(),\n});\n\nexport const SuggestingBIP44Schema = Joi.object<{ coinType: number }>({\n  coinType: Joi.number().integer().min(0).required(),\n  // Alow the any keys for compatibility of cosmosJS's BIP44 (for legacy).\n}).unknown(true);\n\nexport const ChainInfoSchema = Joi.object<ChainInfo>({\n  rpc: Joi.string().required().uri(),\n  // TODO: Handle rpc config.\n  rest: Joi.string().required().uri(),\n  // TODO: Handle rest config.\n  chainId: Joi.string().required().min(1).max(30),\n  chainName: Joi.string().required().min(1).max(30),\n  stakeCurrency: CurrencySchema.required(),\n  walletUrl: Joi.string().uri(),\n  walletUrlForStaking: Joi.string().uri(),\n  bip44: SuggestingBIP44Schema.required(),\n  bech32Config: Bech32ConfigSchema.required(),\n  currencies: Joi.array()\n    .min(1)\n    .items(CurrencySchema, CW20CurrencySchema, Secret20CurrencySchema)\n    .required(),\n  feeCurrencies: Joi.array().min(1).items(CurrencySchema).required(),\n  coinType: Joi.number().integer(),\n  beta: Joi.boolean(),\n  gasPriceStep: Joi.object({\n    low: Joi.number().required(),\n    average: Joi.number().required(),\n    high: Joi.number().required(),\n  }),\n  features: Joi.array()\n    .items(\n      Joi.string().valid(\n        \"stargate\",\n        \"cosmwasm\",\n        \"wasmd_0.24+\",\n        \"secretwasm\",\n        \"ibc-transfer\",\n        \"no-legacy-stdTx\",\n        \"ibc-go\",\n        \"eth-address-gen\",\n        \"eth-key-sign\",\n        \"query:/cosmos/bank/v1beta1/spendable_balances\",\n        \"axelar-evm-bridge\"\n      )\n    )\n    .unique()\n    .custom((value: string[]) => {\n      if (value.indexOf(\"cosmwasm\") >= 0 && value.indexOf(\"secretwasm\") >= 0) {\n        throw new KeplrError(\n          \"chains\",\n          430,\n          \"cosmwasm and secretwasm are not compatible\"\n        );\n      }\n\n      return value;\n    }),\n});\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}