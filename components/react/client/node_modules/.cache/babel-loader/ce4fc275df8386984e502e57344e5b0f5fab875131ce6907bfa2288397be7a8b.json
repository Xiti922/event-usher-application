{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.cosmWasmTypes = exports.createWasmAminoConverters = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst long_1 = __importDefault(require(\"long\"));\nfunction createWasmAminoConverters() {\n  return {\n    \"/cosmwasm.wasm.v1.MsgStoreCode\": {\n      aminoType: \"wasm/MsgStoreCode\",\n      toAmino: _ref => {\n        let {\n          sender,\n          wasmByteCode\n        } = _ref;\n        return {\n          sender: sender,\n          wasm_byte_code: (0, encoding_1.toBase64)(wasmByteCode)\n        };\n      },\n      fromAmino: _ref2 => {\n        let {\n          sender,\n          wasm_byte_code\n        } = _ref2;\n        return {\n          sender: sender,\n          wasmByteCode: (0, encoding_1.fromBase64)(wasm_byte_code),\n          instantiatePermission: undefined\n        };\n      }\n    },\n    \"/cosmwasm.wasm.v1.MsgInstantiateContract\": {\n      aminoType: \"wasm/MsgInstantiateContract\",\n      toAmino: _ref3 => {\n        let {\n          sender,\n          codeId,\n          label,\n          msg,\n          funds,\n          admin\n        } = _ref3;\n        return {\n          sender: sender,\n          code_id: codeId.toString(),\n          label: label,\n          msg: JSON.parse((0, encoding_1.fromUtf8)(msg)),\n          funds: funds,\n          admin: admin || undefined\n        };\n      },\n      fromAmino: _ref4 => {\n        let {\n          sender,\n          code_id,\n          label,\n          msg,\n          funds,\n          admin\n        } = _ref4;\n        return {\n          sender: sender,\n          codeId: long_1.default.fromString(code_id),\n          label: label,\n          msg: (0, encoding_1.toUtf8)(JSON.stringify(msg)),\n          funds: [...funds],\n          admin: admin !== null && admin !== void 0 ? admin : \"\"\n        };\n      }\n    },\n    \"/cosmwasm.wasm.v1.MsgUpdateAdmin\": {\n      aminoType: \"wasm/MsgUpdateAdmin\",\n      toAmino: _ref5 => {\n        let {\n          sender,\n          newAdmin,\n          contract\n        } = _ref5;\n        return {\n          sender: sender,\n          new_admin: newAdmin,\n          contract: contract\n        };\n      },\n      fromAmino: _ref6 => {\n        let {\n          sender,\n          new_admin,\n          contract\n        } = _ref6;\n        return {\n          sender: sender,\n          newAdmin: new_admin,\n          contract: contract\n        };\n      }\n    },\n    \"/cosmwasm.wasm.v1.MsgClearAdmin\": {\n      aminoType: \"wasm/MsgClearAdmin\",\n      toAmino: _ref7 => {\n        let {\n          sender,\n          contract\n        } = _ref7;\n        return {\n          sender: sender,\n          contract: contract\n        };\n      },\n      fromAmino: _ref8 => {\n        let {\n          sender,\n          contract\n        } = _ref8;\n        return {\n          sender: sender,\n          contract: contract\n        };\n      }\n    },\n    \"/cosmwasm.wasm.v1.MsgExecuteContract\": {\n      aminoType: \"wasm/MsgExecuteContract\",\n      toAmino: _ref9 => {\n        let {\n          sender,\n          contract,\n          msg,\n          funds\n        } = _ref9;\n        return {\n          sender: sender,\n          contract: contract,\n          msg: JSON.parse((0, encoding_1.fromUtf8)(msg)),\n          funds: funds\n        };\n      },\n      fromAmino: _ref10 => {\n        let {\n          sender,\n          contract,\n          msg,\n          funds\n        } = _ref10;\n        return {\n          sender: sender,\n          contract: contract,\n          msg: (0, encoding_1.toUtf8)(JSON.stringify(msg)),\n          funds: [...funds]\n        };\n      }\n    },\n    \"/cosmwasm.wasm.v1.MsgMigrateContract\": {\n      aminoType: \"wasm/MsgMigrateContract\",\n      toAmino: _ref11 => {\n        let {\n          sender,\n          contract,\n          codeId,\n          msg\n        } = _ref11;\n        return {\n          sender: sender,\n          contract: contract,\n          code_id: codeId.toString(),\n          msg: JSON.parse((0, encoding_1.fromUtf8)(msg))\n        };\n      },\n      fromAmino: _ref12 => {\n        let {\n          sender,\n          contract,\n          code_id,\n          msg\n        } = _ref12;\n        return {\n          sender: sender,\n          contract: contract,\n          codeId: long_1.default.fromString(code_id),\n          msg: (0, encoding_1.toUtf8)(JSON.stringify(msg))\n        };\n      }\n    }\n  };\n}\nexports.createWasmAminoConverters = createWasmAminoConverters;\n/** @deprecated use `createWasmAminoConverters()` */\nexports.cosmWasmTypes = createWasmAminoConverters();","map":{"version":3,"mappings":"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","names":["createWasmAminoConverters","aminoType","toAmino","sender","wasmByteCode","wasm_byte_code","fromAmino","instantiatePermission","undefined","codeId","label","msg","funds","admin","code_id","toString","JSON","parse","long_1","fromString","stringify","newAdmin","contract","new_admin","exports"],"sources":["../../../src/modules/wasm/aminomessages.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}