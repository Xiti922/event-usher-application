{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setupWasmExtension = void 0;\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst stargate_1 = require(\"@cosmjs/stargate\");\nconst query_1 = require(\"cosmjs-types/cosmwasm/wasm/v1/query\");\nconst long_1 = __importDefault(require(\"long\"));\nfunction setupWasmExtension(base) {\n  const rpc = (0, stargate_1.createProtobufRpcClient)(base);\n  // Use this service to get easy typed access to query methods\n  // This cannot be used for proof verification\n  const queryService = new query_1.QueryClientImpl(rpc);\n  return {\n    wasm: {\n      listCodeInfo: async paginationKey => {\n        const request = {\n          pagination: (0, stargate_1.createPagination)(paginationKey)\n        };\n        return queryService.Codes(request);\n      },\n      getCode: async id => {\n        const request = {\n          codeId: long_1.default.fromNumber(id)\n        };\n        return queryService.Code(request);\n      },\n      listContractsByCodeId: async (id, paginationKey) => {\n        const request = {\n          codeId: long_1.default.fromNumber(id),\n          pagination: (0, stargate_1.createPagination)(paginationKey)\n        };\n        return queryService.ContractsByCode(request);\n      },\n      getContractInfo: async address => {\n        const request = {\n          address: address\n        };\n        return queryService.ContractInfo(request);\n      },\n      getContractCodeHistory: async (address, paginationKey) => {\n        const request = {\n          address: address,\n          pagination: (0, stargate_1.createPagination)(paginationKey)\n        };\n        return queryService.ContractHistory(request);\n      },\n      getAllContractState: async (address, paginationKey) => {\n        const request = {\n          address: address,\n          pagination: (0, stargate_1.createPagination)(paginationKey)\n        };\n        return queryService.AllContractState(request);\n      },\n      queryContractRaw: async (address, key) => {\n        const request = {\n          address: address,\n          queryData: key\n        };\n        return queryService.RawContractState(request);\n      },\n      queryContractSmart: async (address, query) => {\n        const request = {\n          address: address,\n          queryData: (0, encoding_1.toUtf8)(JSON.stringify(query))\n        };\n        const {\n          data\n        } = await queryService.SmartContractState(request);\n        // By convention, smart queries must return a valid JSON document (see https://github.com/CosmWasm/cosmwasm/issues/144)\n        let responseText;\n        try {\n          responseText = (0, encoding_1.fromUtf8)(data);\n        } catch (error) {\n          throw new Error(`Could not UTF-8 decode smart query response from contract: ${error}`);\n        }\n        try {\n          return JSON.parse(responseText);\n        } catch (error) {\n          throw new Error(`Could not JSON parse smart query response from contract: ${error}`);\n        }\n      }\n    }\n  };\n}\nexports.setupWasmExtension = setupWasmExtension;","map":{"version":3,"mappings":";;;;;;;;;;;AAAA;AACA;AACA;AAUA;AAuDA,SAAgBA,kBAAkB,CAACC,IAAiB;EAClD,MAAMC,GAAG,GAAG,sCAAuB,EAACD,IAAI,CAAC;EACzC;EACA;EACA,MAAME,YAAY,GAAG,IAAIC,uBAAe,CAACF,GAAG,CAAC;EAE7C,OAAO;IACLG,IAAI,EAAE;MACJC,YAAY,EAAE,MAAOC,aAA0B,IAAI;QACjD,MAAMC,OAAO,GAAG;UACdC,UAAU,EAAE,+BAAgB,EAACF,aAAa;SAC3C;QACD,OAAOJ,YAAY,CAACO,KAAK,CAACF,OAAO,CAAC;MACpC,CAAC;MACDG,OAAO,EAAE,MAAOC,EAAU,IAAI;QAC5B,MAAMJ,OAAO,GAAG;UAAEK,MAAM,EAAEC,cAAI,CAACC,UAAU,CAACH,EAAE;QAAC,CAAE;QAC/C,OAAOT,YAAY,CAACa,IAAI,CAACR,OAAO,CAAC;MACnC,CAAC;MACDS,qBAAqB,EAAE,OAAOL,EAAU,EAAEL,aAA0B,KAAI;QACtE,MAAMC,OAAO,GAAG;UACdK,MAAM,EAAEC,cAAI,CAACC,UAAU,CAACH,EAAE,CAAC;UAC3BH,UAAU,EAAE,+BAAgB,EAACF,aAAa;SAC3C;QACD,OAAOJ,YAAY,CAACe,eAAe,CAACV,OAAO,CAAC;MAC9C,CAAC;MACDW,eAAe,EAAE,MAAOC,OAAe,IAAI;QACzC,MAAMZ,OAAO,GAAG;UAAEY,OAAO,EAAEA;QAAO,CAAE;QACpC,OAAOjB,YAAY,CAACkB,YAAY,CAACb,OAAO,CAAC;MAC3C,CAAC;MAEDc,sBAAsB,EAAE,OAAOF,OAAe,EAAEb,aAA0B,KAAI;QAC5E,MAAMC,OAAO,GAAG;UACdY,OAAO,EAAEA,OAAO;UAChBX,UAAU,EAAE,+BAAgB,EAACF,aAAa;SAC3C;QACD,OAAOJ,YAAY,CAACoB,eAAe,CAACf,OAAO,CAAC;MAC9C,CAAC;MAEDgB,mBAAmB,EAAE,OAAOJ,OAAe,EAAEb,aAA0B,KAAI;QACzE,MAAMC,OAAO,GAAG;UACdY,OAAO,EAAEA,OAAO;UAChBX,UAAU,EAAE,+BAAgB,EAACF,aAAa;SAC3C;QACD,OAAOJ,YAAY,CAACsB,gBAAgB,CAACjB,OAAO,CAAC;MAC/C,CAAC;MAEDkB,gBAAgB,EAAE,OAAON,OAAe,EAAEO,GAAe,KAAI;QAC3D,MAAMnB,OAAO,GAAG;UAAEY,OAAO,EAAEA,OAAO;UAAEQ,SAAS,EAAED;QAAG,CAAE;QACpD,OAAOxB,YAAY,CAAC0B,gBAAgB,CAACrB,OAAO,CAAC;MAC/C,CAAC;MAEDsB,kBAAkB,EAAE,OAAOV,OAAe,EAAEW,KAAiB,KAAI;QAC/D,MAAMvB,OAAO,GAAG;UAAEY,OAAO,EAAEA,OAAO;UAAEQ,SAAS,EAAE,qBAAM,EAACI,IAAI,CAACC,SAAS,CAACF,KAAK,CAAC;QAAC,CAAE;QAC9E,MAAM;UAAEG;QAAI,CAAE,GAAG,MAAM/B,YAAY,CAACgC,kBAAkB,CAAC3B,OAAO,CAAC;QAC/D;QACA,IAAI4B,YAAoB;QACxB,IAAI;UACFA,YAAY,GAAG,uBAAQ,EAACF,IAAI,CAAC;SAC9B,CAAC,OAAOG,KAAK,EAAE;UACd,MAAM,IAAIC,KAAK,CAAC,8DAA8DD,KAAK,EAAE,CAAC;;QAExF,IAAI;UACF,OAAOL,IAAI,CAACO,KAAK,CAACH,YAAY,CAAC;SAChC,CAAC,OAAOC,KAAK,EAAE;UACd,MAAM,IAAIC,KAAK,CAAC,4DAA4DD,KAAK,EAAE,CAAC;;MAExF;;GAEH;AACH;AArEAG","names":["setupWasmExtension","base","rpc","queryService","query_1","wasm","listCodeInfo","paginationKey","request","pagination","Codes","getCode","id","codeId","long_1","fromNumber","Code","listContractsByCodeId","ContractsByCode","getContractInfo","address","ContractInfo","getContractCodeHistory","ContractHistory","getAllContractState","AllContractState","queryContractRaw","key","queryData","RawContractState","queryContractSmart","query","JSON","stringify","data","SmartContractState","responseText","error","Error","parse","exports"],"sources":["../../../src/modules/wasm/queries.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}