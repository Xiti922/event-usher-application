{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SigningCosmWasmClient = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nconst amino_1 = require(\"@cosmjs/amino\");\nconst crypto_1 = require(\"@cosmjs/crypto\");\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst math_1 = require(\"@cosmjs/math\");\nconst proto_signing_1 = require(\"@cosmjs/proto-signing\");\nconst stargate_1 = require(\"@cosmjs/stargate\");\nconst tendermint_rpc_1 = require(\"@cosmjs/tendermint-rpc\");\nconst utils_1 = require(\"@cosmjs/utils\");\nconst tx_1 = require(\"cosmjs-types/cosmos/distribution/v1beta1/tx\");\nconst tx_2 = require(\"cosmjs-types/cosmos/staking/v1beta1/tx\");\nconst signing_1 = require(\"cosmjs-types/cosmos/tx/signing/v1beta1/signing\");\nconst tx_3 = require(\"cosmjs-types/cosmos/tx/v1beta1/tx\");\nconst tx_4 = require(\"cosmjs-types/cosmwasm/wasm/v1/tx\");\nconst long_1 = __importDefault(require(\"long\"));\nconst pako_1 = __importDefault(require(\"pako\"));\nconst cosmwasmclient_1 = require(\"./cosmwasmclient\");\nconst modules_1 = require(\"./modules\");\nfunction createDeliverTxResponseErrorMessage(result) {\n  return `Error when broadcasting tx ${result.transactionHash} at height ${result.height}. Code: ${result.code}; Raw log: ${result.rawLog}`;\n}\nfunction createDefaultRegistry() {\n  return new proto_signing_1.Registry([...stargate_1.defaultRegistryTypes, ...modules_1.wasmTypes]);\n}\nclass SigningCosmWasmClient extends cosmwasmclient_1.CosmWasmClient {\n  constructor(tmClient, signer, options) {\n    super(tmClient);\n    const {\n      registry = createDefaultRegistry(),\n      aminoTypes = new stargate_1.AminoTypes({\n        ...(0, modules_1.createWasmAminoConverters)(),\n        ...(0, stargate_1.createBankAminoConverters)()\n      })\n    } = options;\n    this.registry = registry;\n    this.aminoTypes = aminoTypes;\n    this.signer = signer;\n    this.broadcastTimeoutMs = options.broadcastTimeoutMs;\n    this.broadcastPollIntervalMs = options.broadcastPollIntervalMs;\n    this.gasPrice = options.gasPrice;\n  }\n  static async connectWithSigner(endpoint, signer) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const tmClient = await tendermint_rpc_1.Tendermint34Client.connect(endpoint);\n    return new SigningCosmWasmClient(tmClient, signer, options);\n  }\n  /**\n   * Creates a client in offline mode.\n   *\n   * This should only be used in niche cases where you know exactly what you're doing,\n   * e.g. when building an offline signing application.\n   *\n   * When you try to use online functionality with such a signer, an\n   * exception will be raised.\n   */\n  static async offline(signer) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return new SigningCosmWasmClient(undefined, signer, options);\n  }\n  async simulate(signerAddress, messages, memo) {\n    const anyMsgs = messages.map(m => this.registry.encodeAsAny(m));\n    const accountFromSigner = (await this.signer.getAccounts()).find(account => account.address === signerAddress);\n    if (!accountFromSigner) {\n      throw new Error(\"Failed to retrieve account from signer\");\n    }\n    const pubkey = (0, amino_1.encodeSecp256k1Pubkey)(accountFromSigner.pubkey);\n    const {\n      sequence\n    } = await this.getSequence(signerAddress);\n    const {\n      gasInfo\n    } = await this.forceGetQueryClient().tx.simulate(anyMsgs, memo, pubkey, sequence);\n    (0, utils_1.assertDefined)(gasInfo);\n    return math_1.Uint53.fromString(gasInfo.gasUsed.toString()).toNumber();\n  }\n  /** Uploads code and returns a receipt, including the code ID */\n  async upload(senderAddress, wasmCode, fee) {\n    let memo = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"\";\n    const compressed = pako_1.default.gzip(wasmCode, {\n      level: 9\n    });\n    const storeCodeMsg = {\n      typeUrl: \"/cosmwasm.wasm.v1.MsgStoreCode\",\n      value: tx_4.MsgStoreCode.fromPartial({\n        sender: senderAddress,\n        wasmByteCode: compressed\n      })\n    };\n    const result = await this.signAndBroadcast(senderAddress, [storeCodeMsg], fee, memo);\n    if ((0, stargate_1.isDeliverTxFailure)(result)) {\n      throw new Error(createDeliverTxResponseErrorMessage(result));\n    }\n    const parsedLogs = stargate_1.logs.parseRawLog(result.rawLog);\n    const codeIdAttr = stargate_1.logs.findAttribute(parsedLogs, \"store_code\", \"code_id\");\n    return {\n      originalSize: wasmCode.length,\n      originalChecksum: (0, encoding_1.toHex)((0, crypto_1.sha256)(wasmCode)),\n      compressedSize: compressed.length,\n      compressedChecksum: (0, encoding_1.toHex)((0, crypto_1.sha256)(compressed)),\n      codeId: Number.parseInt(codeIdAttr.value, 10),\n      logs: parsedLogs,\n      height: result.height,\n      transactionHash: result.transactionHash,\n      events: result.events,\n      gasWanted: result.gasWanted,\n      gasUsed: result.gasUsed\n    };\n  }\n  async instantiate(senderAddress, codeId, msg, label, fee) {\n    let options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n    const instantiateContractMsg = {\n      typeUrl: \"/cosmwasm.wasm.v1.MsgInstantiateContract\",\n      value: tx_4.MsgInstantiateContract.fromPartial({\n        sender: senderAddress,\n        codeId: long_1.default.fromString(new math_1.Uint53(codeId).toString()),\n        label: label,\n        msg: (0, encoding_1.toUtf8)(JSON.stringify(msg)),\n        funds: [...(options.funds || [])],\n        admin: options.admin\n      })\n    };\n    const result = await this.signAndBroadcast(senderAddress, [instantiateContractMsg], fee, options.memo);\n    if ((0, stargate_1.isDeliverTxFailure)(result)) {\n      throw new Error(createDeliverTxResponseErrorMessage(result));\n    }\n    const parsedLogs = stargate_1.logs.parseRawLog(result.rawLog);\n    const contractAddressAttr = stargate_1.logs.findAttribute(parsedLogs, \"instantiate\", \"_contract_address\");\n    return {\n      contractAddress: contractAddressAttr.value,\n      logs: parsedLogs,\n      height: result.height,\n      transactionHash: result.transactionHash,\n      events: result.events,\n      gasWanted: result.gasWanted,\n      gasUsed: result.gasUsed\n    };\n  }\n  async updateAdmin(senderAddress, contractAddress, newAdmin, fee) {\n    let memo = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : \"\";\n    const updateAdminMsg = {\n      typeUrl: \"/cosmwasm.wasm.v1.MsgUpdateAdmin\",\n      value: tx_4.MsgUpdateAdmin.fromPartial({\n        sender: senderAddress,\n        contract: contractAddress,\n        newAdmin: newAdmin\n      })\n    };\n    const result = await this.signAndBroadcast(senderAddress, [updateAdminMsg], fee, memo);\n    if ((0, stargate_1.isDeliverTxFailure)(result)) {\n      throw new Error(createDeliverTxResponseErrorMessage(result));\n    }\n    return {\n      logs: stargate_1.logs.parseRawLog(result.rawLog),\n      height: result.height,\n      transactionHash: result.transactionHash,\n      events: result.events,\n      gasWanted: result.gasWanted,\n      gasUsed: result.gasUsed\n    };\n  }\n  async clearAdmin(senderAddress, contractAddress, fee) {\n    let memo = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"\";\n    const clearAdminMsg = {\n      typeUrl: \"/cosmwasm.wasm.v1.MsgClearAdmin\",\n      value: tx_4.MsgClearAdmin.fromPartial({\n        sender: senderAddress,\n        contract: contractAddress\n      })\n    };\n    const result = await this.signAndBroadcast(senderAddress, [clearAdminMsg], fee, memo);\n    if ((0, stargate_1.isDeliverTxFailure)(result)) {\n      throw new Error(createDeliverTxResponseErrorMessage(result));\n    }\n    return {\n      logs: stargate_1.logs.parseRawLog(result.rawLog),\n      height: result.height,\n      transactionHash: result.transactionHash,\n      events: result.events,\n      gasWanted: result.gasWanted,\n      gasUsed: result.gasUsed\n    };\n  }\n  async migrate(senderAddress, contractAddress, codeId, migrateMsg, fee) {\n    let memo = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : \"\";\n    const migrateContractMsg = {\n      typeUrl: \"/cosmwasm.wasm.v1.MsgMigrateContract\",\n      value: tx_4.MsgMigrateContract.fromPartial({\n        sender: senderAddress,\n        contract: contractAddress,\n        codeId: long_1.default.fromString(new math_1.Uint53(codeId).toString()),\n        msg: (0, encoding_1.toUtf8)(JSON.stringify(migrateMsg))\n      })\n    };\n    const result = await this.signAndBroadcast(senderAddress, [migrateContractMsg], fee, memo);\n    if ((0, stargate_1.isDeliverTxFailure)(result)) {\n      throw new Error(createDeliverTxResponseErrorMessage(result));\n    }\n    return {\n      logs: stargate_1.logs.parseRawLog(result.rawLog),\n      height: result.height,\n      transactionHash: result.transactionHash,\n      events: result.events,\n      gasWanted: result.gasWanted,\n      gasUsed: result.gasUsed\n    };\n  }\n  async execute(senderAddress, contractAddress, msg, fee) {\n    let memo = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : \"\";\n    let funds = arguments.length > 5 ? arguments[5] : undefined;\n    const instruction = {\n      contractAddress: contractAddress,\n      msg: msg,\n      funds: funds\n    };\n    return this.executeMultiple(senderAddress, [instruction], fee, memo);\n  }\n  /**\n   * Like `execute` but allows executing multiple messages in one transaction.\n   */\n  async executeMultiple(senderAddress, instructions, fee) {\n    let memo = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"\";\n    const msgs = instructions.map(i => ({\n      typeUrl: \"/cosmwasm.wasm.v1.MsgExecuteContract\",\n      value: tx_4.MsgExecuteContract.fromPartial({\n        sender: senderAddress,\n        contract: i.contractAddress,\n        msg: (0, encoding_1.toUtf8)(JSON.stringify(i.msg)),\n        funds: [...(i.funds || [])]\n      })\n    }));\n    const result = await this.signAndBroadcast(senderAddress, msgs, fee, memo);\n    if ((0, stargate_1.isDeliverTxFailure)(result)) {\n      throw new Error(createDeliverTxResponseErrorMessage(result));\n    }\n    return {\n      logs: stargate_1.logs.parseRawLog(result.rawLog),\n      height: result.height,\n      transactionHash: result.transactionHash,\n      events: result.events,\n      gasWanted: result.gasWanted,\n      gasUsed: result.gasUsed\n    };\n  }\n  async sendTokens(senderAddress, recipientAddress, amount, fee) {\n    let memo = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : \"\";\n    const sendMsg = {\n      typeUrl: \"/cosmos.bank.v1beta1.MsgSend\",\n      value: {\n        fromAddress: senderAddress,\n        toAddress: recipientAddress,\n        amount: [...amount]\n      }\n    };\n    return this.signAndBroadcast(senderAddress, [sendMsg], fee, memo);\n  }\n  async delegateTokens(delegatorAddress, validatorAddress, amount, fee) {\n    let memo = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : \"\";\n    const delegateMsg = {\n      typeUrl: \"/cosmos.staking.v1beta1.MsgDelegate\",\n      value: tx_2.MsgDelegate.fromPartial({\n        delegatorAddress: delegatorAddress,\n        validatorAddress,\n        amount\n      })\n    };\n    return this.signAndBroadcast(delegatorAddress, [delegateMsg], fee, memo);\n  }\n  async undelegateTokens(delegatorAddress, validatorAddress, amount, fee) {\n    let memo = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : \"\";\n    const undelegateMsg = {\n      typeUrl: \"/cosmos.staking.v1beta1.MsgUndelegate\",\n      value: tx_2.MsgUndelegate.fromPartial({\n        delegatorAddress: delegatorAddress,\n        validatorAddress,\n        amount\n      })\n    };\n    return this.signAndBroadcast(delegatorAddress, [undelegateMsg], fee, memo);\n  }\n  async withdrawRewards(delegatorAddress, validatorAddress, fee) {\n    let memo = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"\";\n    const withdrawDelegatorRewardMsg = {\n      typeUrl: \"/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward\",\n      value: tx_1.MsgWithdrawDelegatorReward.fromPartial({\n        delegatorAddress: delegatorAddress,\n        validatorAddress\n      })\n    };\n    return this.signAndBroadcast(delegatorAddress, [withdrawDelegatorRewardMsg], fee, memo);\n  }\n  /**\n   * Creates a transaction with the given messages, fee and memo. Then signs and broadcasts the transaction.\n   *\n   * @param signerAddress The address that will sign transactions using this instance. The signer must be able to sign with this address.\n   * @param messages\n   * @param fee\n   * @param memo\n   */\n  async signAndBroadcast(signerAddress, messages, fee) {\n    let memo = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"\";\n    let usedFee;\n    if (fee == \"auto\" || typeof fee === \"number\") {\n      (0, utils_1.assertDefined)(this.gasPrice, \"Gas price must be set in the client options when auto gas is used.\");\n      const gasEstimation = await this.simulate(signerAddress, messages, memo);\n      const multiplier = typeof fee === \"number\" ? fee : 1.3;\n      usedFee = (0, stargate_1.calculateFee)(Math.round(gasEstimation * multiplier), this.gasPrice);\n    } else {\n      usedFee = fee;\n    }\n    const txRaw = await this.sign(signerAddress, messages, usedFee, memo);\n    const txBytes = tx_3.TxRaw.encode(txRaw).finish();\n    return this.broadcastTx(txBytes, this.broadcastTimeoutMs, this.broadcastPollIntervalMs);\n  }\n  async sign(signerAddress, messages, fee, memo, explicitSignerData) {\n    let signerData;\n    if (explicitSignerData) {\n      signerData = explicitSignerData;\n    } else {\n      const {\n        accountNumber,\n        sequence\n      } = await this.getSequence(signerAddress);\n      const chainId = await this.getChainId();\n      signerData = {\n        accountNumber: accountNumber,\n        sequence: sequence,\n        chainId: chainId\n      };\n    }\n    return (0, proto_signing_1.isOfflineDirectSigner)(this.signer) ? this.signDirect(signerAddress, messages, fee, memo, signerData) : this.signAmino(signerAddress, messages, fee, memo, signerData);\n  }\n  async signAmino(signerAddress, messages, fee, memo, _ref) {\n    let {\n      accountNumber,\n      sequence,\n      chainId\n    } = _ref;\n    (0, utils_1.assert)(!(0, proto_signing_1.isOfflineDirectSigner)(this.signer));\n    const accountFromSigner = (await this.signer.getAccounts()).find(account => account.address === signerAddress);\n    if (!accountFromSigner) {\n      throw new Error(\"Failed to retrieve account from signer\");\n    }\n    const pubkey = (0, proto_signing_1.encodePubkey)((0, amino_1.encodeSecp256k1Pubkey)(accountFromSigner.pubkey));\n    const signMode = signing_1.SignMode.SIGN_MODE_LEGACY_AMINO_JSON;\n    const msgs = messages.map(msg => this.aminoTypes.toAmino(msg));\n    const signDoc = (0, amino_1.makeSignDoc)(msgs, fee, chainId, memo, accountNumber, sequence);\n    const {\n      signature,\n      signed\n    } = await this.signer.signAmino(signerAddress, signDoc);\n    const signedTxBody = {\n      typeUrl: \"/cosmos.tx.v1beta1.TxBody\",\n      value: {\n        messages: signed.msgs.map(msg => this.aminoTypes.fromAmino(msg)),\n        memo: signed.memo\n      }\n    };\n    const signedTxBodyBytes = this.registry.encode(signedTxBody);\n    const signedGasLimit = math_1.Int53.fromString(signed.fee.gas).toNumber();\n    const signedSequence = math_1.Int53.fromString(signed.sequence).toNumber();\n    const signedAuthInfoBytes = (0, proto_signing_1.makeAuthInfoBytes)([{\n      pubkey,\n      sequence: signedSequence\n    }], signed.fee.amount, signedGasLimit, signed.fee.granter, signed.fee.payer, signMode);\n    return tx_3.TxRaw.fromPartial({\n      bodyBytes: signedTxBodyBytes,\n      authInfoBytes: signedAuthInfoBytes,\n      signatures: [(0, encoding_1.fromBase64)(signature.signature)]\n    });\n  }\n  async signDirect(signerAddress, messages, fee, memo, _ref2) {\n    let {\n      accountNumber,\n      sequence,\n      chainId\n    } = _ref2;\n    (0, utils_1.assert)((0, proto_signing_1.isOfflineDirectSigner)(this.signer));\n    const accountFromSigner = (await this.signer.getAccounts()).find(account => account.address === signerAddress);\n    if (!accountFromSigner) {\n      throw new Error(\"Failed to retrieve account from signer\");\n    }\n    const pubkey = (0, proto_signing_1.encodePubkey)((0, amino_1.encodeSecp256k1Pubkey)(accountFromSigner.pubkey));\n    const txBody = {\n      typeUrl: \"/cosmos.tx.v1beta1.TxBody\",\n      value: {\n        messages: messages,\n        memo: memo\n      }\n    };\n    const txBodyBytes = this.registry.encode(txBody);\n    const gasLimit = math_1.Int53.fromString(fee.gas).toNumber();\n    const authInfoBytes = (0, proto_signing_1.makeAuthInfoBytes)([{\n      pubkey,\n      sequence\n    }], fee.amount, gasLimit, fee.granter, fee.payer);\n    const signDoc = (0, proto_signing_1.makeSignDoc)(txBodyBytes, authInfoBytes, chainId, accountNumber);\n    const {\n      signature,\n      signed\n    } = await this.signer.signDirect(signerAddress, signDoc);\n    return tx_3.TxRaw.fromPartial({\n      bodyBytes: signed.bodyBytes,\n      authInfoBytes: signed.authInfoBytes,\n      signatures: [(0, encoding_1.fromBase64)(signature.signature)]\n    });\n  }\n}\nexports.SigningCosmWasmClient = SigningCosmWasmClient;","map":{"version":3,"mappings":"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","names":["createDeliverTxResponseErrorMessage","result","transactionHash","height","code","rawLog","createDefaultRegistry","proto_signing_1","stargate_1","modules_1","SigningCosmWasmClient","cosmwasmclient_1","constructor","tmClient","signer","options","registry","aminoTypes","broadcastTimeoutMs","broadcastPollIntervalMs","gasPrice","connectWithSigner","endpoint","tendermint_rpc_1","connect","offline","undefined","simulate","signerAddress","messages","memo","anyMsgs","map","m","encodeAsAny","accountFromSigner","getAccounts","find","account","address","Error","pubkey","sequence","getSequence","gasInfo","forceGetQueryClient","tx","math_1","fromString","gasUsed","toString","toNumber","upload","senderAddress","wasmCode","fee","compressed","pako_1","gzip","level","storeCodeMsg","typeUrl","value","tx_4","fromPartial","sender","wasmByteCode","signAndBroadcast","parsedLogs","parseRawLog","codeIdAttr","findAttribute","originalSize","length","originalChecksum","compressedSize","compressedChecksum","codeId","Number","parseInt","logs","events","gasWanted","instantiate","msg","label","instantiateContractMsg","long_1","JSON","stringify","funds","admin","contractAddressAttr","contractAddress","updateAdmin","newAdmin","updateAdminMsg","contract","clearAdmin","clearAdminMsg","migrate","migrateMsg","migrateContractMsg","execute","instruction","executeMultiple","instructions","msgs","i","sendTokens","recipientAddress","amount","sendMsg","fromAddress","toAddress","delegateTokens","delegatorAddress","validatorAddress","delegateMsg","tx_2","undelegateTokens","undelegateMsg","withdrawRewards","withdrawDelegatorRewardMsg","tx_1","usedFee","gasEstimation","multiplier","Math","round","txRaw","sign","txBytes","tx_3","encode","finish","broadcastTx","explicitSignerData","signerData","accountNumber","chainId","getChainId","signDirect","signAmino","signMode","signing_1","SIGN_MODE_LEGACY_AMINO_JSON","toAmino","signDoc","signature","signed","signedTxBody","fromAmino","signedTxBodyBytes","signedGasLimit","gas","signedSequence","signedAuthInfoBytes","granter","payer","bodyBytes","authInfoBytes","signatures","txBody","txBodyBytes","gasLimit","exports"],"sources":["../src/signingcosmwasmclient.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}