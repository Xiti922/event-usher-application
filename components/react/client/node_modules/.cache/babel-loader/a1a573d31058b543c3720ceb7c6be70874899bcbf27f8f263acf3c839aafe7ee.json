{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst crypto_1 = require(\"@iov/crypto\");\nconst encoding_1 = require(\"@iov/encoding\");\nconst types_1 = require(\"./types\");\nconst {\n  fromBase64\n} = encoding_1.Encoding;\nfunction rawSecp256k1PubkeyToAddress(pubkeyRaw, prefix) {\n  if (pubkeyRaw.length !== 33) {\n    throw new Error(`Invalid Secp256k1 pubkey length (compressed): ${pubkeyRaw.length}`);\n  }\n  const hash1 = new crypto_1.Sha256(pubkeyRaw).digest();\n  const hash2 = new crypto_1.Ripemd160(hash1).digest();\n  return encoding_1.Bech32.encode(prefix, hash2);\n}\nexports.rawSecp256k1PubkeyToAddress = rawSecp256k1PubkeyToAddress;\n// See https://github.com/tendermint/tendermint/blob/f2ada0a604b4c0763bda2f64fac53d506d3beca7/docs/spec/blockchain/encoding.md#public-key-cryptography\n// This assumes we already have a cosmos-compressed pubkey\nfunction pubkeyToAddress(pubkey, prefix) {\n  const pubkeyBytes = fromBase64(pubkey.value);\n  switch (pubkey.type) {\n    case types_1.pubkeyType.secp256k1:\n      {\n        return rawSecp256k1PubkeyToAddress(pubkeyBytes, prefix);\n      }\n    case types_1.pubkeyType.ed25519:\n      {\n        if (pubkeyBytes.length !== 32) {\n          throw new Error(`Invalid Ed25519 pubkey length: ${pubkeyBytes.length}`);\n        }\n        const hash = new crypto_1.Sha256(pubkeyBytes).digest();\n        return encoding_1.Bech32.encode(prefix, hash.slice(0, 20));\n      }\n    case types_1.pubkeyType.sr25519:\n      {\n        if (pubkeyBytes.length !== 32) {\n          throw new Error(`Invalid Sr25519 pubkey length: ${pubkeyBytes.length}`);\n        }\n        const hash = new crypto_1.Sha256(pubkeyBytes).digest();\n        return encoding_1.Bech32.encode(prefix, hash.slice(0, 20));\n      }\n    default:\n      throw new Error(\"Unrecognized public key algorithm\");\n  }\n}\nexports.pubkeyToAddress = pubkeyToAddress;","map":{"version":3,"mappings":";;;;;AAAA;AACA;AAEA;AAEA,MAAM;EAAEA;AAAU,CAAE,GAAGC,mBAAQ;AAE/B,SAAgBC,2BAA2B,CAACC,SAAqB,EAAEC,MAAc;EAC/E,IAAID,SAAS,CAACE,MAAM,KAAK,EAAE,EAAE;IAC3B,MAAM,IAAIC,KAAK,CAAC,iDAAiDH,SAAS,CAACE,MAAM,EAAE,CAAC;;EAEtF,MAAME,KAAK,GAAG,IAAIC,eAAM,CAACL,SAAS,CAAC,CAACM,MAAM,EAAE;EAC5C,MAAMC,KAAK,GAAG,IAAIF,kBAAS,CAACD,KAAK,CAAC,CAACE,MAAM,EAAE;EAC3C,OAAOR,iBAAM,CAACU,MAAM,CAACP,MAAM,EAAEM,KAAK,CAAC;AACrC;AAPAE;AASA;AACA;AACA,SAAgBC,eAAe,CAACC,MAAc,EAAEV,MAAc;EAC5D,MAAMW,WAAW,GAAGf,UAAU,CAACc,MAAM,CAACE,KAAK,CAAC;EAC5C,QAAQF,MAAM,CAACG,IAAI;IACjB,KAAKC,kBAAU,CAACC,SAAS;MAAE;QACzB,OAAOjB,2BAA2B,CAACa,WAAW,EAAEX,MAAM,CAAC;;IAEzD,KAAKc,kBAAU,CAACE,OAAO;MAAE;QACvB,IAAIL,WAAW,CAACV,MAAM,KAAK,EAAE,EAAE;UAC7B,MAAM,IAAIC,KAAK,CAAC,kCAAkCS,WAAW,CAACV,MAAM,EAAE,CAAC;;QAEzE,MAAMgB,IAAI,GAAG,IAAIb,eAAM,CAACO,WAAW,CAAC,CAACN,MAAM,EAAE;QAC7C,OAAOR,iBAAM,CAACU,MAAM,CAACP,MAAM,EAAEiB,IAAI,CAACC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;;IAEjD,KAAKJ,kBAAU,CAACK,OAAO;MAAE;QACvB,IAAIR,WAAW,CAACV,MAAM,KAAK,EAAE,EAAE;UAC7B,MAAM,IAAIC,KAAK,CAAC,kCAAkCS,WAAW,CAACV,MAAM,EAAE,CAAC;;QAEzE,MAAMgB,IAAI,GAAG,IAAIb,eAAM,CAACO,WAAW,CAAC,CAACN,MAAM,EAAE;QAC7C,OAAOR,iBAAM,CAACU,MAAM,CAACP,MAAM,EAAEiB,IAAI,CAACC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;;IAEjD;MACE,MAAM,IAAIhB,KAAK,CAAC,mCAAmC,CAAC;EAAC;AAE3D;AAvBAM","names":["fromBase64","encoding_1","rawSecp256k1PubkeyToAddress","pubkeyRaw","prefix","length","Error","hash1","crypto_1","digest","hash2","encode","exports","pubkeyToAddress","pubkey","pubkeyBytes","value","type","types_1","secp256k1","ed25519","hash","slice","sr25519"],"sources":["../src/address.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}