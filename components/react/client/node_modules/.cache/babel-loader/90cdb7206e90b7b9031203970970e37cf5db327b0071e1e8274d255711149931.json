{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setupTxExtension = void 0;\nconst proto_signing_1 = require(\"@cosmjs/proto-signing\");\nconst signing_1 = require(\"cosmjs-types/cosmos/tx/signing/v1beta1/signing\");\nconst service_1 = require(\"cosmjs-types/cosmos/tx/v1beta1/service\");\nconst tx_1 = require(\"cosmjs-types/cosmos/tx/v1beta1/tx\");\nconst long_1 = __importDefault(require(\"long\"));\nconst queryclient_1 = require(\"../../queryclient\");\nfunction setupTxExtension(base) {\n  // Use this service to get easy typed access to query methods\n  // This cannot be used for proof verification\n  const rpc = (0, queryclient_1.createProtobufRpcClient)(base);\n  const queryService = new service_1.ServiceClientImpl(rpc);\n  return {\n    tx: {\n      getTx: async txId => {\n        const request = {\n          hash: txId\n        };\n        const response = await queryService.GetTx(request);\n        return response;\n      },\n      simulate: async (messages, memo, signer, sequence) => {\n        const tx = tx_1.Tx.fromPartial({\n          authInfo: tx_1.AuthInfo.fromPartial({\n            fee: tx_1.Fee.fromPartial({}),\n            signerInfos: [{\n              publicKey: (0, proto_signing_1.encodePubkey)(signer),\n              sequence: long_1.default.fromNumber(sequence, true),\n              modeInfo: {\n                single: {\n                  mode: signing_1.SignMode.SIGN_MODE_UNSPECIFIED\n                }\n              }\n            }]\n          }),\n          body: tx_1.TxBody.fromPartial({\n            messages: Array.from(messages),\n            memo: memo\n          }),\n          signatures: [new Uint8Array()]\n        });\n        const request = service_1.SimulateRequest.fromPartial({\n          txBytes: tx_1.Tx.encode(tx).finish()\n        });\n        const response = await queryService.Simulate(request);\n        return response;\n      }\n    }\n  };\n}\nexports.setupTxExtension = setupTxExtension;","map":{"version":3,"mappings":";;;;;;;;;;;AACA;AACA;AACA;AAOA;AAEA;AAEA;AAiBA,SAAgBA,gBAAgB,CAACC,IAAiB;EAChD;EACA;EACA,MAAMC,GAAG,GAAG,yCAAuB,EAACD,IAAI,CAAC;EACzC,MAAME,YAAY,GAAG,IAAIC,2BAAiB,CAACF,GAAG,CAAC;EAE/C,OAAO;IACLG,EAAE,EAAE;MACFC,KAAK,EAAE,MAAOC,IAAY,IAAI;QAC5B,MAAMC,OAAO,GAAiB;UAC5BC,IAAI,EAAEF;SACP;QACD,MAAMG,QAAQ,GAAG,MAAMP,YAAY,CAACQ,KAAK,CAACH,OAAO,CAAC;QAClD,OAAOE,QAAQ;MACjB,CAAC;MACDE,QAAQ,EAAE,OACRC,QAAwB,EACxBC,IAAwB,EACxBC,MAAc,EACdC,QAAgB,KACd;QACF,MAAMX,EAAE,GAAGY,OAAE,CAACC,WAAW,CAAC;UACxBC,QAAQ,EAAEF,aAAQ,CAACC,WAAW,CAAC;YAC7BE,GAAG,EAAEH,QAAG,CAACC,WAAW,CAAC,EAAE,CAAC;YACxBG,WAAW,EAAE,CACX;cACEC,SAAS,EAAE,gCAAY,EAACP,MAAM,CAAC;cAC/BC,QAAQ,EAAEO,cAAI,CAACC,UAAU,CAACR,QAAQ,EAAE,IAAI,CAAC;cACzCS,QAAQ,EAAE;gBAAEC,MAAM,EAAE;kBAAEC,IAAI,EAAEC,kBAAQ,CAACC;gBAAqB;cAAE;aAC7D;WAEJ,CAAC;UACFC,IAAI,EAAEb,WAAM,CAACC,WAAW,CAAC;YACvBL,QAAQ,EAAEkB,KAAK,CAACC,IAAI,CAACnB,QAAQ,CAAC;YAC9BC,IAAI,EAAEA;WACP,CAAC;UACFmB,UAAU,EAAE,CAAC,IAAIC,UAAU,EAAE;SAC9B,CAAC;QACF,MAAM1B,OAAO,GAAGJ,yBAAe,CAACc,WAAW,CAAC;UAC1CiB,OAAO,EAAElB,OAAE,CAACmB,MAAM,CAAC/B,EAAE,CAAC,CAACgC,MAAM;SAC9B,CAAC;QACF,MAAM3B,QAAQ,GAAG,MAAMP,YAAY,CAACmC,QAAQ,CAAC9B,OAAO,CAAC;QACrD,OAAOE,QAAQ;MACjB;;GAEH;AACH;AA9CA6B","names":["setupTxExtension","base","rpc","queryService","service_1","tx","getTx","txId","request","hash","response","GetTx","simulate","messages","memo","signer","sequence","tx_1","fromPartial","authInfo","fee","signerInfos","publicKey","long_1","fromNumber","modeInfo","single","mode","signing_1","SIGN_MODE_UNSPECIFIED","body","Array","from","signatures","Uint8Array","txBytes","encode","finish","Simulate","exports"],"sources":["../../../src/modules/tx/queries.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}