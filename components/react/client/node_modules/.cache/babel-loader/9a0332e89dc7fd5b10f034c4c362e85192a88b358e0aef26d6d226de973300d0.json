{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ObservableQueryIBCClientState = exports.ObservableChainQueryClientState = void 0;\nconst chain_query_1 = require(\"../../chain-query\");\nconst mobx_1 = require(\"mobx\");\nclass ObservableChainQueryClientState extends chain_query_1.ObservableChainQuery {\n  constructor(kvStore, chainId, chainGetter, portId, channelId) {\n    super(kvStore, chainId, chainGetter, `/ibc/core/channel/v1beta1/channels/${channelId}/ports/${portId}/client_state`);\n    this.portId = portId;\n    this.channelId = channelId;\n  }\n  onStart() {\n    super.onStart();\n    return new Promise(resolve => {\n      this.disposer = mobx_1.autorun(() => {\n        const chainInfo = this.chainGetter.getChain(this.chainId);\n        if (chainInfo.features && chainInfo.features.includes(\"ibc-go\")) {\n          this.setUrl(`/ibc/core/channel/v1/channels/${this.channelId}/ports/${this.portId}/client_state`);\n        }\n        resolve();\n      });\n    });\n  }\n  onStop() {\n    if (this.disposer) {\n      this.disposer();\n      this.disposer = undefined;\n    }\n    super.onStop();\n  }\n  /**\n   * clientChainId returns the chain id of the client state if the client state's type is known (currently, only tendermint is supported).\n   */\n  get clientChainId() {\n    var _a, _b;\n    if (!this.response) {\n      return undefined;\n    }\n    return (_b = (_a = this.response.data.identified_client_state) === null || _a === void 0 ? void 0 : _a.client_state) === null || _b === void 0 ? void 0 : _b.chain_id;\n  }\n}\n__decorate([mobx_1.computed], ObservableChainQueryClientState.prototype, \"clientChainId\", null);\nexports.ObservableChainQueryClientState = ObservableChainQueryClientState;\nclass ObservableQueryIBCClientState extends chain_query_1.ObservableChainQueryMap {\n  constructor(kvStore, chainId, chainGetter) {\n    super(kvStore, chainId, chainGetter, key => {\n      const params = JSON.parse(key);\n      return new ObservableChainQueryClientState(this.kvStore, this.chainId, this.chainGetter, params.portId, params.channelId);\n    });\n    this.kvStore = kvStore;\n    this.chainId = chainId;\n    this.chainGetter = chainGetter;\n  }\n  getClientStateOnTransferPort(channelId) {\n    return this.getClientState(\"transfer\", channelId);\n  }\n  getClientState(portId, channelId) {\n    // Use key as the JSON encoded Object.\n    const key = JSON.stringify({\n      portId,\n      channelId\n    });\n    return this.get(key);\n  }\n}\nexports.ObservableQueryIBCClientState = ObservableQueryIBCClientState;","map":{"version":3,"mappings":";;;;;;;;;;;;;AACA;AAMA;AAEA,MAAaA,+BAAgC,SAAQC,kCAAyC;EAG5FC,YACEC,OAAgB,EAChBC,OAAe,EACfC,WAAwB,EACLC,MAAc,EACdC,SAAiB;IAEpC,KAAK,CACHJ,OAAO,EACPC,OAAO,EACPC,WAAW,EACX,sCAAsCE,SAAS,UAAUD,MAAM,eAAe,CAC/E;IARkB,WAAM,GAANA,MAAM;IACN,cAAS,GAATC,SAAS;EAQ9B;EAEUC,OAAO;IACf,KAAK,CAACA,OAAO,EAAE;IAEf,OAAO,IAAIC,OAAO,CAAQC,OAAO,IAAI;MACnC,IAAI,CAACC,QAAQ,GAAGC,cAAO,CAAC,MAAK;QAC3B,MAAMC,SAAS,GAAG,IAAI,CAACR,WAAW,CAACS,QAAQ,CAAC,IAAI,CAACV,OAAO,CAAC;QACzD,IAAIS,SAAS,CAACE,QAAQ,IAAIF,SAAS,CAACE,QAAQ,CAACC,QAAQ,CAAC,QAAQ,CAAC,EAAE;UAC/D,IAAI,CAACC,MAAM,CACT,iCAAiC,IAAI,CAACV,SAAS,UAAU,IAAI,CAACD,MAAM,eAAe,CACpF;;QAEHI,OAAO,EAAE;MACX,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEUQ,MAAM;IACd,IAAI,IAAI,CAACP,QAAQ,EAAE;MACjB,IAAI,CAACA,QAAQ,EAAE;MACf,IAAI,CAACA,QAAQ,GAAGQ,SAAS;;IAE3B,KAAK,CAACD,MAAM,EAAE;EAChB;EAEA;;;EAIA,IAAIE,aAAa;;IACf,IAAI,CAAC,IAAI,CAACC,QAAQ,EAAE;MAClB,OAAOF,SAAS;;IAGlB,OAAO,gBAAI,CAACE,QAAQ,CAACC,IAAI,CAACC,uBAAuB,0CAAEC,YAAY,0CAC3DC,QAA8B;EACpC;;AAPAC,YADCd,eAAQ,oEAQR;AArDHe;AAwDA,MAAaC,6BAA8B,SAAQ3B,qCAA4C;EAC7FC,YACqBC,OAAgB,EAChBC,OAAe,EACfC,WAAwB;IAE3C,KAAK,CAACF,OAAO,EAAEC,OAAO,EAAEC,WAAW,EAAGwB,GAAW,IAAI;MACnD,MAAMC,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACH,GAAG,CAAC;MAE9B,OAAO,IAAI7B,+BAA+B,CACxC,IAAI,CAACG,OAAO,EACZ,IAAI,CAACC,OAAO,EACZ,IAAI,CAACC,WAAW,EAChByB,MAAM,CAACxB,MAAM,EACbwB,MAAM,CAACvB,SAAS,CACjB;IACH,CAAC,CAAC;IAdiB,YAAO,GAAPJ,OAAO;IACP,YAAO,GAAPC,OAAO;IACP,gBAAW,GAAXC,WAAW;EAahC;EAEA4B,4BAA4B,CAC1B1B,SAAiB;IAEjB,OAAO,IAAI,CAAC2B,cAAc,CAAC,UAAU,EAAE3B,SAAS,CAAC;EACnD;EAEA2B,cAAc,CACZ5B,MAAc,EACdC,SAAiB;IAEjB;IACA,MAAMsB,GAAG,GAAGE,IAAI,CAACI,SAAS,CAAC;MACzB7B,MAAM;MACNC;KACD,CAAC;IAEF,OAAO,IAAI,CAAC6B,GAAG,CAACP,GAAG,CAAoC;EACzD;;AApCFF","names":["ObservableChainQueryClientState","chain_query_1","constructor","kvStore","chainId","chainGetter","portId","channelId","onStart","Promise","resolve","disposer","mobx_1","chainInfo","getChain","features","includes","setUrl","onStop","undefined","clientChainId","response","data","identified_client_state","client_state","chain_id","__decorate","exports","ObservableQueryIBCClientState","key","params","JSON","parse","getClientStateOnTransferPort","getClientState","stringify","get"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/@keplr-wallet/stores/src/query/cosmos/ibc/client-state.ts"],"sourcesContent":["import { KVStore } from \"@keplr-wallet/common\";\nimport {\n  ObservableChainQuery,\n  ObservableChainQueryMap,\n} from \"../../chain-query\";\nimport { ChainGetter } from \"../../../common\";\nimport { ClientStateResponse } from \"./types\";\nimport { autorun, computed } from \"mobx\";\n\nexport class ObservableChainQueryClientState extends ObservableChainQuery<ClientStateResponse> {\n  protected disposer?: () => void;\n\n  constructor(\n    kvStore: KVStore,\n    chainId: string,\n    chainGetter: ChainGetter,\n    protected readonly portId: string,\n    protected readonly channelId: string\n  ) {\n    super(\n      kvStore,\n      chainId,\n      chainGetter,\n      `/ibc/core/channel/v1beta1/channels/${channelId}/ports/${portId}/client_state`\n    );\n  }\n\n  protected onStart() {\n    super.onStart();\n\n    return new Promise<void>((resolve) => {\n      this.disposer = autorun(() => {\n        const chainInfo = this.chainGetter.getChain(this.chainId);\n        if (chainInfo.features && chainInfo.features.includes(\"ibc-go\")) {\n          this.setUrl(\n            `/ibc/core/channel/v1/channels/${this.channelId}/ports/${this.portId}/client_state`\n          );\n        }\n        resolve();\n      });\n    });\n  }\n\n  protected onStop() {\n    if (this.disposer) {\n      this.disposer();\n      this.disposer = undefined;\n    }\n    super.onStop();\n  }\n\n  /**\n   * clientChainId returns the chain id of the client state if the client state's type is known (currently, only tendermint is supported).\n   */\n  @computed\n  get clientChainId(): string | undefined {\n    if (!this.response) {\n      return undefined;\n    }\n\n    return this.response.data.identified_client_state?.client_state\n      ?.chain_id as string | undefined;\n  }\n}\n\nexport class ObservableQueryIBCClientState extends ObservableChainQueryMap<ClientStateResponse> {\n  constructor(\n    protected readonly kvStore: KVStore,\n    protected readonly chainId: string,\n    protected readonly chainGetter: ChainGetter\n  ) {\n    super(kvStore, chainId, chainGetter, (key: string) => {\n      const params = JSON.parse(key);\n\n      return new ObservableChainQueryClientState(\n        this.kvStore,\n        this.chainId,\n        this.chainGetter,\n        params.portId,\n        params.channelId\n      );\n    });\n  }\n\n  getClientStateOnTransferPort(\n    channelId: string\n  ): ObservableChainQueryClientState {\n    return this.getClientState(\"transfer\", channelId);\n  }\n\n  getClientState(\n    portId: string,\n    channelId: string\n  ): ObservableChainQueryClientState {\n    // Use key as the JSON encoded Object.\n    const key = JSON.stringify({\n      portId,\n      channelId,\n    });\n\n    return this.get(key) as ObservableChainQueryClientState;\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}