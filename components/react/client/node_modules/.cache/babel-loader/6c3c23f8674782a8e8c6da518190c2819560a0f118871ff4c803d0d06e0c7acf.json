{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ObservableQueryIBCChannel = exports.ObservableChainQueryIBCChannel = void 0;\nconst chain_query_1 = require(\"../../chain-query\");\nconst mobx_1 = require(\"mobx\");\nclass ObservableChainQueryIBCChannel extends chain_query_1.ObservableChainQuery {\n  constructor(kvStore, chainId, chainGetter, portId, channelId) {\n    super(kvStore, chainId, chainGetter, `/ibc/core/channel/v1beta1/channels/${channelId}/ports/${portId}`);\n    this.portId = portId;\n    this.channelId = channelId;\n  }\n  onStart() {\n    super.onStart();\n    return new Promise(resolve => {\n      this.disposer = mobx_1.autorun(() => {\n        const chainInfo = this.chainGetter.getChain(this.chainId);\n        if (chainInfo.features && chainInfo.features.includes(\"ibc-go\")) {\n          this.setUrl(`/ibc/core/channel/v1/channels/${this.channelId}/ports/${this.portId}`);\n        }\n        resolve();\n      });\n    });\n  }\n  onStop() {\n    if (this.disposer) {\n      this.disposer();\n      this.disposer = undefined;\n    }\n    super.onStop();\n  }\n}\nexports.ObservableChainQueryIBCChannel = ObservableChainQueryIBCChannel;\nclass ObservableQueryIBCChannel extends chain_query_1.ObservableChainQueryMap {\n  constructor(kvStore, chainId, chainGetter) {\n    super(kvStore, chainId, chainGetter, key => {\n      const params = JSON.parse(key);\n      return new ObservableChainQueryIBCChannel(this.kvStore, this.chainId, this.chainGetter, params.portId, params.channelId);\n    });\n    this.kvStore = kvStore;\n    this.chainId = chainId;\n    this.chainGetter = chainGetter;\n  }\n  getTransferChannel(channelId) {\n    return this.getChannel(\"transfer\", channelId);\n  }\n  getChannel(portId, channelId) {\n    // Use key as the JSON encoded Object.\n    const key = JSON.stringify({\n      portId,\n      channelId\n    });\n    return this.get(key);\n  }\n}\nexports.ObservableQueryIBCChannel = ObservableQueryIBCChannel;","map":{"version":3,"mappings":";;;;;;AACA;AAMA;AAEA,MAAaA,8BAA+B,SAAQC,kCAAqC;EAGvFC,YACEC,OAAgB,EAChBC,OAAe,EACfC,WAAwB,EACLC,MAAc,EACdC,SAAiB;IAEpC,KAAK,CACHJ,OAAO,EACPC,OAAO,EACPC,WAAW,EACX,sCAAsCE,SAAS,UAAUD,MAAM,EAAE,CAClE;IARkB,WAAM,GAANA,MAAM;IACN,cAAS,GAATC,SAAS;EAQ9B;EAEUC,OAAO;IACf,KAAK,CAACA,OAAO,EAAE;IAEf,OAAO,IAAIC,OAAO,CAAQC,OAAO,IAAI;MACnC,IAAI,CAACC,QAAQ,GAAGC,cAAO,CAAC,MAAK;QAC3B,MAAMC,SAAS,GAAG,IAAI,CAACR,WAAW,CAACS,QAAQ,CAAC,IAAI,CAACV,OAAO,CAAC;QACzD,IAAIS,SAAS,CAACE,QAAQ,IAAIF,SAAS,CAACE,QAAQ,CAACC,QAAQ,CAAC,QAAQ,CAAC,EAAE;UAC/D,IAAI,CAACC,MAAM,CACT,iCAAiC,IAAI,CAACV,SAAS,UAAU,IAAI,CAACD,MAAM,EAAE,CACvE;;QAEHI,OAAO,EAAE;MACX,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEUQ,MAAM;IACd,IAAI,IAAI,CAACP,QAAQ,EAAE;MACjB,IAAI,CAACA,QAAQ,EAAE;MACf,IAAI,CAACA,QAAQ,GAAGQ,SAAS;;IAE3B,KAAK,CAACD,MAAM,EAAE;EAChB;;AAxCFE;AA2CA,MAAaC,yBAA0B,SAAQpB,qCAAwC;EACrFC,YACqBC,OAAgB,EAChBC,OAAe,EACfC,WAAwB;IAE3C,KAAK,CAACF,OAAO,EAAEC,OAAO,EAAEC,WAAW,EAAGiB,GAAW,IAAI;MACnD,MAAMC,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACH,GAAG,CAAC;MAE9B,OAAO,IAAItB,8BAA8B,CACvC,IAAI,CAACG,OAAO,EACZ,IAAI,CAACC,OAAO,EACZ,IAAI,CAACC,WAAW,EAChBkB,MAAM,CAACjB,MAAM,EACbiB,MAAM,CAAChB,SAAS,CACjB;IACH,CAAC,CAAC;IAdiB,YAAO,GAAPJ,OAAO;IACP,YAAO,GAAPC,OAAO;IACP,gBAAW,GAAXC,WAAW;EAahC;EAEAqB,kBAAkB,CAACnB,SAAiB;IAClC,OAAO,IAAI,CAACoB,UAAU,CAAC,UAAU,EAAEpB,SAAS,CAAC;EAC/C;EAEAoB,UAAU,CACRrB,MAAc,EACdC,SAAiB;IAEjB;IACA,MAAMe,GAAG,GAAGE,IAAI,CAACI,SAAS,CAAC;MACzBtB,MAAM;MACNC;KACD,CAAC;IAEF,OAAO,IAAI,CAACsB,GAAG,CAACP,GAAG,CAAC;EACtB;;AAlCFF","names":["ObservableChainQueryIBCChannel","chain_query_1","constructor","kvStore","chainId","chainGetter","portId","channelId","onStart","Promise","resolve","disposer","mobx_1","chainInfo","getChain","features","includes","setUrl","onStop","undefined","exports","ObservableQueryIBCChannel","key","params","JSON","parse","getTransferChannel","getChannel","stringify","get"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/@keplr-wallet/stores/src/query/cosmos/ibc/channel.ts"],"sourcesContent":["import { KVStore } from \"@keplr-wallet/common\";\nimport {\n  ObservableChainQuery,\n  ObservableChainQueryMap,\n} from \"../../chain-query\";\nimport { ChainGetter } from \"../../../common\";\nimport { ChannelResponse } from \"./types\";\nimport { autorun } from \"mobx\";\n\nexport class ObservableChainQueryIBCChannel extends ObservableChainQuery<ChannelResponse> {\n  protected disposer?: () => void;\n\n  constructor(\n    kvStore: KVStore,\n    chainId: string,\n    chainGetter: ChainGetter,\n    protected readonly portId: string,\n    protected readonly channelId: string\n  ) {\n    super(\n      kvStore,\n      chainId,\n      chainGetter,\n      `/ibc/core/channel/v1beta1/channels/${channelId}/ports/${portId}`\n    );\n  }\n\n  protected onStart() {\n    super.onStart();\n\n    return new Promise<void>((resolve) => {\n      this.disposer = autorun(() => {\n        const chainInfo = this.chainGetter.getChain(this.chainId);\n        if (chainInfo.features && chainInfo.features.includes(\"ibc-go\")) {\n          this.setUrl(\n            `/ibc/core/channel/v1/channels/${this.channelId}/ports/${this.portId}`\n          );\n        }\n        resolve();\n      });\n    });\n  }\n\n  protected onStop() {\n    if (this.disposer) {\n      this.disposer();\n      this.disposer = undefined;\n    }\n    super.onStop();\n  }\n}\n\nexport class ObservableQueryIBCChannel extends ObservableChainQueryMap<ChannelResponse> {\n  constructor(\n    protected readonly kvStore: KVStore,\n    protected readonly chainId: string,\n    protected readonly chainGetter: ChainGetter\n  ) {\n    super(kvStore, chainId, chainGetter, (key: string) => {\n      const params = JSON.parse(key);\n\n      return new ObservableChainQueryIBCChannel(\n        this.kvStore,\n        this.chainId,\n        this.chainGetter,\n        params.portId,\n        params.channelId\n      );\n    });\n  }\n\n  getTransferChannel(channelId: string) {\n    return this.getChannel(\"transfer\", channelId);\n  }\n\n  getChannel(\n    portId: string,\n    channelId: string\n  ): ObservableChainQuery<ChannelResponse> {\n    // Use key as the JSON encoded Object.\n    const key = JSON.stringify({\n      portId,\n      channelId,\n    });\n\n    return this.get(key);\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}