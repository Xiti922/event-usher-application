{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/* tslint:disable:no-bitwise */\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst uint64MaxValue = new bn_js_1.default(\"18446744073709551615\", 10, \"be\");\nclass Uint32 {\n  constructor(input) {\n    if (Number.isNaN(input)) {\n      throw new Error(\"Input is not a number\");\n    }\n    if (!Number.isInteger(input)) {\n      throw new Error(\"Input is not an integer\");\n    }\n    if (input < 0 || input > 4294967295) {\n      throw new Error(\"Input not in uint32 range: \" + input.toString());\n    }\n    this.data = input;\n  }\n  static fromBigEndianBytes(bytes) {\n    if (bytes.length !== 4) {\n      throw new Error(\"Invalid input length. Expected 4 bytes.\");\n    }\n    // tslint:disable-next-line:prefer-for-of\n    for (let i = 0; i < bytes.length; ++i) {\n      if (!Number.isInteger(bytes[i]) || bytes[i] > 255 || bytes[i] < 0) {\n        throw new Error(\"Invalid value in byte. Found: \" + bytes[i]);\n      }\n    }\n    // Use mulitiplication instead of shifting since bitwise operators are defined\n    // on SIGNED int32 in JavaScript and we don't want to risk surprises\n    return new Uint32(bytes[0] * 2 ** 24 + bytes[1] * 2 ** 16 + bytes[2] * 2 ** 8 + bytes[3]);\n  }\n  toBytesBigEndian() {\n    // Use division instead of shifting since bitwise operators are defined\n    // on SIGNED int32 in JavaScript and we don't want to risk surprises\n    return new Uint8Array([Math.floor(this.data / 2 ** 24) & 0xff, Math.floor(this.data / 2 ** 16) & 0xff, Math.floor(this.data / 2 ** 8) & 0xff, Math.floor(this.data / 2 ** 0) & 0xff]);\n  }\n  toBytesLittleEndian() {\n    // Use division instead of shifting since bitwise operators are defined\n    // on SIGNED int32 in JavaScript and we don't want to risk surprises\n    return new Uint8Array([Math.floor(this.data / 2 ** 0) & 0xff, Math.floor(this.data / 2 ** 8) & 0xff, Math.floor(this.data / 2 ** 16) & 0xff, Math.floor(this.data / 2 ** 24) & 0xff]);\n  }\n  toNumber() {\n    return this.data;\n  }\n  toString() {\n    return this.data.toString();\n  }\n}\nexports.Uint32 = Uint32;\nclass Int53 {\n  constructor(input) {\n    if (Number.isNaN(input)) {\n      throw new Error(\"Input is not a number\");\n    }\n    if (!Number.isInteger(input)) {\n      throw new Error(\"Input is not an integer\");\n    }\n    if (input < Number.MIN_SAFE_INTEGER || input > Number.MAX_SAFE_INTEGER) {\n      throw new Error(\"Input not in int53 range: \" + input.toString());\n    }\n    this.data = input;\n  }\n  static fromString(str) {\n    if (!str.match(/^-?[0-9]+$/)) {\n      throw new Error(\"Invalid string format\");\n    }\n    return new Int53(Number.parseInt(str, 10));\n  }\n  toNumber() {\n    return this.data;\n  }\n  toString() {\n    return this.data.toString();\n  }\n}\nexports.Int53 = Int53;\nclass Uint53 {\n  constructor(input) {\n    const signed = new Int53(input);\n    if (signed.toNumber() < 0) {\n      throw new Error(\"Input is negative\");\n    }\n    this.data = signed;\n  }\n  static fromString(str) {\n    const signed = Int53.fromString(str);\n    return new Uint53(signed.toNumber());\n  }\n  toNumber() {\n    return this.data.toNumber();\n  }\n  toString() {\n    return this.data.toString();\n  }\n}\nexports.Uint53 = Uint53;\nclass Uint64 {\n  constructor(data) {\n    if (data.isNeg()) {\n      throw new Error(\"Input is negative\");\n    }\n    if (data.gt(uint64MaxValue)) {\n      throw new Error(\"Input exceeds uint64 range\");\n    }\n    this.data = data;\n  }\n  static fromBytesBigEndian(bytes) {\n    if (bytes.length !== 8) {\n      throw new Error(\"Invalid input length. Expected 8 bytes.\");\n    }\n    // tslint:disable-next-line:prefer-for-of\n    for (let i = 0; i < bytes.length; ++i) {\n      if (!Number.isInteger(bytes[i]) || bytes[i] > 255 || bytes[i] < 0) {\n        throw new Error(\"Invalid value in byte. Found: \" + bytes[i]);\n      }\n    }\n    // tslint:disable-next-line:readonly-array\n    const asArray = [];\n    // tslint:disable-next-line:prefer-for-of\n    for (let i = 0; i < bytes.length; ++i) {\n      asArray.push(bytes[i]);\n    }\n    return new Uint64(new bn_js_1.default([...asArray]));\n  }\n  static fromString(str) {\n    if (!str.match(/^[0-9]+$/)) {\n      throw new Error(\"Invalid string format\");\n    }\n    return new Uint64(new bn_js_1.default(str, 10, \"be\"));\n  }\n  static fromNumber(input) {\n    if (Number.isNaN(input)) {\n      throw new Error(\"Input is not a number\");\n    }\n    let bigint;\n    try {\n      bigint = new bn_js_1.default(input);\n    } catch (_a) {\n      throw new Error(\"Input is not a safe integer\");\n    }\n    return new Uint64(bigint);\n  }\n  toBytesBigEndian() {\n    return Uint8Array.from(this.data.toArray(\"be\", 8));\n  }\n  toBytesLittleEndian() {\n    return Uint8Array.from(this.data.toArray(\"le\", 8));\n  }\n  toString() {\n    return this.data.toString(10);\n  }\n  toNumber() {\n    return this.data.toNumber();\n  }\n}\nexports.Uint64 = Uint64;","map":{"version":3,"mappings":"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","names":["uint64MaxValue","bn_js_1","Uint32","constructor","input","Number","isNaN","Error","isInteger","toString","data","fromBigEndianBytes","bytes","length","i","toBytesBigEndian","Uint8Array","Math","floor","toBytesLittleEndian","toNumber","exports","Int53","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","fromString","str","match","parseInt","Uint53","signed","Uint64","isNeg","gt","fromBytesBigEndian","asArray","push","fromNumber","bigint","from","toArray"],"sources":["../src/integers.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}