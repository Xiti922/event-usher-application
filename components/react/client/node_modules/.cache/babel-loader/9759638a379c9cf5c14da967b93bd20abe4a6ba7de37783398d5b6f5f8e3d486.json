{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.smallIntToApi = exports.apiToBigInt = exports.apiToSmallInt = void 0;\nconst math_1 = require(\"@cosmjs/math\");\nconst encodings_1 = require(\"./tendermint34/encodings\");\n/**\n * Takes an integer value from the Tendermint RPC API and\n * returns it as number.\n *\n * Only works within the safe integer range.\n */\nfunction apiToSmallInt(input) {\n  const asInt = typeof input === \"number\" ? new math_1.Int53(input) : math_1.Int53.fromString(input);\n  return asInt.toNumber();\n}\nexports.apiToSmallInt = apiToSmallInt;\n/**\n * Takes an integer value from the Tendermint RPC API and\n * returns it as BigInt.\n *\n * This supports the full uint64 and int64 ranges.\n */\nfunction apiToBigInt(input) {\n  (0, encodings_1.assertString)(input); // Runtime check on top of TypeScript just to be safe for semi-trusted API types\n  if (!input.match(/^-?[0-9]+$/)) {\n    throw new Error(\"Invalid string format\");\n  }\n  return BigInt(input);\n}\nexports.apiToBigInt = apiToBigInt;\n/**\n * Takes an integer in the safe integer range and returns\n * a string representation to be used in the Tendermint RPC API.\n */\nfunction smallIntToApi(num) {\n  return new math_1.Int53(num).toString();\n}\nexports.smallIntToApi = smallIntToApi;","map":{"version":3,"mappings":";;;;;;AAAA;AAEA;AAEA;;;;;;AAMA,SAAgBA,aAAa,CAACC,KAAsB;EAClD,MAAMC,KAAK,GAAG,OAAOD,KAAK,KAAK,QAAQ,GAAG,IAAIE,YAAK,CAACF,KAAK,CAAC,GAAGE,YAAK,CAACC,UAAU,CAACH,KAAK,CAAC;EACpF,OAAOC,KAAK,CAACG,QAAQ,EAAE;AACzB;AAHAC;AAKA;;;;;;AAMA,SAAgBC,WAAW,CAACN,KAAa;EACvC,4BAAY,EAACA,KAAK,CAAC,CAAC,CAAC;EACrB,IAAI,CAACA,KAAK,CAACO,KAAK,CAAC,YAAY,CAAC,EAAE;IAC9B,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;;EAE1C,OAAOC,MAAM,CAACT,KAAK,CAAC;AACtB;AANAK;AAQA;;;;AAIA,SAAgBK,aAAa,CAACC,GAAW;EACvC,OAAO,IAAIT,YAAK,CAACS,GAAG,CAAC,CAACC,QAAQ,EAAE;AAClC;AAFAP","names":["apiToSmallInt","input","asInt","math_1","fromString","toNumber","exports","apiToBigInt","match","Error","BigInt","smallIntToApi","num","toString"],"sources":["../src/inthelpers.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}