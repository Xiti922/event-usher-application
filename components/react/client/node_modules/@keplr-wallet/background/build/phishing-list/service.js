"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PhishingListService = void 0;
const axios_1 = __importDefault(require("axios"));
const utils_1 = require("./utils");
class PhishingListService {
    constructor(opts) {
        this.opts = opts;
        this.map = new Map();
        this._hasInited = false;
        this._hasStopped = false;
    }
    get hasInited() {
        return this._hasInited;
    }
    init() {
        this.startFetchPhishingList();
    }
    stop() {
        if (this.timeoutId != null) {
            clearTimeout(this.timeoutId);
            this.timeoutId = undefined;
        }
        this._hasStopped = true;
    }
    startFetchPhishingList() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.timeoutId != null) {
                clearTimeout(this.timeoutId);
                this.timeoutId = undefined;
            }
            if (this._hasStopped) {
                return;
            }
            let failed = false;
            try {
                const res = yield axios_1.default.get(this.opts.blockListUrl);
                const domains = res.data
                    .split(/(\r?\n)|,|;|\s|\t/)
                    .filter((str) => str != null)
                    .map((str) => {
                    return str.trim();
                })
                    .filter((str) => str.length > 0);
                const map = new Map();
                for (const domain of domains) {
                    try {
                        map.set(utils_1.parseDomainUntilSecondLevel(domain), true);
                    }
                    catch (e) {
                        console.log(e);
                    }
                }
                this._hasInited = true;
                this.map = map;
            }
            catch (e) {
                failed = true;
                console.log(e);
            }
            if (!this._hasStopped) {
                this.timeoutId = setTimeout(() => {
                    this.startFetchPhishingList();
                }, failed ? this.opts.retryIntervalMs : this.opts.fetchingIntervalMs);
            }
        });
    }
    checkURLIsPhishing(url) {
        const parsed = new URL(url);
        return this.map.get(utils_1.parseDomainUntilSecondLevel(parsed.origin)) === true;
    }
}
exports.PhishingListService = PhishingListService;
//# sourceMappingURL=service.js.map