{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MessageRegistry = void 0;\nclass MessageRegistry {\n  constructor() {\n    this.registeredMsgType = new Map();\n  }\n  registerMessage(msgCls) {\n    if (this.registeredMsgType.has(msgCls.type())) {\n      throw new Error(`Already registered type ${msgCls.type()}`);\n    }\n    this.registeredMsgType.set(msgCls.type(), msgCls);\n  }\n  parseMessage(message) {\n    if (!message.type) {\n      throw new Error(\"Null type\");\n    }\n    const msgCls = this.registeredMsgType.get(message.type);\n    if (!msgCls) {\n      throw new Error(`Unregistered msg type ${message.type}`);\n    }\n    return Object.setPrototypeOf(message.msg, msgCls.prototype);\n  }\n}\nexports.MessageRegistry = MessageRegistry;","map":{"version":3,"mappings":";;;;;;AAEA,MAAaA,eAAe;EAA5BC;IACU,sBAAiB,GAGrB,IAAIC,GAAG,EAAE;EA0Bf;EAxBEC,eAAe,CACbC,MAAqE;IAErE,IAAI,IAAI,CAACC,iBAAiB,CAACC,GAAG,CAACF,MAAM,CAACG,IAAI,EAAE,CAAC,EAAE;MAC7C,MAAM,IAAIC,KAAK,CAAC,2BAA2BJ,MAAM,CAACG,IAAI,EAAE,EAAE,CAAC;;IAG7D,IAAI,CAACF,iBAAiB,CAACI,GAAG,CAACL,MAAM,CAACG,IAAI,EAAE,EAAEH,MAAM,CAAC;EACnD;EAEAM,YAAY,CAACC,OAAoC;IAC/C,IAAI,CAACA,OAAO,CAACJ,IAAI,EAAE;MACjB,MAAM,IAAIC,KAAK,CAAC,WAAW,CAAC;;IAG9B,MAAMJ,MAAM,GAAG,IAAI,CAACC,iBAAiB,CAACO,GAAG,CAACD,OAAO,CAACJ,IAAI,CAAC;IACvD,IAAI,CAACH,MAAM,EAAE;MACX,MAAM,IAAII,KAAK,CAAC,yBAAyBG,OAAO,CAACJ,IAAI,EAAE,CAAC;;IAE1D,OAAOM,MAAM,CAACC,cAAc,CAC1BH,OAAO,CAACI,GAAG,EACXX,MAAM,CAACY,SAAS,CACG;EACvB;;AA7BFC","names":["MessageRegistry","constructor","Map","registerMessage","msgCls","registeredMsgType","has","type","Error","set","parseMessage","message","get","Object","setPrototypeOf","msg","prototype","exports"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/@keplr-wallet/background/node_modules/@keplr-wallet/router/src/encoding/index.ts"],"sourcesContent":["import { Message } from \"../message\";\n\nexport class MessageRegistry {\n  private registeredMsgType: Map<\n    string,\n    { new (): Message<unknown> }\n  > = new Map();\n\n  registerMessage(\n    msgCls: { new (...args: any): Message<unknown> } & { type(): string }\n  ): void {\n    if (this.registeredMsgType.has(msgCls.type())) {\n      throw new Error(`Already registered type ${msgCls.type()}`);\n    }\n\n    this.registeredMsgType.set(msgCls.type(), msgCls);\n  }\n\n  parseMessage(message: { type?: string; msg: any }): Message<unknown> {\n    if (!message.type) {\n      throw new Error(\"Null type\");\n    }\n\n    const msgCls = this.registeredMsgType.get(message.type);\n    if (!msgCls) {\n      throw new Error(`Unregistered msg type ${message.type}`);\n    }\n    return Object.setPrototypeOf(\n      message.msg,\n      msgCls.prototype\n    ) as Message<unknown>;\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}