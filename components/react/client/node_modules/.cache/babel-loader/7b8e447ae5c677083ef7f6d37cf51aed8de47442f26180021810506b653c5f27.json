{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HttpClient = exports.http = void 0;\nconst json_rpc_1 = require(\"@cosmjs/json-rpc\");\nconst axios_1 = __importDefault(require(\"axios\"));\nconst rpcclient_1 = require(\"./rpcclient\");\nfunction filterBadStatus(res) {\n  if (res.status >= 400) {\n    throw new Error(`Bad status on response: ${res.status}`);\n  }\n  return res;\n}\n/**\n * Helper to work around missing CORS support in Tendermint (https://github.com/tendermint/tendermint/pull/2800)\n *\n * For some reason, fetch does not complain about missing server-side CORS support.\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nasync function http(method, url, headers, request) {\n  if (typeof fetch !== \"undefined\") {\n    const settings = {\n      method: method,\n      body: request ? JSON.stringify(request) : undefined,\n      headers: {\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        \"Content-Type\": \"application/json\",\n        ...headers\n      }\n    };\n    return fetch(url, settings).then(filterBadStatus).then(res => res.json());\n  } else {\n    return axios_1.default.request({\n      url: url,\n      method: method,\n      data: request,\n      headers: headers\n    }).then(res => res.data);\n  }\n}\nexports.http = http;\nclass HttpClient {\n  constructor(endpoint) {\n    if (typeof endpoint === \"string\") {\n      // accept host.name:port and assume http protocol\n      this.url = (0, rpcclient_1.hasProtocol)(endpoint) ? endpoint : \"http://\" + endpoint;\n    } else {\n      this.url = endpoint.url;\n      this.headers = endpoint.headers;\n    }\n  }\n  disconnect() {\n    // nothing to be done\n  }\n  async execute(request) {\n    const response = (0, json_rpc_1.parseJsonRpcResponse)(await http(\"POST\", this.url, this.headers, request));\n    if ((0, json_rpc_1.isJsonRpcErrorResponse)(response)) {\n      throw new Error(JSON.stringify(response.error));\n    }\n    return response;\n  }\n}\nexports.HttpClient = HttpClient;","map":{"version":3,"mappings":";;;;;;;;;;;AAAA;AAMA;AAEA;AAMA,SAASA,eAAe,CAACC,GAAQ;EAC/B,IAAIA,GAAG,CAACC,MAAM,IAAI,GAAG,EAAE;IACrB,MAAM,IAAIC,KAAK,CAAC,2BAA2BF,GAAG,CAACC,MAAM,EAAE,CAAC;;EAE1D,OAAOD,GAAG;AACZ;AAEA;;;;;AAKA;AACO,eAAeG,IAAI,CACxBC,MAAc,EACdC,GAAW,EACXC,OAA2C,EAC3CC,OAAa;EAEb,IAAI,OAAOC,KAAK,KAAK,WAAW,EAAE;IAChC,MAAMC,QAAQ,GAAG;MACfL,MAAM,EAAEA,MAAM;MACdM,IAAI,EAAEH,OAAO,GAAGI,IAAI,CAACC,SAAS,CAACL,OAAO,CAAC,GAAGM,SAAS;MACnDP,OAAO,EAAE;QACP;QACA,cAAc,EAAE,kBAAkB;QAClC,GAAGA;;KAEN;IACD,OAAOE,KAAK,CAACH,GAAG,EAAEI,QAAQ,CAAC,CACxBK,IAAI,CAACf,eAAe,CAAC,CACrBe,IAAI,CAAEd,GAAQ,IAAKA,GAAG,CAACe,IAAI,EAAE,CAAC;GAClC,MAAM;IACL,OAAOC,eAAK,CACTT,OAAO,CAAC;MAAEF,GAAG,EAAEA,GAAG;MAAED,MAAM,EAAEA,MAAM;MAAEa,IAAI,EAAEV,OAAO;MAAED,OAAO,EAAEA;IAAO,CAAE,CAAC,CACtEQ,IAAI,CAAEd,GAAG,IAAKA,GAAG,CAACiB,IAAI,CAAC;;AAE9B;AAxBAC;AAwCA,MAAaC,UAAU;EAIrBC,YAAmBC,QAA+B;IAChD,IAAI,OAAOA,QAAQ,KAAK,QAAQ,EAAE;MAChC;MACA,IAAI,CAAChB,GAAG,GAAG,2BAAW,EAACgB,QAAQ,CAAC,GAAGA,QAAQ,GAAG,SAAS,GAAGA,QAAQ;KACnE,MAAM;MACL,IAAI,CAAChB,GAAG,GAAGgB,QAAQ,CAAChB,GAAG;MACvB,IAAI,CAACC,OAAO,GAAGe,QAAQ,CAACf,OAAO;;EAEnC;EAEOgB,UAAU;IACf;EAAA;EAGK,MAAMC,OAAO,CAAChB,OAAuB;IAC1C,MAAMiB,QAAQ,GAAG,mCAAoB,EAAC,MAAMrB,IAAI,CAAC,MAAM,EAAE,IAAI,CAACE,GAAG,EAAE,IAAI,CAACC,OAAO,EAAEC,OAAO,CAAC,CAAC;IAC1F,IAAI,qCAAsB,EAACiB,QAAQ,CAAC,EAAE;MACpC,MAAM,IAAItB,KAAK,CAACS,IAAI,CAACC,SAAS,CAACY,QAAQ,CAACC,KAAK,CAAC,CAAC;;IAEjD,OAAOD,QAAQ;EACjB;;AAxBFN","names":["filterBadStatus","res","status","Error","http","method","url","headers","request","fetch","settings","body","JSON","stringify","undefined","then","json","axios_1","data","exports","HttpClient","constructor","endpoint","disconnect","execute","response","error"],"sources":["../../src/rpcclients/httpclient.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}