{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Uint = exports.Int = void 0;\nconst big_integer_1 = __importDefault(require(\"big-integer\"));\nconst decimal_1 = require(\"./decimal\");\nconst etc_1 = require(\"./etc\");\nclass Int {\n  /**\n   * @param int - Parse a number | bigInteger | string into a bigInt.\n   */\n  constructor(int) {\n    if (typeof int === \"number\") {\n      int = int.toString();\n    }\n    if (typeof int === \"string\") {\n      if (!etc_1.isValidIntegerString(int)) {\n        if (etc_1.isExponentDecString(int)) {\n          int = etc_1.exponentDecStringToDecString(int);\n        } else {\n          throw new Error(`invalid integer: ${int}`);\n        }\n      }\n      this.int = big_integer_1.default(int);\n    } else if (typeof int === \"bigint\") {\n      this.int = big_integer_1.default(int);\n    } else {\n      this.int = big_integer_1.default(int);\n    }\n    this.checkBitLen();\n  }\n  checkBitLen() {\n    if (this.int.abs().gt(Int.maxInt)) {\n      throw new Error(`Integer out of range ${this.int.toString()}`);\n    }\n  }\n  toString() {\n    return this.int.toString(10);\n  }\n  isNegative() {\n    return this.int.isNegative();\n  }\n  isPositive() {\n    return this.int.isPositive();\n  }\n  isZero() {\n    return this.int.eq(big_integer_1.default(0));\n  }\n  equals(i) {\n    return this.int.equals(i.int);\n  }\n  gt(i) {\n    return this.int.gt(i.int);\n  }\n  gte(i) {\n    return this.int.greaterOrEquals(i.int);\n  }\n  lt(i) {\n    return this.int.lt(i.int);\n  }\n  lte(i) {\n    return this.int.lesserOrEquals(i.int);\n  }\n  abs() {\n    return new Int(this.int.abs());\n  }\n  absUInt() {\n    return new Uint(this.int.abs());\n  }\n  add(i) {\n    return new Int(this.int.add(i.int));\n  }\n  sub(i) {\n    return new Int(this.int.subtract(i.int));\n  }\n  mul(i) {\n    return new Int(this.int.multiply(i.int));\n  }\n  div(i) {\n    return new Int(this.int.divide(i.int));\n  }\n  mod(i) {\n    return new Int(this.int.mod(i.int));\n  }\n  neg() {\n    return new Int(this.int.negate());\n  }\n  pow(i) {\n    return new Int(this.int.pow(i.toBigNumber()));\n  }\n  toDec() {\n    return new decimal_1.Dec(this);\n  }\n  toBigNumber() {\n    return this.int;\n  }\n}\nexports.Int = Int;\n// (2 ** 256) - 1\nInt.maxInt = big_integer_1.default(\"115792089237316195423570985008687907853269984665640564039457584007913129639935\");\nclass Uint {\n  /**\n   * @param uint - Parse a number | bigInteger | string into a bigUint.\n   */\n  constructor(uint) {\n    if (typeof uint === \"number\") {\n      uint = uint.toString();\n    }\n    if (typeof uint === \"string\") {\n      if (!etc_1.isValidIntegerString(uint)) {\n        if (etc_1.isExponentDecString(uint)) {\n          uint = etc_1.exponentDecStringToDecString(uint);\n        } else {\n          throw new Error(`invalid integer: ${uint}`);\n        }\n      }\n      this.uint = big_integer_1.default(uint);\n    } else if (typeof uint === \"bigint\") {\n      this.uint = big_integer_1.default(uint);\n    } else {\n      this.uint = big_integer_1.default(uint);\n    }\n    if (this.uint.isNegative()) {\n      throw new TypeError(\"Uint should not be negative\");\n    }\n    this.checkBitLen();\n  }\n  checkBitLen() {\n    if (this.uint.abs().bitLength().gt(256)) {\n      throw new Error(`Integer out of range ${this.uint.toString()}`);\n    }\n  }\n  toString() {\n    return this.uint.toString(10);\n  }\n  isZero() {\n    return this.uint.eq(big_integer_1.default(0));\n  }\n  equals(i) {\n    return this.uint.equals(i.uint);\n  }\n  gt(i) {\n    return this.uint.gt(i.uint);\n  }\n  gte(i) {\n    return this.uint.greaterOrEquals(i.uint);\n  }\n  lt(i) {\n    return this.uint.lt(i.uint);\n  }\n  lte(i) {\n    return this.uint.lesserOrEquals(i.uint);\n  }\n  add(i) {\n    return new Uint(this.uint.add(i.uint));\n  }\n  sub(i) {\n    return new Uint(this.uint.subtract(i.uint));\n  }\n  mul(i) {\n    return new Uint(this.uint.multiply(i.uint));\n  }\n  div(i) {\n    return new Uint(this.uint.divide(i.uint));\n  }\n  mod(i) {\n    return new Uint(this.uint.mod(i.uint));\n  }\n  pow(i) {\n    return new Uint(this.uint.pow(i.toBigNumber()));\n  }\n  toDec() {\n    return new decimal_1.Dec(new Int(this.toString()));\n  }\n  toBigNumber() {\n    return this.uint;\n  }\n}\nexports.Uint = Uint;","map":{"version":3,"mappings":"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","names":["Int","constructor","int","toString","etc_1","Error","big_integer_1","checkBitLen","abs","gt","maxInt","isNegative","isPositive","isZero","eq","equals","i","gte","greaterOrEquals","lt","lte","lesserOrEquals","absUInt","Uint","add","sub","subtract","mul","multiply","div","divide","mod","neg","negate","pow","toBigNumber","toDec","decimal_1","exports","uint","TypeError","bitLength"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/@keplr-wallet/stores/node_modules/@keplr-wallet/unit/src/int.ts"],"sourcesContent":["import bigInteger from \"big-integer\";\nimport { Dec } from \"./decimal\";\nimport {\n  exponentDecStringToDecString,\n  isExponentDecString,\n  isValidIntegerString,\n} from \"./etc\";\n\nexport class Int {\n  // (2 ** 256) - 1\n  protected static maxInt = bigInteger(\n    \"115792089237316195423570985008687907853269984665640564039457584007913129639935\"\n  );\n\n  protected int: bigInteger.BigInteger;\n\n  /**\n   * @param int - Parse a number | bigInteger | string into a bigInt.\n   */\n  constructor(int: bigInteger.BigNumber) {\n    if (typeof int === \"number\") {\n      int = int.toString();\n    }\n\n    if (typeof int === \"string\") {\n      if (!isValidIntegerString(int)) {\n        if (isExponentDecString(int)) {\n          int = exponentDecStringToDecString(int);\n        } else {\n          throw new Error(`invalid integer: ${int}`);\n        }\n      }\n\n      this.int = bigInteger(int);\n    } else if (typeof int === \"bigint\") {\n      this.int = bigInteger(int);\n    } else {\n      this.int = bigInteger(int);\n    }\n\n    this.checkBitLen();\n  }\n\n  protected checkBitLen(): void {\n    if (this.int.abs().gt(Int.maxInt)) {\n      throw new Error(`Integer out of range ${this.int.toString()}`);\n    }\n  }\n\n  public toString(): string {\n    return this.int.toString(10);\n  }\n\n  public isNegative(): boolean {\n    return this.int.isNegative();\n  }\n\n  public isPositive(): boolean {\n    return this.int.isPositive();\n  }\n\n  public isZero(): boolean {\n    return this.int.eq(bigInteger(0));\n  }\n\n  public equals(i: Int): boolean {\n    return this.int.equals(i.int);\n  }\n\n  public gt(i: Int): boolean {\n    return this.int.gt(i.int);\n  }\n\n  public gte(i: Int): boolean {\n    return this.int.greaterOrEquals(i.int);\n  }\n\n  public lt(i: Int): boolean {\n    return this.int.lt(i.int);\n  }\n\n  public lte(i: Int): boolean {\n    return this.int.lesserOrEquals(i.int);\n  }\n\n  public abs(): Int {\n    return new Int(this.int.abs());\n  }\n\n  public absUInt(): Uint {\n    return new Uint(this.int.abs());\n  }\n\n  public add(i: Int): Int {\n    return new Int(this.int.add(i.int));\n  }\n\n  public sub(i: Int): Int {\n    return new Int(this.int.subtract(i.int));\n  }\n\n  public mul(i: Int): Int {\n    return new Int(this.int.multiply(i.int));\n  }\n\n  public div(i: Int): Int {\n    return new Int(this.int.divide(i.int));\n  }\n\n  public mod(i: Int): Int {\n    return new Int(this.int.mod(i.int));\n  }\n\n  public neg(): Int {\n    return new Int(this.int.negate());\n  }\n\n  public pow(i: Uint): Int {\n    return new Int(this.int.pow(i.toBigNumber()));\n  }\n\n  public toDec(): Dec {\n    return new Dec(this);\n  }\n\n  public toBigNumber(): bigInteger.BigInteger {\n    return this.int;\n  }\n}\n\nexport class Uint {\n  protected uint: bigInteger.BigInteger;\n\n  /**\n   * @param uint - Parse a number | bigInteger | string into a bigUint.\n   */\n  constructor(uint: bigInteger.BigNumber) {\n    if (typeof uint === \"number\") {\n      uint = uint.toString();\n    }\n\n    if (typeof uint === \"string\") {\n      if (!isValidIntegerString(uint)) {\n        if (isExponentDecString(uint)) {\n          uint = exponentDecStringToDecString(uint);\n        } else {\n          throw new Error(`invalid integer: ${uint}`);\n        }\n      }\n\n      this.uint = bigInteger(uint);\n    } else if (typeof uint === \"bigint\") {\n      this.uint = bigInteger(uint);\n    } else {\n      this.uint = bigInteger(uint);\n    }\n\n    if (this.uint.isNegative()) {\n      throw new TypeError(\"Uint should not be negative\");\n    }\n\n    this.checkBitLen();\n  }\n\n  protected checkBitLen(): void {\n    if (this.uint.abs().bitLength().gt(256)) {\n      throw new Error(`Integer out of range ${this.uint.toString()}`);\n    }\n  }\n\n  public toString(): string {\n    return this.uint.toString(10);\n  }\n\n  public isZero(): boolean {\n    return this.uint.eq(bigInteger(0));\n  }\n\n  public equals(i: Uint): boolean {\n    return this.uint.equals(i.uint);\n  }\n\n  public gt(i: Uint): boolean {\n    return this.uint.gt(i.uint);\n  }\n\n  public gte(i: Uint): boolean {\n    return this.uint.greaterOrEquals(i.uint);\n  }\n\n  public lt(i: Uint): boolean {\n    return this.uint.lt(i.uint);\n  }\n\n  public lte(i: Uint): boolean {\n    return this.uint.lesserOrEquals(i.uint);\n  }\n\n  public add(i: Uint): Uint {\n    return new Uint(this.uint.add(i.uint));\n  }\n\n  public sub(i: Uint): Uint {\n    return new Uint(this.uint.subtract(i.uint));\n  }\n\n  public mul(i: Uint): Uint {\n    return new Uint(this.uint.multiply(i.uint));\n  }\n\n  public div(i: Uint): Uint {\n    return new Uint(this.uint.divide(i.uint));\n  }\n\n  public mod(i: Uint): Uint {\n    return new Uint(this.uint.mod(i.uint));\n  }\n\n  public pow(i: Uint): Uint {\n    return new Uint(this.uint.pow(i.toBigNumber()));\n  }\n\n  public toDec(): Dec {\n    return new Dec(new Int(this.toString()));\n  }\n\n  public toBigNumber(): bigInteger.BigInteger {\n    return this.uint;\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}