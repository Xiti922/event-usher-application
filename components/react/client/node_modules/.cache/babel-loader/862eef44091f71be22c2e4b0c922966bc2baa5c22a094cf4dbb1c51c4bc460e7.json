{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.KeplrWalletConnectV1 = void 0;\nconst tslib_1 = require(\"tslib\");\nconst common_1 = require(\"@keplr-wallet/common\");\nconst provider_1 = require(\"@keplr-wallet/provider\");\nconst browser_utils_1 = require(\"@walletconnect/browser-utils\");\nconst utils_1 = require(\"@walletconnect/utils\");\nconst axios_1 = tslib_1.__importDefault(require(\"axios\"));\nconst buffer_1 = require(\"buffer\");\nconst deepmerge_1 = tslib_1.__importDefault(require(\"deepmerge\"));\n// VersionFormatRegExp checks if a chainID is in the format required for parsing versions\n// The chainID should be in the form: `{identifier}-{version}`\nconst ChainVersionFormatRegExp = /(.+)-([\\d]+)/;\nfunction parseChainId(chainId) {\n  const split = chainId.split(ChainVersionFormatRegExp).filter(Boolean);\n  if (split.length !== 2) {\n    return {\n      identifier: chainId,\n      version: 0\n    };\n  } else {\n    return {\n      identifier: split[0],\n      version: parseInt(split[1])\n    };\n  }\n}\nclass KeplrWalletConnectV1 {\n  constructor(connector, chainInfos) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var _a;\n    this.connector = connector;\n    this.chainInfos = chainInfos;\n    // When creating a new WalletConnect session, the user will be taken to\n    // Keplr Mobile via a deep link. The session is established immediately\n    // with no further interaction, and the next step is to enable the chain.\n    // Enabling the chain will prompt the user to approve the chain, which\n    // occurs in the background once the mobile app is opened. Then it will\n    // tell them to go back to the browser, and on returning to the browser,\n    // they will see a second deep link prompt, a result of the enable\n    // request that occurred in the background previously. When establishing\n    // a new WalletConnect session, let's make sure we don't prompt the user\n    // to open the app twice.\n    this.dontOpenAppOnEnable = false;\n    this.version = \"0.9.0\";\n    this.mode = \"walletconnect\";\n    this.defaultOptions = {};\n    this.onCallReqeust = (error, payload) => tslib_1.__awaiter(this, void 0, void 0, function* () {\n      if (error) {\n        console.log(error);\n        return;\n      }\n      if (!payload) {\n        return;\n      }\n      if (payload.method === \"keplr_keystore_may_changed_event_wallet_connect_v1\") {\n        const param = payload.params[0];\n        if (!param) {\n          return;\n        }\n        const lastSeenKeys = yield this.getAllLastSeenKey();\n        if (!lastSeenKeys) {\n          return;\n        }\n        const mayChangedKeyMap = {};\n        for (const mayChangedKey of param.keys) {\n          mayChangedKeyMap[mayChangedKey.chainIdentifier] = {\n            address: mayChangedKey.address,\n            algo: param.algo,\n            bech32Address: mayChangedKey.bech32Address,\n            isNanoLedger: param.isNanoLedger,\n            name: param.name,\n            pubKey: mayChangedKey.pubKey\n          };\n        }\n        let hasChanged = false;\n        for (const chainId of Object.keys(lastSeenKeys)) {\n          const savedKey = lastSeenKeys[chainId];\n          if (savedKey) {\n            const {\n              identifier\n            } = parseChainId(chainId);\n            const mayChangedKey = mayChangedKeyMap[identifier];\n            if (mayChangedKey) {\n              if (mayChangedKey.algo !== savedKey.algo || mayChangedKey.name !== savedKey.name || mayChangedKey.isNanoLedger !== savedKey.isNanoLedger || mayChangedKey.address !== savedKey.address || mayChangedKey.bech32Address !== savedKey.bech32Address || mayChangedKey.pubKey !== savedKey.pubKey) {\n                hasChanged = true;\n                lastSeenKeys[chainId] = mayChangedKey;\n              }\n            }\n          }\n        }\n        if (hasChanged) {\n          yield this.saveAllLastSeenKey(lastSeenKeys);\n          window.dispatchEvent(new Event(\"keplr_keystorechange\"));\n        }\n      }\n    });\n    this.kvStore = (_a = options.kvStore) !== null && _a !== void 0 ? _a : new common_1.IndexedDBKVStore(\"keplr_wallet_connect\");\n    this.onBeforeSendRequest = options.onBeforeSendRequest;\n    this.onAfterSendRequest = options.onAfterSendRequest;\n    connector.on(\"disconnect\", () => {\n      this.clearSaved();\n    });\n    connector.on(\"call_request\", this.onCallReqeust);\n  }\n  clearSaved() {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      yield Promise.all([this.kvStore.set(this.getKeyHasEnabled(), null), this.kvStore.set(this.getKeyLastSeenKey(), null)]);\n    });\n  }\n  sendCustomRequest(request, options) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      // If mobile, attempt to open app to approve request.\n      if ((0, browser_utils_1.isMobile)()) {\n        console.log(request);\n        switch (request.method) {\n          case \"keplr_enable_wallet_connect_v1\":\n            {\n              if (this.dontOpenAppOnEnable) break;\n              // Fall through to open the app.\n            }\n          // eslint-disable-next-line no-fallthrough\n          case \"keplr_sign_amino_wallet_connect_v1\":\n            // Prompt to open the app.\n            window.location.href = (0, browser_utils_1.isAndroid)() ? \"intent://wcV1#Intent;package=com.chainapsis.keplr;scheme=keplrwallet;end;\" : \"keplrwallet://wcV1\";\n        }\n      }\n      if (this.onBeforeSendRequest) {\n        yield this.onBeforeSendRequest(request, options);\n      }\n      const res = yield this.connector.sendCustomRequest(request, options);\n      if (this.onAfterSendRequest) {\n        yield this.onAfterSendRequest(res, request, options);\n      }\n      return res;\n    });\n  }\n  enable(chainIds) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      if (typeof chainIds === \"string\") {\n        chainIds = [chainIds];\n      }\n      const hasEnabledChainIds = yield this.getHasEnabledChainIds();\n      let allEnabled = true;\n      for (const chainId of chainIds) {\n        if (hasEnabledChainIds.indexOf(chainId) < 0) {\n          allEnabled = false;\n          break;\n        }\n      }\n      if (allEnabled) {\n        return;\n      }\n      yield this.sendCustomRequest({\n        id: (0, utils_1.payloadId)(),\n        jsonrpc: \"2.0\",\n        method: \"keplr_enable_wallet_connect_v1\",\n        params: chainIds\n      });\n      yield this.saveHasEnabledChainIds(chainIds);\n    });\n  }\n  getKeyHasEnabled() {\n    return `${this.connector.session.key}-enabled`;\n  }\n  getHasEnabledChainIds() {\n    var _a;\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      return (_a = yield this.kvStore.get(this.getKeyHasEnabled())) !== null && _a !== void 0 ? _a : [];\n    });\n  }\n  saveHasEnabledChainIds(chainIds) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const hasEnabledChainIds = yield this.getHasEnabledChainIds();\n      for (const chainId of chainIds) {\n        if (hasEnabledChainIds.indexOf(chainId) < 0) {\n          hasEnabledChainIds.push(chainId);\n        }\n      }\n      yield this.kvStore.set(this.getKeyHasEnabled(), hasEnabledChainIds);\n    });\n  }\n  enigmaDecrypt(_chainId, _ciphertext, _nonce) {\n    throw new Error(\"Not yet implemented\");\n  }\n  enigmaEncrypt(_chainId, _contractCodeHash,\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  _msg) {\n    throw new Error(\"Not yet implemented\");\n  }\n  experimentalSuggestChain(_chainInfo) {\n    throw new Error(\"Not yet implemented\");\n  }\n  getEnigmaPubKey(_chainId) {\n    throw new Error(\"Not yet implemented\");\n  }\n  getEnigmaTxEncryptionKey(_chainId, _nonce) {\n    throw new Error(\"Not yet implemented\");\n  }\n  getEnigmaUtils(_chainId) {\n    throw new Error(\"Not yet implemented\");\n  }\n  getKey(chainId) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const lastSeenKey = yield this.getLastSeenKey(chainId);\n      if (lastSeenKey) {\n        return {\n          address: buffer_1.Buffer.from(lastSeenKey.address, \"hex\"),\n          algo: lastSeenKey.algo,\n          bech32Address: lastSeenKey.bech32Address,\n          isNanoLedger: lastSeenKey.isNanoLedger,\n          name: lastSeenKey.name,\n          pubKey: buffer_1.Buffer.from(lastSeenKey.pubKey, \"hex\")\n        };\n      }\n      const response = (yield this.sendCustomRequest({\n        id: (0, utils_1.payloadId)(),\n        jsonrpc: \"2.0\",\n        method: \"keplr_get_key_wallet_connect_v1\",\n        params: [chainId]\n      }))[0];\n      yield this.saveLastSeenKey(chainId, response);\n      return {\n        address: buffer_1.Buffer.from(response.address, \"hex\"),\n        algo: response.algo,\n        bech32Address: response.bech32Address,\n        isNanoLedger: response.isNanoLedger,\n        name: response.name,\n        pubKey: buffer_1.Buffer.from(response.pubKey, \"hex\")\n      };\n    });\n  }\n  getKeyLastSeenKey() {\n    return `${this.connector.session.key}-key`;\n  }\n  getLastSeenKey(chainId) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const saved = yield this.getAllLastSeenKey();\n      return saved ? saved[chainId] : undefined;\n    });\n  }\n  getAllLastSeenKey() {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      return yield this.kvStore.get(this.getKeyLastSeenKey());\n    });\n  }\n  saveAllLastSeenKey(data) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      yield this.kvStore.set(this.getKeyLastSeenKey(), data);\n    });\n  }\n  saveLastSeenKey(chainId, response) {\n    var _a;\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const saved = (_a = yield this.getAllLastSeenKey()) !== null && _a !== void 0 ? _a : {};\n      saved[chainId] = response;\n      yield this.saveAllLastSeenKey(saved);\n    });\n  }\n  signArbitrary(_chainId, _signer, _data) {\n    throw new Error(\"Not yet implemented\");\n  }\n  verifyArbitrary(_chainId, _signer, _data, _signature) {\n    throw new Error(\"Not yet implemented\");\n  }\n  getOfflineSigner(chainId) {\n    return new provider_1.CosmJSOfflineSigner(chainId, this);\n  }\n  getOfflineSignerAuto(chainId) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const key = yield this.getKey(chainId);\n      return key.isNanoLedger ? new provider_1.CosmJSOfflineSignerOnlyAmino(chainId, this) : new provider_1.CosmJSOfflineSigner(chainId, this);\n    });\n  }\n  getOfflineSignerOnlyAmino(chainId) {\n    return new provider_1.CosmJSOfflineSignerOnlyAmino(chainId, this);\n  }\n  getSecret20ViewingKey(_chainId, _contractAddress) {\n    throw new Error(\"Not yet implemented\");\n  }\n  sendTx(chainId, tx, mode) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const chainInfo = this.chainInfos.find(chainInfo => chainInfo.chainId === chainId);\n      if (!chainInfo) throw new Error(\"No chain info found.\");\n      const restInstance = axios_1.default.create({\n        baseURL: chainInfo.rest\n      });\n      const isProtoTx = buffer_1.Buffer.isBuffer(tx) || tx instanceof Uint8Array;\n      const params = isProtoTx ? {\n        tx_bytes: buffer_1.Buffer.from(tx).toString(\"base64\"),\n        mode: (() => {\n          switch (mode) {\n            case \"async\":\n              return \"BROADCAST_MODE_ASYNC\";\n            case \"block\":\n              return \"BROADCAST_MODE_BLOCK\";\n            case \"sync\":\n              return \"BROADCAST_MODE_SYNC\";\n            default:\n              return \"BROADCAST_MODE_UNSPECIFIED\";\n          }\n        })()\n      } : {\n        tx,\n        mode: mode\n      };\n      const result = yield restInstance.post(isProtoTx ? \"/cosmos/tx/v1beta1/txs\" : \"/txs\", params);\n      const txResponse = isProtoTx ? result.data[\"tx_response\"] : result.data;\n      if (txResponse.code != null && txResponse.code !== 0) {\n        throw new Error(txResponse[\"raw_log\"]);\n      }\n      return buffer_1.Buffer.from(txResponse.txhash, \"hex\");\n    });\n  }\n  signAmino(chainId, signer, signDoc) {\n    let signOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    var _a;\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      return (yield this.sendCustomRequest({\n        id: (0, utils_1.payloadId)(),\n        jsonrpc: \"2.0\",\n        method: \"keplr_sign_amino_wallet_connect_v1\",\n        params: [chainId, signer, signDoc, (0, deepmerge_1.default)((_a = this.defaultOptions.sign) !== null && _a !== void 0 ? _a : {}, signOptions)]\n      }))[0];\n    });\n  }\n  signDirect(_chainId, _signer, _signDoc) {\n    let _signOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    throw new Error(\"Not yet implemented\");\n  }\n  suggestToken(_chainId, _contractAddress, _viewingKey) {\n    throw new Error(\"Not yet implemented\");\n  }\n}\nexports.KeplrWalletConnectV1 = KeplrWalletConnectV1;","map":{"version":3,"mappings":"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","names":["ChainVersionFormatRegExp","parseChainId","chainId","split","filter","Boolean","length","identifier","version","parseInt","KeplrWalletConnectV1","constructor","connector","chainInfos","options","error","payload","tslib_1","console","log","method","param","params","lastSeenKeys","getAllLastSeenKey","mayChangedKeyMap","mayChangedKey","keys","chainIdentifier","address","algo","bech32Address","isNanoLedger","name","pubKey","hasChanged","Object","savedKey","saveAllLastSeenKey","window","dispatchEvent","Event","kvStore","common_1","onBeforeSendRequest","onAfterSendRequest","on","clearSaved","onCallReqeust","Promise","all","set","getKeyHasEnabled","getKeyLastSeenKey","sendCustomRequest","request","dontOpenAppOnEnable","location","href","res","enable","chainIds","hasEnabledChainIds","getHasEnabledChainIds","allEnabled","indexOf","id","jsonrpc","saveHasEnabledChainIds","session","key","get","push","enigmaDecrypt","_chainId","_ciphertext","_nonce","Error","enigmaEncrypt","_contractCodeHash","_msg","experimentalSuggestChain","_chainInfo","getEnigmaPubKey","getEnigmaTxEncryptionKey","getEnigmaUtils","getKey","lastSeenKey","getLastSeenKey","buffer_1","from","response","saveLastSeenKey","saved","undefined","data","signArbitrary","_signer","_data","verifyArbitrary","_signature","getOfflineSigner","provider_1","getOfflineSignerAuto","getOfflineSignerOnlyAmino","getSecret20ViewingKey","_contractAddress","sendTx","tx","mode","chainInfo","find","restInstance","axios_1","create","baseURL","rest","isProtoTx","isBuffer","Uint8Array","tx_bytes","toString","result","post","txResponse","code","txhash","signAmino","signer","signDoc","signOptions","defaultOptions","sign","signDirect","_signDoc","_signOptions","suggestToken","_viewingKey","exports"],"sources":["../../src/connectors/walletconnect-keplr.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}