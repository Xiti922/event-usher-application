{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n// Too large values lead to massive memory usage. Limit to something sensible.\n// The largest value we need is 18 (Ether).\nconst maxFractionalDigits = 100;\n/**\n * A type for arbitrary precision, non-negative decimals.\n *\n * Instances of this class are immutable.\n */\nclass Decimal {\n  constructor(atomics, fractionalDigits) {\n    this.data = {\n      atomics: new bn_js_1.default(atomics),\n      fractionalDigits: fractionalDigits\n    };\n  }\n  static fromUserInput(input, fractionalDigits) {\n    Decimal.verifyFractionalDigits(fractionalDigits);\n    const badCharacter = input.match(/[^0-9.]/);\n    if (badCharacter) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      throw new Error(`Invalid character at position ${badCharacter.index + 1}`);\n    }\n    let whole;\n    let fractional;\n    if (input.search(/\\./) === -1) {\n      // integer format, no separator\n      whole = input;\n      fractional = \"\";\n    } else {\n      const parts = input.split(\".\");\n      switch (parts.length) {\n        case 0:\n        case 1:\n          throw new Error(\"Fewer than two elements in split result. This must not happen here.\");\n        case 2:\n          if (!parts[1]) throw new Error(\"Fractional part missing\");\n          whole = parts[0];\n          fractional = parts[1].replace(/0+$/, \"\");\n          break;\n        default:\n          throw new Error(\"More than one separator found\");\n      }\n    }\n    if (fractional.length > fractionalDigits) {\n      throw new Error(\"Got more fractional digits than supported\");\n    }\n    const quantity = `${whole}${fractional.padEnd(fractionalDigits, \"0\")}`;\n    return new Decimal(quantity, fractionalDigits);\n  }\n  static fromAtomics(atomics, fractionalDigits) {\n    Decimal.verifyFractionalDigits(fractionalDigits);\n    return new Decimal(atomics, fractionalDigits);\n  }\n  static verifyFractionalDigits(fractionalDigits) {\n    if (!Number.isInteger(fractionalDigits)) throw new Error(\"Fractional digits is not an integer\");\n    if (fractionalDigits < 0) throw new Error(\"Fractional digits must not be negative\");\n    if (fractionalDigits > maxFractionalDigits) {\n      throw new Error(`Fractional digits must not exceed ${maxFractionalDigits}`);\n    }\n  }\n  get atomics() {\n    return this.data.atomics.toString();\n  }\n  get fractionalDigits() {\n    return this.data.fractionalDigits;\n  }\n  toString() {\n    const factor = new bn_js_1.default(10).pow(new bn_js_1.default(this.data.fractionalDigits));\n    const whole = this.data.atomics.div(factor);\n    const fractional = this.data.atomics.mod(factor);\n    if (fractional.isZero()) {\n      return whole.toString();\n    } else {\n      const fullFractionalPart = fractional.toString().padStart(this.data.fractionalDigits, \"0\");\n      const trimmedFractionalPart = fullFractionalPart.replace(/0+$/, \"\");\n      return `${whole.toString()}.${trimmedFractionalPart}`;\n    }\n  }\n  /**\n   * Returns an approximation as a float type. Only use this if no\n   * exact calculation is required.\n   */\n  toFloatApproximation() {\n    const out = Number(this.toString());\n    if (Number.isNaN(out)) throw new Error(\"Conversion to number failed\");\n    return out;\n  }\n  /**\n   * a.plus(b) returns a+b.\n   *\n   * Both values need to have the same fractional digits.\n   */\n  plus(b) {\n    if (this.fractionalDigits !== b.fractionalDigits) throw new Error(\"Fractional digits do not match\");\n    const sum = this.data.atomics.add(new bn_js_1.default(b.atomics));\n    return new Decimal(sum.toString(), this.fractionalDigits);\n  }\n}\nexports.Decimal = Decimal;","map":{"version":3,"mappings":"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","names":["maxFractionalDigits","Decimal","constructor","atomics","fractionalDigits","data","bn_js_1","fromUserInput","input","verifyFractionalDigits","badCharacter","match","Error","index","whole","fractional","search","parts","split","length","replace","quantity","padEnd","fromAtomics","Number","isInteger","toString","factor","pow","div","mod","isZero","fullFractionalPart","padStart","trimmedFractionalPart","toFloatApproximation","out","isNaN","plus","b","sum","add","exports"],"sources":["../src/decimal.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}