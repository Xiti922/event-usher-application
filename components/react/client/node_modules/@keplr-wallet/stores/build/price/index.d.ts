import { ObservableQuery, QueryResponse } from "../common";
import { CoinGeckoSimplePrice } from "./types";
import { KVStore } from "@keplr-wallet/common";
import { CoinPretty, PricePretty } from "@keplr-wallet/unit";
import { FiatCurrency } from "@keplr-wallet/types";
import { DeepReadonly } from "utility-types";
declare class Throttler {
    readonly duration: number;
    protected fns: (() => void)[];
    private timeoutId?;
    constructor(duration: number);
    call(fn: () => void): void;
    protected callback: () => void;
}
export declare class CoinGeckoPriceStore extends ObservableQuery<CoinGeckoSimplePrice> {
    protected isInitialized: boolean;
    private _coinIds;
    private _vsCurrencies;
    protected _defaultVsCurrency: string;
    protected _supportedVsCurrencies: {
        [vsCurrency: string]: FiatCurrency | undefined;
    };
    protected _throttler: Throttler;
    constructor(kvStore: KVStore, supportedVsCurrencies: {
        [vsCurrency: string]: FiatCurrency;
    }, defaultVsCurrency: string, options?: {
        readonly baseURL?: string;
        readonly throttleDuration?: number;
    });
    protected onStart(): Promise<void>;
    init(): Promise<void>;
    get defaultVsCurrency(): string;
    setDefaultVsCurrency(defaultVsCurrency: string): void;
    restoreDefaultVsCurrency(): Generator<Promise<string | undefined>, void, string | undefined>;
    saveDefaultVsCurrency(): Promise<void>;
    get supportedVsCurrencies(): DeepReadonly<{
        [vsCurrency: string]: FiatCurrency | undefined;
    }>;
    getFiatCurrency(currency: string): FiatCurrency | undefined;
    protected canFetch(): boolean;
    protected fetchResponse(abortController: AbortController): Promise<{
        response: QueryResponse<CoinGeckoSimplePrice>;
        headers: any;
    }>;
    protected updateURL(coinIds: string[], vsCurrencies: string[], forceSetUrl?: boolean): void;
    protected getCacheKey(): string;
    getPrice(coinId: string, vsCurrency?: string): number | undefined;
    calculatePrice(coin: CoinPretty, vsCurrrency?: string): PricePretty | undefined;
}
export {};
