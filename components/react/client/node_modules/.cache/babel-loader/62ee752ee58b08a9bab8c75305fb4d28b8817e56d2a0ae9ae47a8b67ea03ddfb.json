{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Router = void 0;\nconst encoding_1 = require(\"../encoding\");\nconst json_uint8_array_1 = require(\"../json-uint8-array\");\nclass Router {\n  constructor(envProducer) {\n    this.envProducer = envProducer;\n    this.msgRegistry = new encoding_1.MessageRegistry();\n    this.registeredHandler = new Map();\n    this.guards = [];\n    this.port = \"\";\n  }\n  registerMessage(msgCls) {\n    this.msgRegistry.registerMessage(msgCls);\n  }\n  addHandler(route, handler) {\n    if (this.registeredHandler.has(route)) {\n      throw new Error(`Already registered type ${route}`);\n    }\n    this.registeredHandler.set(route, handler);\n  }\n  addGuard(guard) {\n    this.guards.push(guard);\n  }\n  handleMessage(message, sender) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const msg = this.msgRegistry.parseMessage(json_uint8_array_1.JSONUint8Array.unwrap(message));\n      const env = this.envProducer(sender, (_a = msg.routerMeta) !== null && _a !== void 0 ? _a : {});\n      for (const guard of this.guards) {\n        yield guard(env, msg, sender);\n      }\n      // Can happen throw\n      msg.validateBasic();\n      const route = msg.route();\n      if (!route) {\n        throw new Error(\"Null router\");\n      }\n      const handler = this.registeredHandler.get(route);\n      if (!handler) {\n        throw new Error(\"Can't get handler\");\n      }\n      return json_uint8_array_1.JSONUint8Array.wrap(yield handler(env, msg));\n    });\n  }\n}\nexports.Router = Router;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AACA;AAEA,MAAsBA,MAAM;EAQ1BC,YAA+BC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;IAPhC,gBAAW,GAAoB,IAAIC,0BAAe,EAAE;IACpD,sBAAiB,GAAyB,IAAIC,GAAG,EAAE;IAEnD,WAAM,GAAY,EAAE;IAEpB,SAAI,GAAG,EAAE;EAEuC;EAEnDC,eAAe,CACpBC,MAAqE;IAErE,IAAI,CAACC,WAAW,CAACF,eAAe,CAACC,MAAM,CAAC;EAC1C;EAEOE,UAAU,CAACC,KAAa,EAAEC,OAAgB;IAC/C,IAAI,IAAI,CAACC,iBAAiB,CAACC,GAAG,CAACH,KAAK,CAAC,EAAE;MACrC,MAAM,IAAII,KAAK,CAAC,2BAA2BJ,KAAK,EAAE,CAAC;;IAGrD,IAAI,CAACE,iBAAiB,CAACG,GAAG,CAACL,KAAK,EAAEC,OAAO,CAAC;EAC5C;EAEOK,QAAQ,CAACC,KAAY;IAC1B,IAAI,CAACC,MAAM,CAACC,IAAI,CAACF,KAAK,CAAC;EACzB;EAMgBG,aAAa,CAC3BC,OAAY,EACZC,MAAqB;;;MAErB,MAAMC,GAAG,GAAG,IAAI,CAACf,WAAW,CAACgB,YAAY,CAACC,iCAAc,CAACC,MAAM,CAACL,OAAO,CAAC,CAAC;MACzE,MAAMM,GAAG,GAAG,IAAI,CAACxB,WAAW,CAACmB,MAAM,QAAEC,GAAG,CAACK,UAAU,mCAAI,EAAE,CAAC;MAE1D,KAAK,MAAMX,KAAK,IAAI,IAAI,CAACC,MAAM,EAAE;QAC/B,MAAMD,KAAK,CAACU,GAAG,EAAEJ,GAAG,EAAED,MAAM,CAAC;;MAG/B;MACAC,GAAG,CAACM,aAAa,EAAE;MAEnB,MAAMnB,KAAK,GAAGa,GAAG,CAACb,KAAK,EAAE;MACzB,IAAI,CAACA,KAAK,EAAE;QACV,MAAM,IAAII,KAAK,CAAC,aAAa,CAAC;;MAEhC,MAAMH,OAAO,GAAG,IAAI,CAACC,iBAAiB,CAACkB,GAAG,CAACpB,KAAK,CAAC;MACjD,IAAI,CAACC,OAAO,EAAE;QACZ,MAAM,IAAIG,KAAK,CAAC,mBAAmB,CAAC;;MAGtC,OAAOW,iCAAc,CAACM,IAAI,CAAC,MAAMpB,OAAO,CAACgB,GAAG,EAAEJ,GAAG,CAAC,CAAC;;;;AAvDvDS","names":["Router","constructor","envProducer","encoding_1","Map","registerMessage","msgCls","msgRegistry","addHandler","route","handler","registeredHandler","has","Error","set","addGuard","guard","guards","push","handleMessage","message","sender","msg","parseMessage","json_uint8_array_1","unwrap","env","routerMeta","validateBasic","get","wrap","exports"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/@keplr-wallet/router/src/router/index.ts"],"sourcesContent":["import { Message } from \"../message\";\nimport { Handler } from \"../handler\";\nimport { EnvProducer, Guard, MessageSender } from \"../types\";\nimport { MessageRegistry } from \"../encoding\";\nimport { JSONUint8Array } from \"../json-uint8-array\";\n\nexport abstract class Router {\n  protected msgRegistry: MessageRegistry = new MessageRegistry();\n  protected registeredHandler: Map<string, Handler> = new Map();\n\n  protected guards: Guard[] = [];\n\n  protected port = \"\";\n\n  constructor(protected readonly envProducer: EnvProducer) {}\n\n  public registerMessage(\n    msgCls: { new (...args: any): Message<unknown> } & { type(): string }\n  ): void {\n    this.msgRegistry.registerMessage(msgCls);\n  }\n\n  public addHandler(route: string, handler: Handler) {\n    if (this.registeredHandler.has(route)) {\n      throw new Error(`Already registered type ${route}`);\n    }\n\n    this.registeredHandler.set(route, handler);\n  }\n\n  public addGuard(guard: Guard): void {\n    this.guards.push(guard);\n  }\n\n  public abstract listen(port: string): void;\n\n  public abstract unlisten(): void;\n\n  protected async handleMessage(\n    message: any,\n    sender: MessageSender\n  ): Promise<unknown> {\n    const msg = this.msgRegistry.parseMessage(JSONUint8Array.unwrap(message));\n    const env = this.envProducer(sender, msg.routerMeta ?? {});\n\n    for (const guard of this.guards) {\n      await guard(env, msg, sender);\n    }\n\n    // Can happen throw\n    msg.validateBasic();\n\n    const route = msg.route();\n    if (!route) {\n      throw new Error(\"Null router\");\n    }\n    const handler = this.registeredHandler.get(route);\n    if (!handler) {\n      throw new Error(\"Can't get handler\");\n    }\n\n    return JSONUint8Array.wrap(await handler(env, msg));\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}