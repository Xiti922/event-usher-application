{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ObservableQueryValidators = exports.ObservableQueryValidatorsInner = exports.ObservableQueryValidatorThumbnail = void 0;\nconst chain_query_1 = require(\"../../chain-query\");\nconst types_1 = require(\"./types\");\nconst mobx_1 = require(\"mobx\");\nconst common_1 = require(\"../../../common\");\nconst axios_1 = __importDefault(require(\"axios\"));\nconst p_queue_1 = __importDefault(require(\"p-queue\"));\nconst unit_1 = require(\"@keplr-wallet/unit\");\nconst mobx_utils_1 = require(\"mobx-utils\");\n/**\n * Fetch the validator's thumbnail from keybase if the identity exists.\n */\nclass ObservableQueryValidatorThumbnail extends common_1.ObservableQuery {\n  constructor(kvStore, validator) {\n    const instance = axios_1.default.create({\n      baseURL: \"https://keybase.io/\"\n    });\n    super(kvStore, instance, `_/api/1.0/user/lookup.json?fields=pictures&key_suffix=${validator.description.identity}`);\n    mobx_1.makeObservable(this);\n    this.validator = validator;\n  }\n  canFetch() {\n    return this.validator.description.identity !== \"\";\n  }\n  fetchResponse(abortController) {\n    const _super = Object.create(null, {\n      fetchResponse: {\n        get: () => super.fetchResponse\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      return yield ObservableQueryValidatorThumbnail.fetchingThumbnailQueue.add(() => {\n        return _super.fetchResponse.call(this, abortController);\n      });\n    });\n  }\n  get thumbnail() {\n    var _a, _b, _c, _d;\n    if (((_a = this.response) === null || _a === void 0 ? void 0 : _a.data.status.code) === 0) {\n      if (this.response.data.them && this.response.data.them.length > 0) {\n        return (_d = (_c = (_b = this.response.data.them[0].pictures) === null || _b === void 0 ? void 0 : _b.primary) === null || _c === void 0 ? void 0 : _c.url) !== null && _d !== void 0 ? _d : \"\";\n      }\n    }\n    return \"\";\n  }\n}\n/**\n * Throttle down fetching the thumbnail from Keybase.\n * If too many requests occurs at the same time, Keybase will reject these requests.\n * @protected\n */\nObservableQueryValidatorThumbnail.fetchingThumbnailQueue = new p_queue_1.default({\n  concurrency: 3\n});\n__decorate([mobx_1.computed], ObservableQueryValidatorThumbnail.prototype, \"thumbnail\", null);\nexports.ObservableQueryValidatorThumbnail = ObservableQueryValidatorThumbnail;\nclass ObservableQueryValidatorsInner extends chain_query_1.ObservableChainQuery {\n  constructor(kvStore, chainId, chainGetter, status) {\n    super(kvStore, chainId, chainGetter, `/cosmos/staking/v1beta1/validators?pagination.limit=1000&status=${(() => {\n      switch (status) {\n        case types_1.BondStatus.Bonded:\n          return \"BOND_STATUS_BONDED\";\n        case types_1.BondStatus.Unbonded:\n          return \"BOND_STATUS_UNBONDED\";\n        case types_1.BondStatus.Unbonding:\n          return \"BOND_STATUS_UNBONDING\";\n        default:\n          return \"BOND_STATUS_UNSPECIFIED\";\n      }\n    })()}`);\n    this.status = status;\n    this.thumbnailMap = new Map();\n    this.getValidator = mobx_utils_1.computedFn(validatorAddress => {\n      const validators = this.validators;\n      return validators.find(val => val.operator_address === validatorAddress);\n    });\n    this.getValidatorThumbnail = mobx_utils_1.computedFn(operatorAddress => {\n      const validators = this.validators;\n      const validator = validators.find(val => val.operator_address === operatorAddress);\n      if (!validator) {\n        return \"\";\n      }\n      if (!validator.description.identity) {\n        return \"\";\n      }\n      const identity = validator.description.identity;\n      if (!this.thumbnailMap.has(identity)) {\n        mobx_1.runInAction(() => {\n          this.thumbnailMap.set(identity, new ObservableQueryValidatorThumbnail(this.kvStore, validator));\n        });\n      }\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      return this.thumbnailMap.get(identity).thumbnail;\n    });\n    /**\n     * Return the validator's voting power as human friendly (considering the coin decimals).\n     */\n    this.getValidatorShare = mobx_utils_1.computedFn(operatorAddress => {\n      const validators = this.validators;\n      const validator = validators.find(val => val.operator_address === operatorAddress);\n      if (!validator) {\n        return;\n      }\n      const chainInfo = this.chainGetter.getChain(this.chainId);\n      const stakeCurrency = chainInfo.stakeCurrency;\n      const power = new unit_1.Dec(validator.tokens).truncate();\n      return new unit_1.CoinPretty(stakeCurrency, power);\n    });\n    mobx_1.makeObservable(this);\n  }\n  get validators() {\n    if (!this.response) {\n      return [];\n    }\n    return this.response.data.validators;\n  }\n  get validatorsSortedByVotingPower() {\n    const validators = this.validators;\n    return validators.sort((v1, v2) => {\n      return new unit_1.Dec(v1.tokens).gt(new unit_1.Dec(v2.tokens)) ? -1 : 1;\n    });\n  }\n}\n__decorate([mobx_1.observable.shallow], ObservableQueryValidatorsInner.prototype, \"thumbnailMap\", void 0);\n__decorate([mobx_1.computed], ObservableQueryValidatorsInner.prototype, \"validators\", null);\n__decorate([mobx_1.computed], ObservableQueryValidatorsInner.prototype, \"validatorsSortedByVotingPower\", null);\nexports.ObservableQueryValidatorsInner = ObservableQueryValidatorsInner;\nclass ObservableQueryValidators extends chain_query_1.ObservableChainQueryMap {\n  constructor(kvStore, chainId, chainGetter) {\n    super(kvStore, chainId, chainGetter, status => {\n      return new ObservableQueryValidatorsInner(this.kvStore, this.chainId, this.chainGetter, status);\n    });\n    this.kvStore = kvStore;\n    this.chainId = chainId;\n    this.chainGetter = chainGetter;\n  }\n  getQueryStatus() {\n    let status = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : types_1.BondStatus.Bonded;\n    return this.get(status);\n  }\n}\nexports.ObservableQueryValidators = ObservableQueryValidators;","map":{"version":3,"mappings":"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","names":["ObservableQueryValidatorThumbnail","common_1","constructor","kvStore","validator","instance","axios_1","create","baseURL","description","identity","mobx_1","canFetch","fetchResponse","abortController","fetchingThumbnailQueue","add","_super","thumbnail","response","data","status","code","them","length","pictures","primary","url","p_queue_1","concurrency","__decorate","exports","ObservableQueryValidatorsInner","chain_query_1","chainId","chainGetter","types_1","Bonded","Unbonded","Unbonding","Map","mobx_utils_1","validatorAddress","validators","find","val","operator_address","operatorAddress","thumbnailMap","has","set","get","chainInfo","getChain","stakeCurrency","power","unit_1","tokens","truncate","validatorsSortedByVotingPower","sort","v1","v2","gt","shallow","ObservableQueryValidators","getQueryStatus"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/@keplr-wallet/stores/src/query/cosmos/staking/validators.ts"],"sourcesContent":["import {\n  ObservableChainQuery,\n  ObservableChainQueryMap,\n} from \"../../chain-query\";\nimport { BondStatus, Validators, Validator } from \"./types\";\nimport { KVStore } from \"@keplr-wallet/common\";\nimport { ChainGetter } from \"../../../common\";\nimport { computed, makeObservable, observable, runInAction } from \"mobx\";\nimport { ObservableQuery, QueryResponse } from \"../../../common\";\nimport Axios from \"axios\";\nimport PQueue from \"p-queue\";\nimport { CoinPretty, Dec } from \"@keplr-wallet/unit\";\nimport { computedFn } from \"mobx-utils\";\n\ninterface KeybaseResult {\n  status: {\n    code: number;\n    name: string;\n  };\n  them?: [\n    {\n      id?: string;\n      pictures?: {\n        primary?: {\n          url?: string;\n        };\n      };\n    }\n  ];\n}\n\n/**\n * Fetch the validator's thumbnail from keybase if the identity exists.\n */\nexport class ObservableQueryValidatorThumbnail extends ObservableQuery<KeybaseResult> {\n  /**\n   * Throttle down fetching the thumbnail from Keybase.\n   * If too many requests occurs at the same time, Keybase will reject these requests.\n   * @protected\n   */\n  protected static fetchingThumbnailQueue: PQueue = new PQueue({\n    concurrency: 3,\n  });\n\n  protected readonly validator: Validator;\n\n  constructor(kvStore: KVStore, validator: Validator) {\n    const instance = Axios.create({\n      baseURL: \"https://keybase.io/\",\n    });\n\n    super(\n      kvStore,\n      instance,\n      `_/api/1.0/user/lookup.json?fields=pictures&key_suffix=${validator.description.identity}`\n    );\n    makeObservable(this);\n\n    this.validator = validator;\n  }\n\n  protected canFetch(): boolean {\n    return this.validator.description.identity !== \"\";\n  }\n\n  protected async fetchResponse(\n    abortController: AbortController\n  ): Promise<{ response: QueryResponse<KeybaseResult>; headers: any }> {\n    return await ObservableQueryValidatorThumbnail.fetchingThumbnailQueue.add(\n      () => {\n        return super.fetchResponse(abortController);\n      }\n    );\n  }\n\n  @computed\n  get thumbnail(): string {\n    if (this.response?.data.status.code === 0) {\n      if (this.response.data.them && this.response.data.them.length > 0) {\n        return this.response.data.them[0].pictures?.primary?.url ?? \"\";\n      }\n    }\n\n    return \"\";\n  }\n}\n\nexport class ObservableQueryValidatorsInner extends ObservableChainQuery<Validators> {\n  @observable.shallow\n  protected thumbnailMap: Map<\n    string,\n    ObservableQueryValidatorThumbnail\n  > = new Map();\n\n  constructor(\n    kvStore: KVStore,\n    chainId: string,\n    chainGetter: ChainGetter,\n    protected readonly status: BondStatus\n  ) {\n    super(\n      kvStore,\n      chainId,\n      chainGetter,\n      `/cosmos/staking/v1beta1/validators?pagination.limit=1000&status=${(() => {\n        switch (status) {\n          case BondStatus.Bonded:\n            return \"BOND_STATUS_BONDED\";\n          case BondStatus.Unbonded:\n            return \"BOND_STATUS_UNBONDED\";\n          case BondStatus.Unbonding:\n            return \"BOND_STATUS_UNBONDING\";\n          default:\n            return \"BOND_STATUS_UNSPECIFIED\";\n        }\n      })()}`\n    );\n    makeObservable(this);\n  }\n\n  @computed\n  get validators(): Validator[] {\n    if (!this.response) {\n      return [];\n    }\n\n    return this.response.data.validators;\n  }\n\n  readonly getValidator = computedFn((validatorAddress: string):\n    | Validator\n    | undefined => {\n    const validators = this.validators;\n\n    return validators.find((val) => val.operator_address === validatorAddress);\n  });\n\n  @computed\n  get validatorsSortedByVotingPower(): Validator[] {\n    const validators = this.validators;\n    return validators.sort((v1, v2) => {\n      return new Dec(v1.tokens).gt(new Dec(v2.tokens)) ? -1 : 1;\n    });\n  }\n\n  readonly getValidatorThumbnail = computedFn(\n    (operatorAddress: string): string => {\n      const validators = this.validators;\n      const validator = validators.find(\n        (val) => val.operator_address === operatorAddress\n      );\n      if (!validator) {\n        return \"\";\n      }\n\n      if (!validator.description.identity) {\n        return \"\";\n      }\n\n      const identity = validator.description.identity;\n\n      if (!this.thumbnailMap.has(identity)) {\n        runInAction(() => {\n          this.thumbnailMap.set(\n            identity,\n            new ObservableQueryValidatorThumbnail(this.kvStore, validator)\n          );\n        });\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      return this.thumbnailMap.get(identity)!.thumbnail;\n    }\n  );\n\n  /**\n   * Return the validator's voting power as human friendly (considering the coin decimals).\n   */\n  readonly getValidatorShare = computedFn((operatorAddress: string):\n    | CoinPretty\n    | undefined => {\n    const validators = this.validators;\n    const validator = validators.find(\n      (val) => val.operator_address === operatorAddress\n    );\n    if (!validator) {\n      return;\n    }\n\n    const chainInfo = this.chainGetter.getChain(this.chainId);\n    const stakeCurrency = chainInfo.stakeCurrency;\n\n    const power = new Dec(validator.tokens).truncate();\n\n    return new CoinPretty(stakeCurrency, power);\n  });\n}\n\nexport class ObservableQueryValidators extends ObservableChainQueryMap<Validators> {\n  constructor(\n    protected readonly kvStore: KVStore,\n    protected readonly chainId: string,\n    protected readonly chainGetter: ChainGetter\n  ) {\n    super(kvStore, chainId, chainGetter, (status: string) => {\n      return new ObservableQueryValidatorsInner(\n        this.kvStore,\n        this.chainId,\n        this.chainGetter,\n        status as BondStatus\n      );\n    });\n  }\n\n  getQueryStatus(\n    status: BondStatus = BondStatus.Bonded\n  ): ObservableQueryValidatorsInner {\n    return this.get(status) as ObservableQueryValidatorsInner;\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}