{"ast":null,"code":"\"use strict\";\n\n// Copyright (C) 2017-2018 Dmitry Chestnykh, Tony Arcieri\n// MIT License. See LICENSE file for details.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst constant_time_1 = require(\"./internals/constant-time\");\nconst wipe_1 = require(\"./internals/wipe\");\nconst xor_1 = require(\"./internals/xor\");\nconst exceptions_1 = require(\"./exceptions\");\nconst block_1 = require(\"./internals/block\");\nconst cmac_1 = require(\"./mac/cmac\");\nconst pmac_1 = require(\"./mac/pmac\");\nconst webcrypto_1 = require(\"./providers/webcrypto\");\n/** Maximum number of associated data items */\nexports.MAX_ASSOCIATED_DATA = 126;\n/** The AES-SIV mode of authenticated encryption */\nclass SIV {\n  /** Create a new AES-SIV instance with the given 32-byte or 64-byte key */\n  static importKey(keyData, alg) {\n    let provider = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new webcrypto_1.WebCryptoProvider();\n    return __awaiter(this, void 0, void 0, function* () {\n      // We only support AES-128 and AES-256. AES-SIV needs a key 2X as long the intended security level\n      if (keyData.length !== 32 && keyData.length !== 64) {\n        throw new Error(`AES-SIV: key must be 32 or 64-bytes (got ${keyData.length}`);\n      }\n      const macKey = keyData.subarray(0, keyData.length / 2 | 0);\n      const encKey = keyData.subarray(keyData.length / 2 | 0);\n      let mac;\n      switch (alg) {\n        case \"AES-SIV\":\n          mac = yield cmac_1.CMAC.importKey(provider, macKey);\n          break;\n        case \"AES-CMAC-SIV\":\n          mac = yield cmac_1.CMAC.importKey(provider, macKey);\n          break;\n        case \"AES-PMAC-SIV\":\n          mac = yield pmac_1.PMAC.importKey(provider, macKey);\n          break;\n        default:\n          throw new exceptions_1.NotImplementedError(`Miscreant: algorithm not supported: ${alg}`);\n      }\n      const ctr = yield provider.importCTRKey(encKey);\n      return new SIV(mac, ctr);\n    });\n  }\n  constructor(mac, ctr) {\n    this._mac = mac;\n    this._ctr = ctr;\n    this._tmp1 = new block_1.default();\n    this._tmp2 = new block_1.default();\n  }\n  /** Encrypt and authenticate data using AES-SIV */\n  seal(plaintext, associatedData) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (associatedData.length > exports.MAX_ASSOCIATED_DATA) {\n        throw new Error(\"AES-SIV: too many associated data items\");\n      }\n      // Allocate space for sealed ciphertext.\n      const resultLength = block_1.default.SIZE + plaintext.length;\n      const result = new Uint8Array(resultLength);\n      // Authenticate.\n      const iv = yield this._s2v(associatedData, plaintext);\n      result.set(iv);\n      // Encrypt.\n      zeroIVBits(iv);\n      result.set(yield this._ctr.encryptCtr(iv, plaintext), iv.length);\n      return result;\n    });\n  }\n  /** Decrypt and authenticate data using AES-SIV */\n  open(sealed, associatedData) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (associatedData.length > exports.MAX_ASSOCIATED_DATA) {\n        throw new Error(\"AES-SIV: too many associated data items\");\n      }\n      if (sealed.length < block_1.default.SIZE) {\n        throw new exceptions_1.IntegrityError(\"AES-SIV: ciphertext is truncated\");\n      }\n      // Decrypt.\n      const tag = sealed.subarray(0, block_1.default.SIZE);\n      const iv = this._tmp1.data;\n      iv.set(tag);\n      zeroIVBits(iv);\n      // NOTE: \"encryptCtr\" is intentional. CTR encryption/decryption are the same\n      const result = yield this._ctr.encryptCtr(iv, sealed.subarray(block_1.default.SIZE));\n      // Authenticate.\n      const expectedTag = yield this._s2v(associatedData, result);\n      if (!constant_time_1.equal(expectedTag, tag)) {\n        wipe_1.wipe(result);\n        throw new exceptions_1.IntegrityError(\"AES-SIV: ciphertext verification failure!\");\n      }\n      return result;\n    });\n  }\n  /** Make a best effort to wipe memory used by this instance */\n  clear() {\n    this._tmp1.clear();\n    this._tmp2.clear();\n    this._ctr.clear();\n    this._mac.clear();\n    return this;\n  }\n  /**\n   * The S2V operation consists of the doubling and XORing of the outputs\n   * of the pseudo-random function CMAC (or PMAC in the case of AES-PMAC-SIV).\n   *\n   * See Section 2.4 of RFC 5297 for more information\n   */\n  _s2v(associated_data, plaintext) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._mac.reset();\n      this._tmp1.clear();\n      // Note: the standalone S2V returns CMAC(1) if the number of passed\n      // vectors is zero, however in SIV construction this case is never\n      // triggered, since we always pass plaintext as the last vector (even\n      // if it's zero-length), so we omit this case.\n      yield this._mac.update(this._tmp1.data);\n      this._tmp2.clear();\n      this._tmp2.data.set(yield this._mac.finish());\n      this._mac.reset();\n      for (const ad of associated_data) {\n        yield this._mac.update(ad);\n        this._tmp1.clear();\n        this._tmp1.data.set(yield this._mac.finish());\n        this._mac.reset();\n        this._tmp2.dbl();\n        xor_1.xor(this._tmp2.data, this._tmp1.data);\n      }\n      this._tmp1.clear();\n      if (plaintext.length >= block_1.default.SIZE) {\n        const n = plaintext.length - block_1.default.SIZE;\n        this._tmp1.data.set(plaintext.subarray(n));\n        yield this._mac.update(plaintext.subarray(0, n));\n      } else {\n        this._tmp1.data.set(plaintext);\n        this._tmp1.data[plaintext.length] = 0x80;\n        this._tmp2.dbl();\n      }\n      xor_1.xor(this._tmp1.data, this._tmp2.data);\n      yield this._mac.update(this._tmp1.data);\n      return this._mac.finish();\n    });\n  }\n}\nexports.SIV = SIV;\n/** Zero out the top bits in the last 32-bit words of the IV */\nfunction zeroIVBits(iv) {\n  // \"We zero-out the top bit in each of the last two 32-bit words\n  // of the IV before assigning it to Ctr\"\n  //  â€” http://web.cs.ucdavis.edu/~rogaway/papers/siv.pdf\n  iv[iv.length - 8] &= 0x7f;\n  iv[iv.length - 4] &= 0x7f;\n}","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","constant_time_1","require","wipe_1","xor_1","exceptions_1","block_1","cmac_1","pmac_1","webcrypto_1","MAX_ASSOCIATED_DATA","SIV","importKey","keyData","alg","provider","WebCryptoProvider","length","Error","macKey","subarray","encKey","mac","CMAC","PMAC","NotImplementedError","ctr","importCTRKey","constructor","_mac","_ctr","_tmp1","default","_tmp2","seal","plaintext","associatedData","resultLength","SIZE","Uint8Array","iv","_s2v","set","zeroIVBits","encryptCtr","open","sealed","IntegrityError","tag","data","expectedTag","equal","wipe","clear","associated_data","reset","update","finish","ad","dbl","xor","n"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/miscreant/release/siv.js"],"sourcesContent":["\"use strict\";\n// Copyright (C) 2017-2018 Dmitry Chestnykh, Tony Arcieri\n// MIT License. See LICENSE file for details.\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst constant_time_1 = require(\"./internals/constant-time\");\nconst wipe_1 = require(\"./internals/wipe\");\nconst xor_1 = require(\"./internals/xor\");\nconst exceptions_1 = require(\"./exceptions\");\nconst block_1 = require(\"./internals/block\");\nconst cmac_1 = require(\"./mac/cmac\");\nconst pmac_1 = require(\"./mac/pmac\");\nconst webcrypto_1 = require(\"./providers/webcrypto\");\n/** Maximum number of associated data items */\nexports.MAX_ASSOCIATED_DATA = 126;\n/** The AES-SIV mode of authenticated encryption */\nclass SIV {\n    /** Create a new AES-SIV instance with the given 32-byte or 64-byte key */\n    static importKey(keyData, alg, provider = new webcrypto_1.WebCryptoProvider()) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // We only support AES-128 and AES-256. AES-SIV needs a key 2X as long the intended security level\n            if (keyData.length !== 32 && keyData.length !== 64) {\n                throw new Error(`AES-SIV: key must be 32 or 64-bytes (got ${keyData.length}`);\n            }\n            const macKey = keyData.subarray(0, keyData.length / 2 | 0);\n            const encKey = keyData.subarray(keyData.length / 2 | 0);\n            let mac;\n            switch (alg) {\n                case \"AES-SIV\":\n                    mac = yield cmac_1.CMAC.importKey(provider, macKey);\n                    break;\n                case \"AES-CMAC-SIV\":\n                    mac = yield cmac_1.CMAC.importKey(provider, macKey);\n                    break;\n                case \"AES-PMAC-SIV\":\n                    mac = yield pmac_1.PMAC.importKey(provider, macKey);\n                    break;\n                default:\n                    throw new exceptions_1.NotImplementedError(`Miscreant: algorithm not supported: ${alg}`);\n            }\n            const ctr = yield provider.importCTRKey(encKey);\n            return new SIV(mac, ctr);\n        });\n    }\n    constructor(mac, ctr) {\n        this._mac = mac;\n        this._ctr = ctr;\n        this._tmp1 = new block_1.default();\n        this._tmp2 = new block_1.default();\n    }\n    /** Encrypt and authenticate data using AES-SIV */\n    seal(plaintext, associatedData) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (associatedData.length > exports.MAX_ASSOCIATED_DATA) {\n                throw new Error(\"AES-SIV: too many associated data items\");\n            }\n            // Allocate space for sealed ciphertext.\n            const resultLength = block_1.default.SIZE + plaintext.length;\n            const result = new Uint8Array(resultLength);\n            // Authenticate.\n            const iv = yield this._s2v(associatedData, plaintext);\n            result.set(iv);\n            // Encrypt.\n            zeroIVBits(iv);\n            result.set(yield this._ctr.encryptCtr(iv, plaintext), iv.length);\n            return result;\n        });\n    }\n    /** Decrypt and authenticate data using AES-SIV */\n    open(sealed, associatedData) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (associatedData.length > exports.MAX_ASSOCIATED_DATA) {\n                throw new Error(\"AES-SIV: too many associated data items\");\n            }\n            if (sealed.length < block_1.default.SIZE) {\n                throw new exceptions_1.IntegrityError(\"AES-SIV: ciphertext is truncated\");\n            }\n            // Decrypt.\n            const tag = sealed.subarray(0, block_1.default.SIZE);\n            const iv = this._tmp1.data;\n            iv.set(tag);\n            zeroIVBits(iv);\n            // NOTE: \"encryptCtr\" is intentional. CTR encryption/decryption are the same\n            const result = yield this._ctr.encryptCtr(iv, sealed.subarray(block_1.default.SIZE));\n            // Authenticate.\n            const expectedTag = yield this._s2v(associatedData, result);\n            if (!constant_time_1.equal(expectedTag, tag)) {\n                wipe_1.wipe(result);\n                throw new exceptions_1.IntegrityError(\"AES-SIV: ciphertext verification failure!\");\n            }\n            return result;\n        });\n    }\n    /** Make a best effort to wipe memory used by this instance */\n    clear() {\n        this._tmp1.clear();\n        this._tmp2.clear();\n        this._ctr.clear();\n        this._mac.clear();\n        return this;\n    }\n    /**\n     * The S2V operation consists of the doubling and XORing of the outputs\n     * of the pseudo-random function CMAC (or PMAC in the case of AES-PMAC-SIV).\n     *\n     * See Section 2.4 of RFC 5297 for more information\n     */\n    _s2v(associated_data, plaintext) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._mac.reset();\n            this._tmp1.clear();\n            // Note: the standalone S2V returns CMAC(1) if the number of passed\n            // vectors is zero, however in SIV construction this case is never\n            // triggered, since we always pass plaintext as the last vector (even\n            // if it's zero-length), so we omit this case.\n            yield this._mac.update(this._tmp1.data);\n            this._tmp2.clear();\n            this._tmp2.data.set(yield this._mac.finish());\n            this._mac.reset();\n            for (const ad of associated_data) {\n                yield this._mac.update(ad);\n                this._tmp1.clear();\n                this._tmp1.data.set(yield this._mac.finish());\n                this._mac.reset();\n                this._tmp2.dbl();\n                xor_1.xor(this._tmp2.data, this._tmp1.data);\n            }\n            this._tmp1.clear();\n            if (plaintext.length >= block_1.default.SIZE) {\n                const n = plaintext.length - block_1.default.SIZE;\n                this._tmp1.data.set(plaintext.subarray(n));\n                yield this._mac.update(plaintext.subarray(0, n));\n            }\n            else {\n                this._tmp1.data.set(plaintext);\n                this._tmp1.data[plaintext.length] = 0x80;\n                this._tmp2.dbl();\n            }\n            xor_1.xor(this._tmp1.data, this._tmp2.data);\n            yield this._mac.update(this._tmp1.data);\n            return this._mac.finish();\n        });\n    }\n}\nexports.SIV = SIV;\n/** Zero out the top bits in the last 32-bit words of the IV */\nfunction zeroIVBits(iv) {\n    // \"We zero-out the top bit in each of the last two 32-bit words\n    // of the IV before assigning it to Ctr\"\n    //  â€” http://web.cs.ucdavis.edu/~rogaway/papers/siv.pdf\n    iv[iv.length - 8] &= 0x7f;\n    iv[iv.length - 4] &= 0x7f;\n}\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA,IAAIA,SAAS,GAAI,IAAI,IAAI,IAAI,CAACA,SAAS,IAAK,UAAUC,OAAO,EAAEC,UAAU,EAAEC,CAAC,EAAEC,SAAS,EAAE;EACrF,OAAO,KAAKD,CAAC,KAAKA,CAAC,GAAGE,OAAO,CAAC,EAAE,UAAUC,OAAO,EAAEC,MAAM,EAAE;IACvD,SAASC,SAAS,CAACC,KAAK,EAAE;MAAE,IAAI;QAAEC,IAAI,CAACN,SAAS,CAACO,IAAI,CAACF,KAAK,CAAC,CAAC;MAAE,CAAC,CAAC,OAAOG,CAAC,EAAE;QAAEL,MAAM,CAACK,CAAC,CAAC;MAAE;IAAE;IAC1F,SAASC,QAAQ,CAACJ,KAAK,EAAE;MAAE,IAAI;QAAEC,IAAI,CAACN,SAAS,CAAC,OAAO,CAAC,CAACK,KAAK,CAAC,CAAC;MAAE,CAAC,CAAC,OAAOG,CAAC,EAAE;QAAEL,MAAM,CAACK,CAAC,CAAC;MAAE;IAAE;IAC7F,SAASF,IAAI,CAACI,MAAM,EAAE;MAAEA,MAAM,CAACC,IAAI,GAAGT,OAAO,CAACQ,MAAM,CAACL,KAAK,CAAC,GAAG,IAAIN,CAAC,CAAC,UAAUG,OAAO,EAAE;QAAEA,OAAO,CAACQ,MAAM,CAACL,KAAK,CAAC;MAAE,CAAC,CAAC,CAACO,IAAI,CAACR,SAAS,EAAEK,QAAQ,CAAC;IAAE;IAC9IH,IAAI,CAAC,CAACN,SAAS,GAAGA,SAAS,CAACa,KAAK,CAAChB,OAAO,EAAEC,UAAU,IAAI,EAAE,CAAC,EAAES,IAAI,EAAE,CAAC;EACzE,CAAC,CAAC;AACN,CAAC;AACDO,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEX,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,MAAMY,eAAe,GAAGC,OAAO,CAAC,2BAA2B,CAAC;AAC5D,MAAMC,MAAM,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AAC1C,MAAME,KAAK,GAAGF,OAAO,CAAC,iBAAiB,CAAC;AACxC,MAAMG,YAAY,GAAGH,OAAO,CAAC,cAAc,CAAC;AAC5C,MAAMI,OAAO,GAAGJ,OAAO,CAAC,mBAAmB,CAAC;AAC5C,MAAMK,MAAM,GAAGL,OAAO,CAAC,YAAY,CAAC;AACpC,MAAMM,MAAM,GAAGN,OAAO,CAAC,YAAY,CAAC;AACpC,MAAMO,WAAW,GAAGP,OAAO,CAAC,uBAAuB,CAAC;AACpD;AACAF,OAAO,CAACU,mBAAmB,GAAG,GAAG;AACjC;AACA,MAAMC,GAAG,CAAC;EACN;EACA,OAAOC,SAAS,CAACC,OAAO,EAAEC,GAAG,EAAkD;IAAA,IAAhDC,QAAQ,uEAAG,IAAIN,WAAW,CAACO,iBAAiB,EAAE;IACzE,OAAOpC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD;MACA,IAAIiC,OAAO,CAACI,MAAM,KAAK,EAAE,IAAIJ,OAAO,CAACI,MAAM,KAAK,EAAE,EAAE;QAChD,MAAM,IAAIC,KAAK,CAAE,4CAA2CL,OAAO,CAACI,MAAO,EAAC,CAAC;MACjF;MACA,MAAME,MAAM,GAAGN,OAAO,CAACO,QAAQ,CAAC,CAAC,EAAEP,OAAO,CAACI,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;MAC1D,MAAMI,MAAM,GAAGR,OAAO,CAACO,QAAQ,CAACP,OAAO,CAACI,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;MACvD,IAAIK,GAAG;MACP,QAAQR,GAAG;QACP,KAAK,SAAS;UACVQ,GAAG,GAAG,MAAMf,MAAM,CAACgB,IAAI,CAACX,SAAS,CAACG,QAAQ,EAAEI,MAAM,CAAC;UACnD;QACJ,KAAK,cAAc;UACfG,GAAG,GAAG,MAAMf,MAAM,CAACgB,IAAI,CAACX,SAAS,CAACG,QAAQ,EAAEI,MAAM,CAAC;UACnD;QACJ,KAAK,cAAc;UACfG,GAAG,GAAG,MAAMd,MAAM,CAACgB,IAAI,CAACZ,SAAS,CAACG,QAAQ,EAAEI,MAAM,CAAC;UACnD;QACJ;UACI,MAAM,IAAId,YAAY,CAACoB,mBAAmB,CAAE,uCAAsCX,GAAI,EAAC,CAAC;MAAC;MAEjG,MAAMY,GAAG,GAAG,MAAMX,QAAQ,CAACY,YAAY,CAACN,MAAM,CAAC;MAC/C,OAAO,IAAIV,GAAG,CAACW,GAAG,EAAEI,GAAG,CAAC;IAC5B,CAAC,CAAC;EACN;EACAE,WAAW,CAACN,GAAG,EAAEI,GAAG,EAAE;IAClB,IAAI,CAACG,IAAI,GAAGP,GAAG;IACf,IAAI,CAACQ,IAAI,GAAGJ,GAAG;IACf,IAAI,CAACK,KAAK,GAAG,IAAIzB,OAAO,CAAC0B,OAAO,EAAE;IAClC,IAAI,CAACC,KAAK,GAAG,IAAI3B,OAAO,CAAC0B,OAAO,EAAE;EACtC;EACA;EACAE,IAAI,CAACC,SAAS,EAAEC,cAAc,EAAE;IAC5B,OAAOxD,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,IAAIwD,cAAc,CAACnB,MAAM,GAAGjB,OAAO,CAACU,mBAAmB,EAAE;QACrD,MAAM,IAAIQ,KAAK,CAAC,yCAAyC,CAAC;MAC9D;MACA;MACA,MAAMmB,YAAY,GAAG/B,OAAO,CAAC0B,OAAO,CAACM,IAAI,GAAGH,SAAS,CAAClB,MAAM;MAC5D,MAAMvB,MAAM,GAAG,IAAI6C,UAAU,CAACF,YAAY,CAAC;MAC3C;MACA,MAAMG,EAAE,GAAG,MAAM,IAAI,CAACC,IAAI,CAACL,cAAc,EAAED,SAAS,CAAC;MACrDzC,MAAM,CAACgD,GAAG,CAACF,EAAE,CAAC;MACd;MACAG,UAAU,CAACH,EAAE,CAAC;MACd9C,MAAM,CAACgD,GAAG,CAAC,MAAM,IAAI,CAACZ,IAAI,CAACc,UAAU,CAACJ,EAAE,EAAEL,SAAS,CAAC,EAAEK,EAAE,CAACvB,MAAM,CAAC;MAChE,OAAOvB,MAAM;IACjB,CAAC,CAAC;EACN;EACA;EACAmD,IAAI,CAACC,MAAM,EAAEV,cAAc,EAAE;IACzB,OAAOxD,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,IAAIwD,cAAc,CAACnB,MAAM,GAAGjB,OAAO,CAACU,mBAAmB,EAAE;QACrD,MAAM,IAAIQ,KAAK,CAAC,yCAAyC,CAAC;MAC9D;MACA,IAAI4B,MAAM,CAAC7B,MAAM,GAAGX,OAAO,CAAC0B,OAAO,CAACM,IAAI,EAAE;QACtC,MAAM,IAAIjC,YAAY,CAAC0C,cAAc,CAAC,kCAAkC,CAAC;MAC7E;MACA;MACA,MAAMC,GAAG,GAAGF,MAAM,CAAC1B,QAAQ,CAAC,CAAC,EAAEd,OAAO,CAAC0B,OAAO,CAACM,IAAI,CAAC;MACpD,MAAME,EAAE,GAAG,IAAI,CAACT,KAAK,CAACkB,IAAI;MAC1BT,EAAE,CAACE,GAAG,CAACM,GAAG,CAAC;MACXL,UAAU,CAACH,EAAE,CAAC;MACd;MACA,MAAM9C,MAAM,GAAG,MAAM,IAAI,CAACoC,IAAI,CAACc,UAAU,CAACJ,EAAE,EAAEM,MAAM,CAAC1B,QAAQ,CAACd,OAAO,CAAC0B,OAAO,CAACM,IAAI,CAAC,CAAC;MACpF;MACA,MAAMY,WAAW,GAAG,MAAM,IAAI,CAACT,IAAI,CAACL,cAAc,EAAE1C,MAAM,CAAC;MAC3D,IAAI,CAACO,eAAe,CAACkD,KAAK,CAACD,WAAW,EAAEF,GAAG,CAAC,EAAE;QAC1C7C,MAAM,CAACiD,IAAI,CAAC1D,MAAM,CAAC;QACnB,MAAM,IAAIW,YAAY,CAAC0C,cAAc,CAAC,2CAA2C,CAAC;MACtF;MACA,OAAOrD,MAAM;IACjB,CAAC,CAAC;EACN;EACA;EACA2D,KAAK,GAAG;IACJ,IAAI,CAACtB,KAAK,CAACsB,KAAK,EAAE;IAClB,IAAI,CAACpB,KAAK,CAACoB,KAAK,EAAE;IAClB,IAAI,CAACvB,IAAI,CAACuB,KAAK,EAAE;IACjB,IAAI,CAACxB,IAAI,CAACwB,KAAK,EAAE;IACjB,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;AACA;EACIZ,IAAI,CAACa,eAAe,EAAEnB,SAAS,EAAE;IAC7B,OAAOvD,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,IAAI,CAACiD,IAAI,CAAC0B,KAAK,EAAE;MACjB,IAAI,CAACxB,KAAK,CAACsB,KAAK,EAAE;MAClB;MACA;MACA;MACA;MACA,MAAM,IAAI,CAACxB,IAAI,CAAC2B,MAAM,CAAC,IAAI,CAACzB,KAAK,CAACkB,IAAI,CAAC;MACvC,IAAI,CAAChB,KAAK,CAACoB,KAAK,EAAE;MAClB,IAAI,CAACpB,KAAK,CAACgB,IAAI,CAACP,GAAG,CAAC,MAAM,IAAI,CAACb,IAAI,CAAC4B,MAAM,EAAE,CAAC;MAC7C,IAAI,CAAC5B,IAAI,CAAC0B,KAAK,EAAE;MACjB,KAAK,MAAMG,EAAE,IAAIJ,eAAe,EAAE;QAC9B,MAAM,IAAI,CAACzB,IAAI,CAAC2B,MAAM,CAACE,EAAE,CAAC;QAC1B,IAAI,CAAC3B,KAAK,CAACsB,KAAK,EAAE;QAClB,IAAI,CAACtB,KAAK,CAACkB,IAAI,CAACP,GAAG,CAAC,MAAM,IAAI,CAACb,IAAI,CAAC4B,MAAM,EAAE,CAAC;QAC7C,IAAI,CAAC5B,IAAI,CAAC0B,KAAK,EAAE;QACjB,IAAI,CAACtB,KAAK,CAAC0B,GAAG,EAAE;QAChBvD,KAAK,CAACwD,GAAG,CAAC,IAAI,CAAC3B,KAAK,CAACgB,IAAI,EAAE,IAAI,CAAClB,KAAK,CAACkB,IAAI,CAAC;MAC/C;MACA,IAAI,CAAClB,KAAK,CAACsB,KAAK,EAAE;MAClB,IAAIlB,SAAS,CAAClB,MAAM,IAAIX,OAAO,CAAC0B,OAAO,CAACM,IAAI,EAAE;QAC1C,MAAMuB,CAAC,GAAG1B,SAAS,CAAClB,MAAM,GAAGX,OAAO,CAAC0B,OAAO,CAACM,IAAI;QACjD,IAAI,CAACP,KAAK,CAACkB,IAAI,CAACP,GAAG,CAACP,SAAS,CAACf,QAAQ,CAACyC,CAAC,CAAC,CAAC;QAC1C,MAAM,IAAI,CAAChC,IAAI,CAAC2B,MAAM,CAACrB,SAAS,CAACf,QAAQ,CAAC,CAAC,EAAEyC,CAAC,CAAC,CAAC;MACpD,CAAC,MACI;QACD,IAAI,CAAC9B,KAAK,CAACkB,IAAI,CAACP,GAAG,CAACP,SAAS,CAAC;QAC9B,IAAI,CAACJ,KAAK,CAACkB,IAAI,CAACd,SAAS,CAAClB,MAAM,CAAC,GAAG,IAAI;QACxC,IAAI,CAACgB,KAAK,CAAC0B,GAAG,EAAE;MACpB;MACAvD,KAAK,CAACwD,GAAG,CAAC,IAAI,CAAC7B,KAAK,CAACkB,IAAI,EAAE,IAAI,CAAChB,KAAK,CAACgB,IAAI,CAAC;MAC3C,MAAM,IAAI,CAACpB,IAAI,CAAC2B,MAAM,CAAC,IAAI,CAACzB,KAAK,CAACkB,IAAI,CAAC;MACvC,OAAO,IAAI,CAACpB,IAAI,CAAC4B,MAAM,EAAE;IAC7B,CAAC,CAAC;EACN;AACJ;AACAzD,OAAO,CAACW,GAAG,GAAGA,GAAG;AACjB;AACA,SAASgC,UAAU,CAACH,EAAE,EAAE;EACpB;EACA;EACA;EACAA,EAAE,CAACA,EAAE,CAACvB,MAAM,GAAG,CAAC,CAAC,IAAI,IAAI;EACzBuB,EAAE,CAACA,EAAE,CAACvB,MAAM,GAAG,CAAC,CAAC,IAAI,IAAI;AAC7B"},"metadata":{},"sourceType":"script","externalDependencies":[]}