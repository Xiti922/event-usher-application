{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WalletManagerProvider = void 0;\nconst tslib_1 = require(\"tslib\");\nconst react_1 = tslib_1.__importStar(require(\"react\"));\nconst connectors_1 = require(\"../connectors\");\nconst types_1 = require(\"../types\");\nconst utils_1 = require(\"../utils\");\nconst ui_1 = require(\"./ui\");\nconst WalletManagerContext_1 = require(\"./WalletManagerContext\");\nconst WalletManagerProvider = _ref => {\n  let {\n    children,\n    enabledWalletTypes,\n    defaultChainId,\n    chainInfoOverrides,\n    classNames,\n    closeIcon,\n    renderLoader,\n    walletConnectClientMeta,\n    preselectedWalletType,\n    localStorageKey,\n    onKeplrKeystoreChangeEvent,\n    getSigningCosmWasmClientOptions,\n    getSigningStargateClientOptions,\n    showEnablingModalOnAutoconnect = false\n  } = _ref;\n  //! STATE\n  const enabledWallets = (0, react_1.useMemo)(() => utils_1.Wallets.filter(_ref2 => {\n    let {\n      type\n    } = _ref2;\n    return enabledWalletTypes.includes(type);\n  }), [enabledWalletTypes]);\n  const [isEmbeddedKeplrMobileWeb, setIsEmbeddedKeplrMobileWeb] = (0, react_1.useState)(false);\n  // Modal State\n  const [pickerModalOpen, setPickerModalOpen] = (0, react_1.useState)(false);\n  const [walletEnableModalOpen, setWalletEnableModalOpen] = (0, react_1.useState)(false);\n  // If set, opens QR code modal.\n  const [walletConnectUri, setWalletConnectUri] = (0, react_1.useState)();\n  // WalletConnect State\n  const [walletConnect, setWalletConnect] = (0, react_1.useState)();\n  // Call when closing QR code modal manually.\n  const onQrCloseCallback = (0, react_1.useRef)();\n  // Wallet connection State\n  const [connectedWallet, setConnectedWallet] = (0, react_1.useState)();\n  const [error, setError] = (0, react_1.useState)();\n  // Once mobile web is checked, we are ready to auto-connect.\n  const [status, setStatus] = (0, react_1.useState)(types_1.WalletConnectionStatus.Initializing);\n  // If is autoconnecting. This should be true when autoconnecting, to be used\n  // to hide the enabling modal on first connection.\n  const [isAutoconnecting, setIsAutoconnecting] = (0, react_1.useState)(false);\n  // In case WalletConnect fails to load, we need to be able to retry.\n  // This is done through clicking reset on the WalletConnectModal.\n  const [connectingWallet, setConnectingWallet] = (0, react_1.useState)();\n  const connectionAttemptRef = (0, react_1.useRef)(0);\n  // Reset connection when it gets stuck somewhere.\n  const [connectToWalletUponReset, setConnectToWalletUponReset] = (0, react_1.useState)();\n  //! CALLBACKS\n  // Retrieve chain info for initial wallet connection, throwing error if\n  // not found.\n  const _getDefaultChainInfo = (0, react_1.useCallback)(() => tslib_1.__awaiter(void 0, void 0, void 0, function* () {\n    return yield (0, utils_1.getChainInfo)(defaultChainId, chainInfoOverrides);\n  }), [defaultChainId, chainInfoOverrides]);\n  // Closes modals and clears connection state.\n  const _cleanupAfterConnection = (0, react_1.useCallback)(walletClient => {\n    // Close modals.\n    setPickerModalOpen(false);\n    setWalletConnectUri(undefined);\n    setWalletEnableModalOpen(false);\n    // Allow future enable requests to open the app.\n    if (walletClient instanceof connectors_1.KeplrWalletConnectV1) {\n      walletClient.dontOpenAppOnEnable = false;\n    }\n    // No longer connecting a wallet.\n    setConnectingWallet(undefined);\n    // No longer autoconnecting.\n    setIsAutoconnecting(false);\n  }, []);\n  // Disconnect from connected wallet.\n  const disconnect = (0, react_1.useCallback)(dontKillWalletConnect => tslib_1.__awaiter(void 0, void 0, void 0, function* () {\n    // Disconnect wallet.\n    setConnectedWallet(undefined);\n    setStatus(types_1.WalletConnectionStatus.ReadyForConnection);\n    // Remove localStorage value.\n    if (localStorageKey) {\n      localStorage.removeItem(localStorageKey);\n    }\n    // Disconnect WalletConnect.\n    setWalletConnect(undefined);\n    if ((walletConnect === null || walletConnect === void 0 ? void 0 : walletConnect.connected) && !dontKillWalletConnect) {\n      yield walletConnect.killSession();\n    }\n  }), [localStorageKey, walletConnect]);\n  // Obtain WalletConnect if necessary, and connect to the wallet.\n  const _connectToWallet = (0, react_1.useCallback)(wallet => tslib_1.__awaiter(void 0, void 0, void 0, function* () {\n    setStatus(types_1.WalletConnectionStatus.Connecting);\n    setError(undefined);\n    setConnectingWallet(wallet);\n    setPickerModalOpen(false);\n    let walletClient;\n    let _walletConnect = walletConnect;\n    // The actual meat of enabling and getting the wallet clients.\n    const finalizeWalletConnection = newWcSession => tslib_1.__awaiter(void 0, void 0, void 0, function* () {\n      // Cleared in `cleanupAfterConnection`.\n      setWalletEnableModalOpen(true);\n      const chainInfo = yield _getDefaultChainInfo();\n      walletClient = yield wallet.getClient(chainInfo, _walletConnect);\n      if (!walletClient) {\n        throw new Error(\"Failed to retrieve wallet client.\");\n      }\n      // Prevent double app open request.\n      if (walletClient instanceof connectors_1.KeplrWalletConnectV1) {\n        walletClient.dontOpenAppOnEnable = !!newWcSession;\n      }\n      // Save connected wallet data.\n      setConnectedWallet(yield (0, utils_1.getConnectedWalletInfo)(wallet, walletClient, chainInfo, yield getSigningCosmWasmClientOptions === null || getSigningCosmWasmClientOptions === void 0 ? void 0 : getSigningCosmWasmClientOptions(chainInfo), yield getSigningStargateClientOptions === null || getSigningStargateClientOptions === void 0 ? void 0 : getSigningStargateClientOptions(chainInfo)));\n      // Save localStorage value.\n      if (localStorageKey) {\n        localStorage.setItem(localStorageKey, wallet.type);\n      }\n      setStatus(types_1.WalletConnectionStatus.Connected);\n    });\n    try {\n      // Connect to WalletConnect if necessary.\n      if (wallet.type === types_1.WalletType.WalletConnectKeplr) {\n        // Instantiate new WalletConnect instance if necessary.\n        if (!_walletConnect) {\n          _walletConnect = new (yield Promise.resolve().then(() => tslib_1.__importStar(require(\"@walletconnect/client\")))).default({\n            bridge: \"https://bridge.walletconnect.org\",\n            signingMethods: [\"keplr_enable_wallet_connect_v1\", \"keplr_sign_amino_wallet_connect_v1\"],\n            qrcodeModal: {\n              open: (uri, cb) => {\n                // Open QR modal by setting URI.\n                setWalletConnectUri(uri);\n                onQrCloseCallback.current = cb;\n              },\n              // Occurs on disconnect, which is handled elsewhere.\n              close: () => console.log(\"qrcodeModal.close\")\n            }\n            // clientMeta,\n          });\n          // clientMeta in constructor is ignored for some reason, so\n          // let's set it directly :)))))))))))))\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-ignore\n          _walletConnect._clientMeta = walletConnectClientMeta;\n          setWalletConnect(_walletConnect);\n        }\n        if (_walletConnect.connected) {\n          // WalletConnect already connected, nothing to do.\n          yield finalizeWalletConnection();\n        } else {\n          // Prevent double requests by checking which connection attempt\n          // we're on before and after starting the connection attempt.\n          const currConnectionAttempt = ++connectionAttemptRef.current;\n          // Executes walletConnect's qrcodeModal.open.\n          yield _walletConnect.connect();\n          // If another connection attempt is being made, don't try to\n          // enable if connect finishes. This prevents double requests.\n          if (connectionAttemptRef.current !== currConnectionAttempt) {\n            return;\n          }\n          // Connect with new WalletConnect session.\n          yield finalizeWalletConnection(true);\n        }\n      } else {\n        // No WalletConnect needed.\n        yield finalizeWalletConnection();\n      }\n    } catch (err) {\n      console.error(err);\n      setError(err);\n      setStatus(types_1.WalletConnectionStatus.Errored);\n    } finally {\n      _cleanupAfterConnection(walletClient);\n    }\n  }), [walletConnect, _getDefaultChainInfo, getSigningCosmWasmClientOptions, getSigningStargateClientOptions, localStorageKey, walletConnectClientMeta, _cleanupAfterConnection]);\n  // Begin connection process, either auto-selecting a wallet or opening\n  // the selection modal.\n  const beginConnection = (0, react_1.useCallback)(() => {\n    // We need to check if we are in the embedded Keplr Mobile web before\n    // connecting, since we will force the embedded Keplr wallet if\n    // possible. This will only happen if `connect` is called very quickly\n    // without waiting for `state` to reach at least\n    // `State.AttemptingAutoConnection`, though ideally `connect` is only\n    // called once `state` reaches `State.ReadyForConnection`.\n    // TODO: Add some docs about this.\n    if (status === types_1.WalletConnectionStatus.Initializing) {\n      throw new Error(\"Cannot connect while initializing.\");\n    }\n    setStatus(types_1.WalletConnectionStatus.Connecting);\n    setError(undefined);\n    const automaticWalletType = preselectedWalletType ||\n    // Try to fetch value from localStorage.\n    localStorageKey && localStorage.getItem(localStorageKey) || undefined;\n    const skipModalWallet =\n    // Mobile web mode takes precedence over automatic wallet.\n    isEmbeddedKeplrMobileWeb ? utils_1.KeplrWallet :\n    // If only one wallet is available, skip the modal and use it.\n    enabledWallets.length === 1 ? enabledWallets[0] :\n    // Try to find the wallet to automatically connect to if present.\n    automaticWalletType ? enabledWallets.find(_ref3 => {\n      let {\n        type\n      } = _ref3;\n      return type === automaticWalletType;\n    }) : undefined;\n    if (skipModalWallet) {\n      _connectToWallet(skipModalWallet);\n      return;\n    }\n    // No longer autoconnecting if opening modal.\n    setIsAutoconnecting(false);\n    // If no default wallet, open modal to choose one.\n    setPickerModalOpen(true);\n  }, [status, preselectedWalletType, localStorageKey, isEmbeddedKeplrMobileWeb, enabledWallets, _connectToWallet]);\n  // Initiate reset.\n  const _reset = (0, react_1.useCallback)(() => tslib_1.__awaiter(void 0, void 0, void 0, function* () {\n    yield disconnect().catch(console.error);\n    // Set after disconnect, since disconnect sets state to\n    // ReadyForConnection.\n    setStatus(types_1.WalletConnectionStatus.Resetting);\n    // Try resetting all wallet state and reconnecting.\n    if (connectingWallet) {\n      setConnectToWalletUponReset(connectingWallet);\n      _cleanupAfterConnection();\n    } else {\n      // If no wallet to reconnect to, just reload.\n      window.location.reload();\n    }\n  }), [_cleanupAfterConnection, connectingWallet, disconnect]);\n  //! EFFECTS\n  // Detect if in embedded Keplr Mobile browser, and set ready after.\n  (0, react_1.useEffect)(() => {\n    if (status !== types_1.WalletConnectionStatus.Initializing ||\n    // Only run this on a browser.\n    typeof window === \"undefined\") {\n      return;\n    }\n    Promise.resolve().then(() => tslib_1.__importStar(require(\"@keplr-wallet/stores\"))).then(_ref4 => {\n      let {\n        getKeplrFromWindow\n      } = _ref4;\n      return getKeplrFromWindow();\n    }).then(keplr => keplr && keplr.mode === \"mobile-web\" && setIsEmbeddedKeplrMobileWeb(true)).finally(() => setStatus(types_1.WalletConnectionStatus.AttemptingAutoConnection));\n  }, [status]);\n  // Auto connect on mount handler, after the above mobile web check.\n  (0, react_1.useEffect)(() => {\n    if (status !== types_1.WalletConnectionStatus.AttemptingAutoConnection ||\n    // Only run this on a browser.\n    typeof localStorage === \"undefined\") {\n      return;\n    }\n    setStatus(types_1.WalletConnectionStatus.ReadyForConnection);\n    if (\n    // If inside Keplr mobile web, auto connect.\n    isEmbeddedKeplrMobileWeb ||\n    // If localStorage value present, auto connect.\n    localStorageKey && !!localStorage.getItem(localStorageKey)) {\n      setIsAutoconnecting(true);\n      beginConnection();\n    }\n  }, [status, beginConnection, isEmbeddedKeplrMobileWeb, localStorageKey]);\n  // Execute onQrCloseCallback if WalletConnect URI is cleared, since it\n  // has now been closed.\n  (0, react_1.useEffect)(() => {\n    var _a;\n    if (!walletConnectUri && onQrCloseCallback) {\n      (_a = onQrCloseCallback.current) === null || _a === void 0 ? void 0 : _a.call(onQrCloseCallback);\n      onQrCloseCallback.current = undefined;\n    }\n  }, [walletConnectUri, onQrCloseCallback]);\n  // Attempt reconnecting to a wallet after resetting if we have set a\n  // wallet to select after resetting.\n  (0, react_1.useEffect)(() => {\n    if (status === types_1.WalletConnectionStatus.Resetting && !connectingWallet && connectToWalletUponReset) {\n      setConnectToWalletUponReset(undefined);\n      // Updates state to Connecting.\n      _connectToWallet(connectToWalletUponReset);\n    }\n  }, [connectingWallet, status, _connectToWallet, connectToWalletUponReset]);\n  // WalletConnect disconnect listener.\n  (0, react_1.useEffect)(() => {\n    if (!walletConnect) {\n      return;\n    }\n    // Detect disconnected WC session and clear wallet state.\n    walletConnect.on(\"disconnect\", () => {\n      console.log(\"WalletConnect disconnected.\");\n      disconnect(true);\n      _cleanupAfterConnection();\n    });\n  }, [_cleanupAfterConnection, disconnect, walletConnect]);\n  // keplr_keystorechange event listener.\n  (0, react_1.useEffect)(() => {\n    if (\n    // Only run this on a browser.\n    typeof window === \"undefined\") {\n      return;\n    }\n    const listener = event => tslib_1.__awaiter(void 0, void 0, void 0, function* () {\n      // Reconnect to wallet, since name/address may have changed.\n      if (status === types_1.WalletConnectionStatus.Connected && connectedWallet) {\n        _connectToWallet(connectedWallet.wallet);\n      }\n      // Execute callback if passed.\n      onKeplrKeystoreChangeEvent === null || onKeplrKeystoreChangeEvent === void 0 ? void 0 : onKeplrKeystoreChangeEvent(event);\n    });\n    // Add event listener.\n    window.addEventListener(\"keplr_keystorechange\", listener);\n    // Remove event listener on clean up.\n    return () => {\n      window.removeEventListener(\"keplr_keystorechange\", listener);\n    };\n  }, [onKeplrKeystoreChangeEvent, connectedWallet, status, _connectToWallet]);\n  // Memoize context data.\n  const value = (0, react_1.useMemo)(() => ({\n    connect: beginConnection,\n    disconnect,\n    connectedWallet,\n    status,\n    connected: status === types_1.WalletConnectionStatus.Connected,\n    error,\n    isEmbeddedKeplrMobileWeb,\n    chainInfoOverrides,\n    getSigningCosmWasmClientOptions,\n    getSigningStargateClientOptions\n  }), [beginConnection, chainInfoOverrides, connectedWallet, disconnect, error, getSigningCosmWasmClientOptions, getSigningStargateClientOptions, isEmbeddedKeplrMobileWeb, status]);\n  return react_1.default.createElement(WalletManagerContext_1.WalletManagerContext.Provider, {\n    value: value\n  }, children, status !== types_1.WalletConnectionStatus.Resetting && pickerModalOpen && react_1.default.createElement(ui_1.SelectWalletModal, {\n    classNames: classNames,\n    closeIcon: closeIcon,\n    isOpen: true,\n    onClose: () => setPickerModalOpen(false),\n    selectWallet: _connectToWallet,\n    wallets: enabledWallets\n  }), status !== types_1.WalletConnectionStatus.Resetting && !!walletConnectUri && react_1.default.createElement(ui_1.WalletConnectModal, {\n    classNames: classNames,\n    closeIcon: closeIcon,\n    isOpen: true,\n    onClose: () => disconnect().finally(_cleanupAfterConnection),\n    reset: _reset,\n    uri: walletConnectUri\n  }), status !== types_1.WalletConnectionStatus.Resetting && (\n  // Don't show enabling modal on autoconnect attempt (first try when load\n  // page likely), unless overridden from prop.\n  !isAutoconnecting || showEnablingModalOnAutoconnect) && walletEnableModalOpen && react_1.default.createElement(ui_1.EnablingWalletModal, {\n    classNames: classNames,\n    closeIcon: closeIcon,\n    isOpen: true,\n    onClose: () => setWalletEnableModalOpen(false),\n    renderLoader: renderLoader,\n    reset: _reset\n  }), status === types_1.WalletConnectionStatus.Resetting && react_1.default.createElement(ui_1.BaseModal, {\n    classNames: classNames,\n    isOpen: true,\n    maxWidth: \"24rem\",\n    title: \"Resetting...\"\n  }, renderLoader === null || renderLoader === void 0 ? void 0 : renderLoader()));\n};\nexports.WalletManagerProvider = WalletManagerProvider;","map":{"version":3,"mappings":"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","names":["WalletManagerProvider","children","enabledWalletTypes","defaultChainId","chainInfoOverrides","classNames","closeIcon","renderLoader","walletConnectClientMeta","preselectedWalletType","localStorageKey","onKeplrKeystoreChangeEvent","getSigningCosmWasmClientOptions","getSigningStargateClientOptions","showEnablingModalOnAutoconnect","enabledWallets","utils_1","filter","type","includes","isEmbeddedKeplrMobileWeb","setIsEmbeddedKeplrMobileWeb","pickerModalOpen","setPickerModalOpen","walletEnableModalOpen","setWalletEnableModalOpen","walletConnectUri","setWalletConnectUri","walletConnect","setWalletConnect","onQrCloseCallback","connectedWallet","setConnectedWallet","error","setError","status","setStatus","types_1","Initializing","isAutoconnecting","setIsAutoconnecting","connectingWallet","setConnectingWallet","connectionAttemptRef","connectToWalletUponReset","setConnectToWalletUponReset","_getDefaultChainInfo","tslib_1","_cleanupAfterConnection","walletClient","undefined","connectors_1","dontOpenAppOnEnable","disconnect","dontKillWalletConnect","ReadyForConnection","localStorage","removeItem","connected","killSession","_connectToWallet","wallet","Connecting","_walletConnect","finalizeWalletConnection","newWcSession","chainInfo","getClient","Error","setItem","Connected","WalletConnectKeplr","default","bridge","signingMethods","qrcodeModal","open","uri","cb","current","close","console","log","_clientMeta","currConnectionAttempt","connect","err","Errored","beginConnection","automaticWalletType","getItem","skipModalWallet","length","find","_reset","catch","Resetting","window","location","reload","Promise","then","getKeplrFromWindow","keplr","mode","finally","AttemptingAutoConnection","on","listener","event","addEventListener","removeEventListener","value","react_1","WalletManagerContext_1","Provider","ui_1","isOpen","onClose","selectWallet","wallets","reset","maxWidth","title","exports"],"sources":["../../src/components/WalletManagerProvider.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}