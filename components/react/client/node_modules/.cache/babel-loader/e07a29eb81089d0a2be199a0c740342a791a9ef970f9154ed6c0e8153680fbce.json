{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DirectSecp256k1HdWallet = void 0;\nconst crypto_1 = require(\"@cosmjs/crypto\");\nconst launchpad_1 = require(\"@cosmjs/launchpad\");\nconst paths_1 = require(\"./paths\");\nconst signing_1 = require(\"./signing\");\n/** A wallet for protobuf based signing using SIGN_MODE_DIRECT */\nclass DirectSecp256k1HdWallet {\n  constructor(mnemonic, hdPath, privkey, pubkey, prefix) {\n    this.secret = mnemonic;\n    this.accounts = [{\n      hdPath: hdPath,\n      prefix: prefix\n    }];\n    this.privkey = privkey;\n    this.pubkey = pubkey;\n  }\n  /**\n   * Restores a wallet from the given BIP39 mnemonic.\n   *\n   * @param mnemonic Any valid English mnemonic.\n   * @param hdPath The BIP-32/SLIP-10 derivation path. Defaults to the Cosmos Hub/ATOM path `m/44'/118'/0'/0/0`.\n   * @param prefix The bech32 address prefix (human readable part). Defaults to \"cosmos\".\n   */\n  static async fromMnemonic(mnemonic) {\n    let hdPath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : paths_1.makeCosmoshubPath(0);\n    let prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"cosmos\";\n    const mnemonicChecked = new crypto_1.EnglishMnemonic(mnemonic);\n    const seed = await crypto_1.Bip39.mnemonicToSeed(mnemonicChecked);\n    const {\n      privkey\n    } = crypto_1.Slip10.derivePath(crypto_1.Slip10Curve.Secp256k1, seed, hdPath);\n    const uncompressed = (await crypto_1.Secp256k1.makeKeypair(privkey)).pubkey;\n    return new DirectSecp256k1HdWallet(mnemonicChecked, hdPath, privkey, crypto_1.Secp256k1.compressPubkey(uncompressed), prefix);\n  }\n  /**\n   * Generates a new wallet with a BIP39 mnemonic of the given length.\n   *\n   * @param length The number of words in the mnemonic (12, 15, 18, 21 or 24).\n   * @param hdPath The BIP-32/SLIP-10 derivation path. Defaults to the Cosmos Hub/ATOM path `m/44'/118'/0'/0/0`.\n   * @param prefix The bech32 address prefix (human readable part). Defaults to \"cosmos\".\n   */\n  static async generate() {\n    let length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 12;\n    let hdPath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : paths_1.makeCosmoshubPath(0);\n    let prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"cosmos\";\n    const entropyLength = 4 * Math.floor(11 * length / 33);\n    const entropy = crypto_1.Random.getBytes(entropyLength);\n    const mnemonic = crypto_1.Bip39.encode(entropy);\n    return DirectSecp256k1HdWallet.fromMnemonic(mnemonic.toString(), hdPath, prefix);\n  }\n  get mnemonic() {\n    return this.secret.toString();\n  }\n  get address() {\n    return launchpad_1.rawSecp256k1PubkeyToAddress(this.pubkey, this.accounts[0].prefix);\n  }\n  async getAccounts() {\n    return [{\n      algo: \"secp256k1\",\n      address: this.address,\n      pubkey: this.pubkey\n    }];\n  }\n  async signDirect(address, signDoc) {\n    const signBytes = signing_1.makeSignBytes(signDoc);\n    if (address !== this.address) {\n      throw new Error(`Address ${address} not found in wallet`);\n    }\n    const hashedMessage = crypto_1.sha256(signBytes);\n    const signature = await crypto_1.Secp256k1.createSignature(hashedMessage, this.privkey);\n    const signatureBytes = new Uint8Array([...signature.r(32), ...signature.s(32)]);\n    const stdSignature = launchpad_1.encodeSecp256k1Signature(this.pubkey, signatureBytes);\n    return {\n      signed: signDoc,\n      signature: stdSignature\n    };\n  }\n}\nexports.DirectSecp256k1HdWallet = DirectSecp256k1HdWallet;","map":{"version":3,"mappings":"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","names":["DirectSecp256k1HdWallet","constructor","mnemonic","hdPath","privkey","pubkey","prefix","secret","accounts","fromMnemonic","paths_1","mnemonicChecked","crypto_1","seed","mnemonicToSeed","derivePath","Secp256k1","uncompressed","makeKeypair","compressPubkey","generate","length","entropyLength","Math","floor","entropy","getBytes","encode","toString","address","launchpad_1","getAccounts","algo","signDirect","signDoc","signBytes","signing_1","Error","hashedMessage","signature","createSignature","signatureBytes","Uint8Array","r","s","stdSignature","signed","exports"],"sources":["../src/directsecp256k1hdwallet.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}