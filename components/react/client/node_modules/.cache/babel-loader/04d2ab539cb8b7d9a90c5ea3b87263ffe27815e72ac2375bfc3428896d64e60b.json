{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Secp256k1HdWallet = exports.extractKdfConfiguration = void 0;\nconst crypto_1 = require(\"@cosmjs/crypto\");\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst utils_1 = require(\"@cosmjs/utils\");\nconst addresses_1 = require(\"./addresses\");\nconst paths_1 = require(\"./paths\");\nconst signature_1 = require(\"./signature\");\nconst signdoc_1 = require(\"./signdoc\");\nconst wallet_1 = require(\"./wallet\");\nconst serializationTypeV1 = \"secp256k1wallet-v1\";\n/**\n * A KDF configuration that is not very strong but can be used on the main thread.\n * It takes about 1 second in Node.js 16.0.0 and should have similar runtimes in other modern Wasm hosts.\n */\nconst basicPasswordHashingOptions = {\n  algorithm: \"argon2id\",\n  params: {\n    outputLength: 32,\n    opsLimit: 24,\n    memLimitKib: 12 * 1024\n  }\n};\nfunction isDerivationJson(thing) {\n  if (!(0, utils_1.isNonNullObject)(thing)) return false;\n  if (typeof thing.hdPath !== \"string\") return false;\n  if (typeof thing.prefix !== \"string\") return false;\n  return true;\n}\nfunction extractKdfConfigurationV1(doc) {\n  return doc.kdf;\n}\nfunction extractKdfConfiguration(serialization) {\n  const root = JSON.parse(serialization);\n  if (!(0, utils_1.isNonNullObject)(root)) throw new Error(\"Root document is not an object.\");\n  switch (root.type) {\n    case serializationTypeV1:\n      return extractKdfConfigurationV1(root);\n    default:\n      throw new Error(\"Unsupported serialization type\");\n  }\n}\nexports.extractKdfConfiguration = extractKdfConfiguration;\nconst defaultOptions = {\n  bip39Password: \"\",\n  hdPaths: [(0, paths_1.makeCosmoshubPath)(0)],\n  prefix: \"cosmos\"\n};\nclass Secp256k1HdWallet {\n  constructor(mnemonic, options) {\n    var _a, _b;\n    const hdPaths = (_a = options.hdPaths) !== null && _a !== void 0 ? _a : defaultOptions.hdPaths;\n    const prefix = (_b = options.prefix) !== null && _b !== void 0 ? _b : defaultOptions.prefix;\n    this.secret = mnemonic;\n    this.seed = options.seed;\n    this.accounts = hdPaths.map(hdPath => ({\n      hdPath: hdPath,\n      prefix\n    }));\n  }\n  /**\n   * Restores a wallet from the given BIP39 mnemonic.\n   *\n   * @param mnemonic Any valid English mnemonic.\n   * @param options An optional `Secp256k1HdWalletOptions` object optionally containing a bip39Password, hdPaths, and prefix.\n   */\n  static async fromMnemonic(mnemonic) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const mnemonicChecked = new crypto_1.EnglishMnemonic(mnemonic);\n    const seed = await crypto_1.Bip39.mnemonicToSeed(mnemonicChecked, options.bip39Password);\n    return new Secp256k1HdWallet(mnemonicChecked, {\n      ...options,\n      seed: seed\n    });\n  }\n  /**\n   * Generates a new wallet with a BIP39 mnemonic of the given length.\n   *\n   * @param length The number of words in the mnemonic (12, 15, 18, 21 or 24).\n   * @param options An optional `Secp256k1HdWalletOptions` object optionally containing a bip39Password, hdPaths, and prefix.\n   */\n  static async generate() {\n    let length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 12;\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const entropyLength = 4 * Math.floor(11 * length / 33);\n    const entropy = crypto_1.Random.getBytes(entropyLength);\n    const mnemonic = crypto_1.Bip39.encode(entropy);\n    return Secp256k1HdWallet.fromMnemonic(mnemonic.toString(), options);\n  }\n  /**\n   * Restores a wallet from an encrypted serialization.\n   *\n   * @param password The user provided password used to generate an encryption key via a KDF.\n   *                 This is not normalized internally (see \"Unicode normalization\" to learn more).\n   */\n  static async deserialize(serialization, password) {\n    const root = JSON.parse(serialization);\n    if (!(0, utils_1.isNonNullObject)(root)) throw new Error(\"Root document is not an object.\");\n    switch (root.type) {\n      case serializationTypeV1:\n        return Secp256k1HdWallet.deserializeTypeV1(serialization, password);\n      default:\n        throw new Error(\"Unsupported serialization type\");\n    }\n  }\n  /**\n   * Restores a wallet from an encrypted serialization.\n   *\n   * This is an advanced alternative to calling `deserialize(serialization, password)` directly, which allows\n   * you to offload the KDF execution to a non-UI thread (e.g. in a WebWorker).\n   *\n   * The caller is responsible for ensuring the key was derived with the given KDF configuration. This can be\n   * done using `extractKdfConfiguration(serialization)` and `executeKdf(password, kdfConfiguration)` from this package.\n   */\n  static async deserializeWithEncryptionKey(serialization, encryptionKey) {\n    const root = JSON.parse(serialization);\n    if (!(0, utils_1.isNonNullObject)(root)) throw new Error(\"Root document is not an object.\");\n    const untypedRoot = root;\n    switch (untypedRoot.type) {\n      case serializationTypeV1:\n        {\n          const decryptedBytes = await (0, wallet_1.decrypt)((0, encoding_1.fromBase64)(untypedRoot.data), encryptionKey, untypedRoot.encryption);\n          const decryptedDocument = JSON.parse((0, encoding_1.fromUtf8)(decryptedBytes));\n          const {\n            mnemonic,\n            accounts\n          } = decryptedDocument;\n          (0, utils_1.assert)(typeof mnemonic === \"string\");\n          if (!Array.isArray(accounts)) throw new Error(\"Property 'accounts' is not an array\");\n          if (!accounts.every(account => isDerivationJson(account))) {\n            throw new Error(\"Account is not in the correct format.\");\n          }\n          const firstPrefix = accounts[0].prefix;\n          if (!accounts.every(_ref => {\n            let {\n              prefix\n            } = _ref;\n            return prefix === firstPrefix;\n          })) {\n            throw new Error(\"Accounts do not all have the same prefix\");\n          }\n          const hdPaths = accounts.map(_ref2 => {\n            let {\n              hdPath\n            } = _ref2;\n            return (0, crypto_1.stringToPath)(hdPath);\n          });\n          return Secp256k1HdWallet.fromMnemonic(mnemonic, {\n            hdPaths: hdPaths,\n            prefix: firstPrefix\n          });\n        }\n      default:\n        throw new Error(\"Unsupported serialization type\");\n    }\n  }\n  static async deserializeTypeV1(serialization, password) {\n    const root = JSON.parse(serialization);\n    if (!(0, utils_1.isNonNullObject)(root)) throw new Error(\"Root document is not an object.\");\n    const encryptionKey = await (0, wallet_1.executeKdf)(password, root.kdf);\n    return Secp256k1HdWallet.deserializeWithEncryptionKey(serialization, encryptionKey);\n  }\n  get mnemonic() {\n    return this.secret.toString();\n  }\n  async getAccounts() {\n    const accountsWithPrivkeys = await this.getAccountsWithPrivkeys();\n    return accountsWithPrivkeys.map(_ref3 => {\n      let {\n        algo,\n        pubkey,\n        address\n      } = _ref3;\n      return {\n        algo: algo,\n        pubkey: pubkey,\n        address: address\n      };\n    });\n  }\n  async signAmino(signerAddress, signDoc) {\n    const accounts = await this.getAccountsWithPrivkeys();\n    const account = accounts.find(_ref4 => {\n      let {\n        address\n      } = _ref4;\n      return address === signerAddress;\n    });\n    if (account === undefined) {\n      throw new Error(`Address ${signerAddress} not found in wallet`);\n    }\n    const {\n      privkey,\n      pubkey\n    } = account;\n    const message = (0, crypto_1.sha256)((0, signdoc_1.serializeSignDoc)(signDoc));\n    const signature = await crypto_1.Secp256k1.createSignature(message, privkey);\n    const signatureBytes = new Uint8Array([...signature.r(32), ...signature.s(32)]);\n    return {\n      signed: signDoc,\n      signature: (0, signature_1.encodeSecp256k1Signature)(pubkey, signatureBytes)\n    };\n  }\n  /**\n   * Generates an encrypted serialization of this wallet.\n   *\n   * @param password The user provided password used to generate an encryption key via a KDF.\n   *                 This is not normalized internally (see \"Unicode normalization\" to learn more).\n   */\n  async serialize(password) {\n    const kdfConfiguration = basicPasswordHashingOptions;\n    const encryptionKey = await (0, wallet_1.executeKdf)(password, kdfConfiguration);\n    return this.serializeWithEncryptionKey(encryptionKey, kdfConfiguration);\n  }\n  /**\n   * Generates an encrypted serialization of this wallet.\n   *\n   * This is an advanced alternative to calling `serialize(password)` directly, which allows you to\n   * offload the KDF execution to a non-UI thread (e.g. in a WebWorker).\n   *\n   * The caller is responsible for ensuring the key was derived with the given KDF options. If this\n   * is not the case, the wallet cannot be restored with the original password.\n   */\n  async serializeWithEncryptionKey(encryptionKey, kdfConfiguration) {\n    const dataToEncrypt = {\n      mnemonic: this.mnemonic,\n      accounts: this.accounts.map(_ref5 => {\n        let {\n          hdPath,\n          prefix\n        } = _ref5;\n        return {\n          hdPath: (0, crypto_1.pathToString)(hdPath),\n          prefix: prefix\n        };\n      })\n    };\n    const dataToEncryptRaw = (0, encoding_1.toUtf8)(JSON.stringify(dataToEncrypt));\n    const encryptionConfiguration = {\n      algorithm: wallet_1.supportedAlgorithms.xchacha20poly1305Ietf\n    };\n    const encryptedData = await (0, wallet_1.encrypt)(dataToEncryptRaw, encryptionKey, encryptionConfiguration);\n    const out = {\n      type: serializationTypeV1,\n      kdf: kdfConfiguration,\n      encryption: encryptionConfiguration,\n      data: (0, encoding_1.toBase64)(encryptedData)\n    };\n    return JSON.stringify(out);\n  }\n  async getKeyPair(hdPath) {\n    const {\n      privkey\n    } = crypto_1.Slip10.derivePath(crypto_1.Slip10Curve.Secp256k1, this.seed, hdPath);\n    const {\n      pubkey\n    } = await crypto_1.Secp256k1.makeKeypair(privkey);\n    return {\n      privkey: privkey,\n      pubkey: crypto_1.Secp256k1.compressPubkey(pubkey)\n    };\n  }\n  async getAccountsWithPrivkeys() {\n    return Promise.all(this.accounts.map(async _ref6 => {\n      let {\n        hdPath,\n        prefix\n      } = _ref6;\n      const {\n        privkey,\n        pubkey\n      } = await this.getKeyPair(hdPath);\n      const address = (0, encoding_1.toBech32)(prefix, (0, addresses_1.rawSecp256k1PubkeyToRawAddress)(pubkey));\n      return {\n        algo: \"secp256k1\",\n        privkey: privkey,\n        pubkey: pubkey,\n        address: address\n      };\n    }));\n  }\n}\nexports.Secp256k1HdWallet = Secp256k1HdWallet;","map":{"version":3,"mappings":"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","names":["serializationTypeV1","basicPasswordHashingOptions","algorithm","params","outputLength","opsLimit","memLimitKib","isDerivationJson","thing","hdPath","prefix","extractKdfConfigurationV1","doc","kdf","extractKdfConfiguration","serialization","root","JSON","parse","Error","type","exports","defaultOptions","bip39Password","hdPaths","Secp256k1HdWallet","constructor","mnemonic","options","secret","seed","accounts","map","fromMnemonic","mnemonicChecked","crypto_1","mnemonicToSeed","generate","length","entropyLength","Math","floor","entropy","getBytes","encode","toString","deserialize","password","deserializeTypeV1","deserializeWithEncryptionKey","encryptionKey","untypedRoot","decryptedBytes","data","encryption","decryptedDocument","Array","isArray","every","account","firstPrefix","getAccounts","accountsWithPrivkeys","getAccountsWithPrivkeys","algo","pubkey","address","signAmino","signerAddress","signDoc","find","undefined","privkey","message","signature","createSignature","signatureBytes","Uint8Array","r","s","signed","serialize","kdfConfiguration","serializeWithEncryptionKey","dataToEncrypt","dataToEncryptRaw","stringify","encryptionConfiguration","wallet_1","xchacha20poly1305Ietf","encryptedData","out","getKeyPair","derivePath","Secp256k1","makeKeypair","compressPubkey","Promise","all"],"sources":["../src/secp256k1hdwallet.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}