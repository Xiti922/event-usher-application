{"ast":null,"code":"\"use strict\";\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst encoding_1 = require(\"@iov/encoding\");\nconst bip39 = __importStar(require(\"bip39\"));\nconst pbkdf2_1 = require(\"pbkdf2\");\nconst unorm = __importStar(require(\"unorm\"));\nconst englishmnemonic_1 = require(\"./englishmnemonic\");\nclass Bip39 {\n  static encode(entropy) {\n    const allowedEntropyLengths = [16, 20, 24, 28, 32];\n    if (allowedEntropyLengths.indexOf(entropy.length) === -1) {\n      throw new Error(\"invalid input length\");\n    }\n    return new englishmnemonic_1.EnglishMnemonic(bip39.entropyToMnemonic(encoding_1.Encoding.toHex(entropy)));\n  }\n  static decode(mnemonic) {\n    return encoding_1.Encoding.fromHex(bip39.mnemonicToEntropy(mnemonic.toString()));\n  }\n  static async mnemonicToSeed(mnemonic, password) {\n    // reimplementation of bip39.mnemonicToSeed using the asynchronous\n    // interface of https://www.npmjs.com/package/pbkdf2\n    const mnemonicBytes = Buffer.from(unorm.nfkd(mnemonic.toString()), \"utf8\");\n    const salt = \"mnemonic\" + (password ? unorm.nfkd(password) : \"\");\n    const saltBytes = Buffer.from(salt, \"utf8\");\n    return this.pbkdf2(mnemonicBytes, saltBytes, 2048, 64, \"sha512\");\n  }\n  // convert pbkdf2's calllback interface to Promise interface\n  static async pbkdf2(secret, salt, iterations, keylen, digest) {\n    return new Promise((resolve, reject) => {\n      pbkdf2_1.pbkdf2(secret, salt, iterations, keylen, digest, (err, derivedKey) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(new Uint8Array(derivedKey));\n        }\n      });\n    });\n  }\n}\nexports.Bip39 = Bip39;","map":{"version":3,"mappings":";;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AAEA,MAAaA,KAAK;EACT,OAAOC,MAAM,CAACC,OAAmB;IACtC,MAAMC,qBAAqB,GAAsB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAErE,IAAIA,qBAAqB,CAACC,OAAO,CAACF,OAAO,CAACG,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE;MACxD,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;;IAGzC,OAAO,IAAIC,iCAAe,CAACC,KAAK,CAACC,iBAAiB,CAACC,mBAAQ,CAACC,KAAK,CAACT,OAAO,CAAC,CAAC,CAAC;EAC9E;EAEO,OAAOU,MAAM,CAACC,QAAyB;IAC5C,OAAOH,mBAAQ,CAACI,OAAO,CAACN,KAAK,CAACO,iBAAiB,CAACF,QAAQ,CAACG,QAAQ,EAAE,CAAC,CAAC;EACvE;EAEO,aAAaC,cAAc,CAACJ,QAAyB,EAAEK,QAAiB;IAC7E;IACA;IACA,MAAMC,aAAa,GAAGC,MAAM,CAACC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACV,QAAQ,CAACG,QAAQ,EAAE,CAAC,EAAE,MAAM,CAAC;IAC1E,MAAMQ,IAAI,GAAG,UAAU,IAAIN,QAAQ,GAAGI,KAAK,CAACC,IAAI,CAACL,QAAQ,CAAC,GAAG,EAAE,CAAC;IAChE,MAAMO,SAAS,GAAGL,MAAM,CAACC,IAAI,CAACG,IAAI,EAAE,MAAM,CAAC;IAC3C,OAAO,IAAI,CAACE,MAAM,CAACP,aAAa,EAAEM,SAAS,EAAE,IAAI,EAAE,EAAE,EAAE,QAAQ,CAAC;EAClE;EAEA;EACQ,aAAaC,MAAM,CACzBC,MAAkB,EAClBH,IAAgB,EAChBI,UAAkB,EAClBC,MAAc,EACdC,MAAc;IAEd,OAAO,IAAIC,OAAO,CAAM,CAACC,OAAO,EAAEC,MAAM,KAAI;MAC1CC,eAAM,CAACP,MAAM,EAAEH,IAAI,EAAEI,UAAU,EAAEC,MAAM,EAAEC,MAAM,EAAE,CAACK,GAAQ,EAAEC,UAAe,KAAI;QAC7E,IAAID,GAAG,EAAE;UACPF,MAAM,CAACE,GAAG,CAAC;SACZ,MAAM;UACLH,OAAO,CAAC,IAAIK,UAAU,CAACD,UAAU,CAAC,CAAC;;MAEvC,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;;AAzCFE","names":["Bip39","encode","entropy","allowedEntropyLengths","indexOf","length","Error","englishmnemonic_1","bip39","entropyToMnemonic","encoding_1","toHex","decode","mnemonic","fromHex","mnemonicToEntropy","toString","mnemonicToSeed","password","mnemonicBytes","Buffer","from","unorm","nfkd","salt","saltBytes","pbkdf2","secret","iterations","keylen","digest","Promise","resolve","reject","pbkdf2_1","err","derivedKey","Uint8Array","exports"],"sources":["../src/bip39.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}