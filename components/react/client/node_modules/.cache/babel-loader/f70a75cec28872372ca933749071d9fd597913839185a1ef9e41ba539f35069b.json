{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HttpBatchClient = exports.defaultHttpBatchClientOptions = void 0;\nconst json_rpc_1 = require(\"@cosmjs/json-rpc\");\nconst httpclient_1 = require(\"./httpclient\");\nconst rpcclient_1 = require(\"./rpcclient\");\nexports.defaultHttpBatchClientOptions = {\n  dispatchInterval: 20,\n  batchSizeLimit: 20\n};\nclass HttpBatchClient {\n  constructor(endpoint) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : exports.defaultHttpBatchClientOptions;\n    this.queue = [];\n    this.options = options;\n    if (typeof endpoint === \"string\") {\n      // accept host.name:port and assume http protocol\n      this.url = (0, rpcclient_1.hasProtocol)(endpoint) ? endpoint : \"http://\" + endpoint;\n    } else {\n      this.url = endpoint.url;\n      this.headers = endpoint.headers;\n    }\n    this.timer = setInterval(() => this.tick(), options.dispatchInterval);\n    this.validate();\n  }\n  disconnect() {\n    this.timer && clearInterval(this.timer);\n    this.timer = undefined;\n  }\n  async execute(request) {\n    return new Promise((resolve, reject) => {\n      this.queue.push({\n        request,\n        resolve,\n        reject\n      });\n    });\n  }\n  validate() {\n    if (!this.options.batchSizeLimit || !Number.isSafeInteger(this.options.batchSizeLimit) || this.options.batchSizeLimit < 1) {\n      throw new Error(\"batchSizeLimit must be a safe integer >= 1\");\n    }\n  }\n  async tick() {\n    // Avoid race conditions\n    const queue = this.queue.splice(0, this.options.batchSizeLimit);\n    if (!queue.length) return;\n    const request = queue.map(s => s.request);\n    const raw = await (0, httpclient_1.http)(\"POST\", this.url, this.headers, request);\n    // Requests with a single entry return as an object\n    const arr = Array.isArray(raw) ? raw : [raw];\n    arr.forEach(el => {\n      const req = queue.find(s => s.request.id === el.id);\n      if (!req) return;\n      const {\n        reject,\n        resolve\n      } = req;\n      const response = (0, json_rpc_1.parseJsonRpcResponse)(el);\n      if ((0, json_rpc_1.isJsonRpcErrorResponse)(response)) {\n        reject(new Error(JSON.stringify(response.error)));\n      } else {\n        resolve(response);\n      }\n    });\n  }\n}\nexports.HttpBatchClient = HttpBatchClient;","map":{"version":3,"mappings":";;;;;;AAAA;AAOA;AACA;AAOaA,qCAA6B,GAA2B;EACnEC,gBAAgB,EAAE,EAAE;EACpBC,cAAc,EAAE;CACjB;AAED,MAAaC,eAAe;EAY1BC,YACEC,QAA+B,EACgC;IAAA,IAA/DC,8EAAkCN,qCAA6B;IARhD,UAAK,GAIjB,EAAE;IAML,IAAI,CAACM,OAAO,GAAGA,OAAO;IACtB,IAAI,OAAOD,QAAQ,KAAK,QAAQ,EAAE;MAChC;MACA,IAAI,CAACE,GAAG,GAAG,2BAAW,EAACF,QAAQ,CAAC,GAAGA,QAAQ,GAAG,SAAS,GAAGA,QAAQ;KACnE,MAAM;MACL,IAAI,CAACE,GAAG,GAAGF,QAAQ,CAACE,GAAG;MACvB,IAAI,CAACC,OAAO,GAAGH,QAAQ,CAACG,OAAO;;IAEjC,IAAI,CAACC,KAAK,GAAGC,WAAW,CAAC,MAAM,IAAI,CAACC,IAAI,EAAE,EAAEL,OAAO,CAACL,gBAAgB,CAAC;IACrE,IAAI,CAACW,QAAQ,EAAE;EACjB;EAEOC,UAAU;IACf,IAAI,CAACJ,KAAK,IAAIK,aAAa,CAAC,IAAI,CAACL,KAAK,CAAC;IACvC,IAAI,CAACA,KAAK,GAAGM,SAAS;EACxB;EAEO,MAAMC,OAAO,CAACC,OAAuB;IAC1C,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;MACrC,IAAI,CAACC,KAAK,CAACC,IAAI,CAAC;QAAEL,OAAO;QAAEE,OAAO;QAAEC;MAAM,CAAE,CAAC;IAC/C,CAAC,CAAC;EACJ;EAEQR,QAAQ;IACd,IACE,CAAC,IAAI,CAACN,OAAO,CAACJ,cAAc,IAC5B,CAACqB,MAAM,CAACC,aAAa,CAAC,IAAI,CAAClB,OAAO,CAACJ,cAAc,CAAC,IAClD,IAAI,CAACI,OAAO,CAACJ,cAAc,GAAG,CAAC,EAC/B;MACA,MAAM,IAAIuB,KAAK,CAAC,4CAA4C,CAAC;;EAEjE;EAEQ,MAAMd,IAAI;IAChB;IACA,MAAMU,KAAK,GAAG,IAAI,CAACA,KAAK,CAACK,MAAM,CAAC,CAAC,EAAE,IAAI,CAACpB,OAAO,CAACJ,cAAc,CAAC;IAE/D,IAAI,CAACmB,KAAK,CAACM,MAAM,EAAE;IAEnB,MAAMV,OAAO,GAAGI,KAAK,CAACO,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACZ,OAAO,CAAC;IAC3C,MAAMa,GAAG,GAAG,MAAM,qBAAI,EAAC,MAAM,EAAE,IAAI,CAACvB,GAAG,EAAE,IAAI,CAACC,OAAO,EAAES,OAAO,CAAC;IAC/D;IACA,MAAMc,GAAG,GAAGC,KAAK,CAACC,OAAO,CAACH,GAAG,CAAC,GAAGA,GAAG,GAAG,CAACA,GAAG,CAAC;IAE5CC,GAAG,CAACG,OAAO,CAAEC,EAAE,IAAI;MACjB,MAAMC,GAAG,GAAGf,KAAK,CAACgB,IAAI,CAAER,CAAC,IAAKA,CAAC,CAACZ,OAAO,CAACqB,EAAE,KAAKH,EAAE,CAACG,EAAE,CAAC;MACrD,IAAI,CAACF,GAAG,EAAE;MACV,MAAM;QAAEhB,MAAM;QAAED;MAAO,CAAE,GAAGiB,GAAG;MAC/B,MAAMG,QAAQ,GAAG,mCAAoB,EAACJ,EAAE,CAAC;MACzC,IAAI,qCAAsB,EAACI,QAAQ,CAAC,EAAE;QACpCnB,MAAM,CAAC,IAAIK,KAAK,CAACe,IAAI,CAACC,SAAS,CAACF,QAAQ,CAACG,KAAK,CAAC,CAAC,CAAC;OAClD,MAAM;QACLvB,OAAO,CAACoB,QAAQ,CAAC;;IAErB,CAAC,CAAC;EACJ;;AAvEFvC","names":["exports","dispatchInterval","batchSizeLimit","HttpBatchClient","constructor","endpoint","options","url","headers","timer","setInterval","tick","validate","disconnect","clearInterval","undefined","execute","request","Promise","resolve","reject","queue","push","Number","isSafeInteger","Error","splice","length","map","s","raw","arr","Array","isArray","forEach","el","req","find","id","response","JSON","stringify","error"],"sources":["../../src/rpcclients/httpbatchclient.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}