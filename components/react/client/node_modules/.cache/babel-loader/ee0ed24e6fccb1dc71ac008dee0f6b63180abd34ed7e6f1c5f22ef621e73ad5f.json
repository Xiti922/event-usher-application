{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst crypto_1 = require(\"@iov/crypto\");\nconst encoding_1 = require(\"@iov/encoding\");\nconst logs_1 = require(\"./logs\");\nconst restclient_1 = require(\"./restclient\");\nfunction isSearchByIdQuery(query) {\n  return query.id !== undefined;\n}\nfunction isSearchByHeightQuery(query) {\n  return query.height !== undefined;\n}\nfunction isSearchBySentFromOrToQuery(query) {\n  return query.sentFromOrTo !== undefined;\n}\nfunction isSearchByTagsQuery(query) {\n  return query.tags !== undefined;\n}\nclass CosmWasmClient {\n  /**\n   * Creates a new client to interact with a CosmWasm blockchain.\n   *\n   * This instance does a lot of caching. In order to benefit from that you should try to use one instance\n   * for the lifetime of your application. When switching backends, a new instance must be created.\n   *\n   * @param apiUrl The URL of a Cosmos SDK light client daemon API (sometimes called REST server or REST API)\n   * @param broadcastMode Defines at which point of the transaction processing the postTx method (i.e. transaction broadcasting) returns\n   */\n  constructor(apiUrl, seed) {\n    let broadcastMode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : restclient_1.BroadcastMode.Block;\n    this.codesCache = new Map();\n    this.restClient = new restclient_1.RestClient(apiUrl, broadcastMode, seed);\n  }\n  async getChainId() {\n    if (!this.chainId) {\n      const response = await this.restClient.nodeInfo();\n      const chainId = response.node_info.network;\n      if (!chainId) throw new Error(\"Chain ID must not be empty\");\n      this.chainId = chainId;\n    }\n    return this.chainId;\n  }\n  async getHeight() {\n    if (this.anyValidAddress) {\n      const {\n        height\n      } = await this.restClient.authAccounts(this.anyValidAddress);\n      return parseInt(height, 10);\n    } else {\n      // Note: this gets inefficient when blocks contain a lot of transactions since it\n      // requires downloading and deserializing all transactions in the block.\n      const latest = await this.restClient.blocksLatest();\n      return parseInt(latest.block.header.height, 10);\n    }\n  }\n  /**\n   * Returns a 32 byte upper-case hex transaction hash (typically used as the transaction ID)\n   */\n  async getIdentifier(tx) {\n    // We consult the REST API because we don't have a local amino encoder\n    const bytes = await this.restClient.encodeTx(tx);\n    const hash = new crypto_1.Sha256(bytes).digest();\n    return encoding_1.Encoding.toHex(hash).toUpperCase();\n  }\n  /**\n   * Returns account number and sequence.\n   *\n   * Throws if the account does not exist on chain.\n   *\n   * @param address returns data for this address. When unset, the client's sender adddress is used.\n   */\n  async getNonce(address) {\n    const account = await this.getAccount(address);\n    if (!account || !account.address) {\n      throw new Error(\"Account does not exist on chain. Send some tokens there before trying to query nonces.\");\n    }\n    return {\n      accountNumber: account.accountNumber,\n      sequence: account.sequence\n    };\n  }\n  async getAccount(address) {\n    var _a;\n    const account = await this.restClient.authAccounts(address);\n    const value = account.result.value;\n    if (value.address === undefined || value.address === \"\") {\n      return undefined;\n    } else {\n      this.anyValidAddress = value.address;\n      return {\n        address: value.address,\n        balance: value.coins,\n        pubkey: !!((_a = value) === null || _a === void 0 ? void 0 : _a.public_key) ? JSON.parse(value.public_key) : undefined,\n        accountNumber: value.account_number,\n        sequence: value.sequence\n      };\n    }\n  }\n  /**\n   * Gets block header and meta\n   *\n   * @param height The height of the block. If undefined, the latest height is used.\n   */\n  async getBlock(height) {\n    const response = height !== undefined ? await this.restClient.blocks(height) : await this.restClient.blocksLatest();\n    return {\n      id: response.block_id.hash,\n      header: {\n        version: response.block.header.version,\n        time: response.block.header.time,\n        height: parseInt(response.block.header.height, 10),\n        chainId: response.block.header.chain_id\n      },\n      txs: (response.block.data.txs || []).map(encoded => encoding_1.Encoding.fromBase64(encoded))\n    };\n  }\n  async searchTx(query) {\n    let filter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const minHeight = filter.minHeight || 0;\n    const maxHeight = filter.maxHeight || Number.MAX_SAFE_INTEGER;\n    if (maxHeight < minHeight) return []; // optional optimization\n    function withFilters(originalQuery) {\n      return `${originalQuery}&tx.minheight=${minHeight}&tx.maxheight=${maxHeight}`;\n    }\n    let txs;\n    if (isSearchByIdQuery(query)) {\n      txs = await this.txsQuery(`tx.hash=${query.id}`);\n    } else if (isSearchByHeightQuery(query)) {\n      // optional optimization to avoid network request\n      if (query.height < minHeight || query.height > maxHeight) {\n        txs = [];\n      } else {\n        txs = await this.txsQuery(`tx.height=${query.height}`);\n      }\n    } else if (isSearchBySentFromOrToQuery(query)) {\n      // We cannot get both in one request (see https://github.com/cosmos/gaia/issues/75)\n      const sentQuery = withFilters(`message.module=bank&message.sender=${query.sentFromOrTo}`);\n      const receivedQuery = withFilters(`message.module=bank&transfer.recipient=${query.sentFromOrTo}`);\n      const sent = await this.txsQuery(sentQuery);\n      const received = await this.txsQuery(receivedQuery);\n      const sentHashes = sent.map(t => t.hash);\n      txs = [...sent, ...received.filter(t => !sentHashes.includes(t.hash))];\n    } else if (isSearchByTagsQuery(query)) {\n      const rawQuery = withFilters(query.tags.map(t => `${t.key}=${t.value}`).join(\"&\"));\n      txs = await this.txsQuery(rawQuery);\n    } else {\n      throw new Error(\"Unknown query type\");\n    }\n    // backend sometimes messes up with min/max height filtering\n    const filtered = txs.filter(tx => tx.height >= minHeight && tx.height <= maxHeight);\n    return filtered;\n  }\n  async postTx(tx) {\n    const result = await this.restClient.postTx(tx);\n    if (!result.txhash.match(/^([0-9A-F][0-9A-F])+$/)) {\n      throw new Error(\"Received ill-formatted txhash. Must be non-empty upper-case hex\");\n    }\n    if (result.code) {\n      throw new Error(`Error when posting tx ${result.txhash}. Code: ${result.code}; Raw log: ${result.raw_log}`);\n    }\n    return {\n      logs: result.logs ? logs_1.parseLogs(result.logs) : [],\n      rawLog: result.raw_log || \"\",\n      transactionHash: result.txhash,\n      data: result.data || \"\"\n    };\n  }\n  async getCodes() {\n    const result = await this.restClient.listCodeInfo();\n    return result.map(entry => {\n      this.anyValidAddress = entry.creator;\n      return {\n        id: entry.code_id,\n        creator: entry.creator,\n        checksum: encoding_1.Encoding.toHex(encoding_1.Encoding.fromHex(entry.code_hash)),\n        source: entry.source || undefined,\n        builder: entry.builder || undefined\n      };\n    });\n  }\n  async getCodeDetails(codeId) {\n    const cached = this.codesCache.get(codeId);\n    if (cached) return cached;\n    const getCodeResult = await this.restClient.getCode(codeId);\n    const codeDetails = {\n      id: getCodeResult.code_id,\n      creator: getCodeResult.creator,\n      checksum: encoding_1.Encoding.toHex(encoding_1.Encoding.fromHex(getCodeResult.code_hash)),\n      source: getCodeResult.source || undefined,\n      builder: getCodeResult.builder || undefined,\n      data: encoding_1.Encoding.fromBase64(getCodeResult.wasm)\n    };\n    this.codesCache.set(codeId, codeDetails);\n    return codeDetails;\n  }\n  async getContracts(codeId) {\n    const result = await this.restClient.listContractsByCodeId(codeId);\n    return result.map(entry => ({\n      address: entry.contract_address,\n      codeId: entry.code_id,\n      creator: entry.creator,\n      label: entry.label\n    }));\n  }\n  /**\n   * Throws an error if no contract was found at the address\n   */\n  async getContract(address) {\n    const result = await this.restClient.getContractInfo(address);\n    if (!result) throw new Error(`No contract found at address \"${address}\"`);\n    return {\n      address: result.contract_address,\n      codeId: result.code_id,\n      creator: result.creator,\n      label: result.label,\n      initMsg: result.init_msg\n    };\n  }\n  /**\n   * Makes a smart query on the contract, returns the parsed JSON document.\n   *\n   * Promise is rejected when contract does not exist.\n   * Promise is rejected for invalid query format.\n   * Promise is rejected for invalid response format.\n   *\n   * Note: addedParams allows for query string additions such as \"&height=1234567\"\n   */\n  async queryContractSmart(contractAddress, queryMsg, addedParams, contractCodeHash) {\n    try {\n      return await this.restClient.queryContractSmart(contractAddress, queryMsg, addedParams, contractCodeHash);\n    } catch (error) {\n      if (error instanceof Error) {\n        if (error.message.startsWith(\"not found: contract\")) {\n          throw new Error(`No contract found at address \"${contractAddress}\"`);\n        } else {\n          throw error;\n        }\n      } else {\n        throw error;\n      }\n    }\n  }\n  async txsQuery(query) {\n    // TODO: we need proper pagination support\n    const limit = 100;\n    const result = await this.restClient.txsQuery(`${query}&limit=${limit}`);\n    const pages = parseInt(result.page_total, 10);\n    if (pages > 1) {\n      throw new Error(`Found more results on the backend than we can process currently. Results: ${result.total_count}, supported: ${limit}`);\n    }\n    return result.txs.map(restItem => ({\n      height: parseInt(restItem.height, 10),\n      hash: restItem.txhash,\n      code: restItem.code || 0,\n      rawLog: restItem.raw_log,\n      logs: logs_1.parseLogs(restItem.logs || []),\n      tx: restItem.tx,\n      timestamp: restItem.timestamp\n    }));\n  }\n  getCodeHashByCodeId(id) {\n    return this.restClient.getCodeHashByCodeId(id);\n  }\n  getCodeHashByContractAddr(addr) {\n    return this.restClient.getCodeHashByContractAddr(addr);\n  }\n  async getNonceByTxId(txhash) {\n    const txResponse = await this.restClient.txById(txhash, false);\n    const msgs = txResponse.tx.value.msg;\n    const result = [];\n    for (const msg of msgs) {\n      let nonce;\n      if (msg.type === \"wasm/MsgExecuteContract\") {\n        nonce = encoding_1.Encoding.fromBase64(msg.value.msg).slice(0, 32);\n      } else if (msg.type === \"wasm/MsgInstantiateContract\") {\n        nonce = encoding_1.Encoding.fromBase64(msg.value.init_msg).slice(0, 32);\n      } else {\n        nonce = null;\n      }\n      result.push(nonce);\n    }\n    return result;\n  }\n}\nexports.CosmWasmClient = CosmWasmClient;","map":{"version":3,"mappings":"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","names":["isSearchByIdQuery","query","id","undefined","isSearchByHeightQuery","height","isSearchBySentFromOrToQuery","sentFromOrTo","isSearchByTagsQuery","tags","CosmWasmClient","constructor","apiUrl","seed","broadcastMode","restclient_1","Block","Map","restClient","getChainId","chainId","response","nodeInfo","node_info","network","Error","getHeight","anyValidAddress","authAccounts","parseInt","latest","blocksLatest","block","header","getIdentifier","tx","bytes","encodeTx","hash","crypto_1","digest","encoding_1","toHex","toUpperCase","getNonce","address","account","getAccount","accountNumber","sequence","value","result","balance","coins","pubkey","public_key","JSON","parse","account_number","getBlock","blocks","block_id","version","time","chain_id","txs","data","map","encoded","fromBase64","searchTx","filter","minHeight","maxHeight","Number","MAX_SAFE_INTEGER","withFilters","originalQuery","txsQuery","sentQuery","receivedQuery","sent","received","sentHashes","t","includes","rawQuery","key","join","filtered","postTx","txhash","match","code","raw_log","logs","logs_1","rawLog","transactionHash","getCodes","listCodeInfo","entry","creator","code_id","checksum","fromHex","code_hash","source","builder","getCodeDetails","codeId","cached","codesCache","get","getCodeResult","getCode","codeDetails","wasm","set","getContracts","listContractsByCodeId","contract_address","label","getContract","getContractInfo","initMsg","init_msg","queryContractSmart","contractAddress","queryMsg","addedParams","contractCodeHash","error","message","startsWith","limit","pages","page_total","total_count","restItem","timestamp","getCodeHashByCodeId","getCodeHashByContractAddr","addr","getNonceByTxId","txResponse","txById","msgs","msg","nonce","type","slice","push","exports"],"sources":["../src/cosmwasmclient.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}