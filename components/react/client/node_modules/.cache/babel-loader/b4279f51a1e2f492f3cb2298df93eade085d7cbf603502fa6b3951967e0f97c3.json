{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GetTxEncryptionKeyMsg = exports.RequestDecryptMsg = exports.ReqeustEncryptMsg = exports.GetPubkeyMsg = exports.RequestSignDirectMsg = exports.RequestVerifyADR36AminoSignDoc = exports.RequestSignAminoMsg = exports.GetSecret20ViewingKey = exports.SendTxMsg = exports.SuggestTokenMsg = exports.SuggestChainInfoMsg = exports.GetKeyMsg = exports.EnableAccessMsg = void 0;\nconst router_1 = require(\"@keplr-wallet/router\");\nclass EnableAccessMsg extends router_1.Message {\n  constructor(chainIds) {\n    super();\n    this.chainIds = chainIds;\n  }\n  static type() {\n    return \"enable-access\";\n  }\n  validateBasic() {\n    if (!this.chainIds || this.chainIds.length === 0) {\n      throw new Error(\"chain id not set\");\n    }\n  }\n  route() {\n    return \"permission\";\n  }\n  type() {\n    return EnableAccessMsg.type();\n  }\n}\nexports.EnableAccessMsg = EnableAccessMsg;\nclass GetKeyMsg extends router_1.Message {\n  constructor(chainId) {\n    super();\n    this.chainId = chainId;\n  }\n  static type() {\n    return \"get-key\";\n  }\n  validateBasic() {\n    if (!this.chainId) {\n      throw new Error(\"chain id not set\");\n    }\n  }\n  route() {\n    return \"keyring\";\n  }\n  type() {\n    return GetKeyMsg.type();\n  }\n}\nexports.GetKeyMsg = GetKeyMsg;\nclass SuggestChainInfoMsg extends router_1.Message {\n  constructor(chainInfo) {\n    super();\n    this.chainInfo = chainInfo;\n  }\n  static type() {\n    return \"suggest-chain-info\";\n  }\n  validateBasic() {\n    if (!this.chainInfo) {\n      throw new Error(\"chain info not set\");\n    }\n  }\n  route() {\n    return \"chains\";\n  }\n  type() {\n    return SuggestChainInfoMsg.type();\n  }\n}\nexports.SuggestChainInfoMsg = SuggestChainInfoMsg;\nclass SuggestTokenMsg extends router_1.Message {\n  constructor(chainId, contractAddress, viewingKey) {\n    super();\n    this.chainId = chainId;\n    this.contractAddress = contractAddress;\n    this.viewingKey = viewingKey;\n  }\n  static type() {\n    return \"suggest-token\";\n  }\n  validateBasic() {\n    if (!this.chainId) {\n      throw new Error(\"Chain id is empty\");\n    }\n    if (!this.contractAddress) {\n      throw new Error(\"Contract address is empty\");\n    }\n  }\n  route() {\n    return \"tokens\";\n  }\n  type() {\n    return SuggestTokenMsg.type();\n  }\n}\nexports.SuggestTokenMsg = SuggestTokenMsg;\n// Return the tx hash\nclass SendTxMsg extends router_1.Message {\n  constructor(chainId, tx, mode) {\n    super();\n    this.chainId = chainId;\n    this.tx = tx;\n    this.mode = mode;\n  }\n  static type() {\n    return \"send-tx-to-background\";\n  }\n  validateBasic() {\n    if (!this.chainId) {\n      throw new Error(\"chain id is empty\");\n    }\n    if (!this.tx) {\n      throw new Error(\"tx is empty\");\n    }\n    if (!this.mode || this.mode !== \"sync\" && this.mode !== \"async\" && this.mode !== \"block\") {\n      throw new Error(\"invalid mode\");\n    }\n  }\n  route() {\n    return \"background-tx\";\n  }\n  type() {\n    return SendTxMsg.type();\n  }\n}\nexports.SendTxMsg = SendTxMsg;\nclass GetSecret20ViewingKey extends router_1.Message {\n  constructor(chainId, contractAddress) {\n    super();\n    this.chainId = chainId;\n    this.contractAddress = contractAddress;\n  }\n  static type() {\n    return \"get-secret20-viewing-key\";\n  }\n  validateBasic() {\n    if (!this.chainId) {\n      throw new Error(\"Chain id is empty\");\n    }\n    if (!this.contractAddress) {\n      throw new Error(\"Contract address is empty\");\n    }\n  }\n  route() {\n    return \"tokens\";\n  }\n  type() {\n    return GetSecret20ViewingKey.type();\n  }\n}\nexports.GetSecret20ViewingKey = GetSecret20ViewingKey;\nclass RequestSignAminoMsg extends router_1.Message {\n  constructor(chainId, signer, signDoc) {\n    let signOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    super();\n    this.chainId = chainId;\n    this.signer = signer;\n    this.signDoc = signDoc;\n    this.signOptions = signOptions;\n  }\n  static type() {\n    return \"request-sign-amino\";\n  }\n  validateBasic() {\n    if (!this.chainId) {\n      throw new Error(\"chain id not set\");\n    }\n    if (!this.signer) {\n      throw new Error(\"signer not set\");\n    }\n    // It is not important to check this on the client side as opposed to increasing the bundle size.\n    // Validate bech32 address.\n    // Bech32Address.validate(this.signer);\n    const signDoc = this.signDoc;\n    // Check that the sign doc is for ADR-36,\n    // the validation should be performed on the background.\n    const hasOnlyMsgSignData = (() => {\n      if (signDoc && signDoc.msgs && Array.isArray(signDoc.msgs) && signDoc.msgs.length === 1) {\n        const msg = signDoc.msgs[0];\n        return msg.type === \"sign/MsgSignData\";\n      } else {\n        return false;\n      }\n    })();\n    // If the sign doc is expected to be for ADR-36,\n    // it doesn't have to have the chain id in the sign doc.\n    if (!hasOnlyMsgSignData && signDoc.chain_id !== this.chainId) {\n      throw new Error(\"Chain id in the message is not matched with the requested chain id\");\n    }\n    if (!this.signOptions) {\n      throw new Error(\"Sign options are null\");\n    }\n  }\n  route() {\n    return \"keyring\";\n  }\n  type() {\n    return RequestSignAminoMsg.type();\n  }\n}\nexports.RequestSignAminoMsg = RequestSignAminoMsg;\nclass RequestVerifyADR36AminoSignDoc extends router_1.Message {\n  constructor(chainId, signer, data, signature) {\n    super();\n    this.chainId = chainId;\n    this.signer = signer;\n    this.data = data;\n    this.signature = signature;\n  }\n  static type() {\n    return \"request-verify-adr-36-amino-doc\";\n  }\n  validateBasic() {\n    if (!this.chainId) {\n      throw new Error(\"chain id not set\");\n    }\n    if (!this.signer) {\n      throw new Error(\"signer not set\");\n    }\n    if (!this.signature) {\n      throw new Error(\"Signature not set\");\n    }\n    // It is not important to check this on the client side as opposed to increasing the bundle size.\n    // Validate bech32 address.\n    // Bech32Address.validate(this.signer);\n  }\n\n  route() {\n    return \"keyring\";\n  }\n  type() {\n    return RequestVerifyADR36AminoSignDoc.type();\n  }\n}\nexports.RequestVerifyADR36AminoSignDoc = RequestVerifyADR36AminoSignDoc;\nclass RequestSignDirectMsg extends router_1.Message {\n  constructor(chainId, signer, signDoc) {\n    let signOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    super();\n    this.chainId = chainId;\n    this.signer = signer;\n    this.signDoc = signDoc;\n    this.signOptions = signOptions;\n  }\n  static type() {\n    return \"request-sign-direct\";\n  }\n  validateBasic() {\n    if (!this.chainId) {\n      throw new Error(\"chain id not set\");\n    }\n    if (!this.signer) {\n      throw new Error(\"signer not set\");\n    }\n    // It is not important to check this on the client side as opposed to increasing the bundle size.\n    // Validate bech32 address.\n    // Bech32Address.validate(this.signer);\n    // const signDoc = cosmos.tx.v1beta1.SignDoc.create({\n    //   bodyBytes: this.signDoc.bodyBytes,\n    //   authInfoBytes: this.signDoc.authInfoBytes,\n    //   chainId: this.signDoc.chainId,\n    //   accountNumber: this.signDoc.accountNumber\n    //     ? Long.fromString(this.signDoc.accountNumber)\n    //     : undefined,\n    // });\n    //\n    // if (signDoc.chainId !== this.chainId) {\n    //   throw new Error(\n    //     \"Chain id in the message is not matched with the requested chain id\"\n    //   );\n    // }\n    if (!this.signOptions) {\n      throw new Error(\"Sign options are null\");\n    }\n  }\n  route() {\n    return \"keyring\";\n  }\n  type() {\n    return RequestSignDirectMsg.type();\n  }\n}\nexports.RequestSignDirectMsg = RequestSignDirectMsg;\nclass GetPubkeyMsg extends router_1.Message {\n  constructor(chainId) {\n    super();\n    this.chainId = chainId;\n  }\n  static type() {\n    return \"get-pubkey-msg\";\n  }\n  validateBasic() {\n    if (!this.chainId) {\n      throw new Error(\"chain id not set\");\n    }\n  }\n  route() {\n    return \"secret-wasm\";\n  }\n  type() {\n    return GetPubkeyMsg.type();\n  }\n}\nexports.GetPubkeyMsg = GetPubkeyMsg;\nclass ReqeustEncryptMsg extends router_1.Message {\n  constructor(chainId, contractCodeHash,\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  msg) {\n    super();\n    this.chainId = chainId;\n    this.contractCodeHash = contractCodeHash;\n    this.msg = msg;\n  }\n  static type() {\n    return \"request-encrypt-msg\";\n  }\n  validateBasic() {\n    if (!this.chainId) {\n      throw new Error(\"chain id not set\");\n    }\n    if (!this.contractCodeHash) {\n      throw new Error(\"contract code hash not set\");\n    }\n    if (!this.msg) {\n      throw new Error(\"msg not set\");\n    }\n  }\n  route() {\n    return \"secret-wasm\";\n  }\n  type() {\n    return ReqeustEncryptMsg.type();\n  }\n}\nexports.ReqeustEncryptMsg = ReqeustEncryptMsg;\nclass RequestDecryptMsg extends router_1.Message {\n  constructor(chainId, cipherText, nonce) {\n    super();\n    this.chainId = chainId;\n    this.cipherText = cipherText;\n    this.nonce = nonce;\n  }\n  static type() {\n    return \"request-decrypt-msg\";\n  }\n  validateBasic() {\n    if (!this.chainId) {\n      throw new Error(\"chain id not set\");\n    }\n    if (!this.cipherText || this.cipherText.length === 0) {\n      throw new Error(\"ciphertext not set\");\n    }\n    if (!this.nonce || this.nonce.length === 0) {\n      throw new Error(\"nonce not set\");\n    }\n  }\n  route() {\n    return \"secret-wasm\";\n  }\n  type() {\n    return RequestDecryptMsg.type();\n  }\n}\nexports.RequestDecryptMsg = RequestDecryptMsg;\nclass GetTxEncryptionKeyMsg extends router_1.Message {\n  constructor(chainId, nonce) {\n    super();\n    this.chainId = chainId;\n    this.nonce = nonce;\n  }\n  static type() {\n    return \"get-tx-encryption-key-msg\";\n  }\n  validateBasic() {\n    if (!this.chainId) {\n      throw new Error(\"chain id not set\");\n    }\n    if (!this.nonce) {\n      // Nonce of zero length is permitted.\n      throw new Error(\"nonce is null\");\n    }\n  }\n  route() {\n    return \"secret-wasm\";\n  }\n  type() {\n    return GetTxEncryptionKeyMsg.type();\n  }\n}\nexports.GetTxEncryptionKeyMsg = GetTxEncryptionKeyMsg;","map":{"version":3,"mappings":";;;;;;AAAA;AAIA,MAAaA,eAAgB,SAAQC,gBAAa;EAKhDC,YAA4BC,QAAkB;IAC5C,KAAK,EAAE;IADmB,aAAQ,GAARA,QAAQ;EAEpC;EANO,OAAOC,IAAI;IAChB,OAAO,eAAe;EACxB;EAMAC,aAAa;IACX,IAAI,CAAC,IAAI,CAACF,QAAQ,IAAI,IAAI,CAACA,QAAQ,CAACG,MAAM,KAAK,CAAC,EAAE;MAChD,MAAM,IAAIC,KAAK,CAAC,kBAAkB,CAAC;;EAEvC;EAEAC,KAAK;IACH,OAAO,YAAY;EACrB;EAEAJ,IAAI;IACF,OAAOJ,eAAe,CAACI,IAAI,EAAE;EAC/B;;AArBFK;AAwBA,MAAaC,SAAU,SAAQT,gBAAY;EAKzCC,YAA4BS,OAAe;IACzC,KAAK,EAAE;IADmB,YAAO,GAAPA,OAAO;EAEnC;EANO,OAAOP,IAAI;IAChB,OAAO,SAAS;EAClB;EAMAC,aAAa;IACX,IAAI,CAAC,IAAI,CAACM,OAAO,EAAE;MACjB,MAAM,IAAIJ,KAAK,CAAC,kBAAkB,CAAC;;EAEvC;EAEAC,KAAK;IACH,OAAO,SAAS;EAClB;EAEAJ,IAAI;IACF,OAAOM,SAAS,CAACN,IAAI,EAAE;EACzB;;AArBFK;AAwBA,MAAaG,mBAAoB,SAAQX,gBAAa;EAKpDC,YAA4BW,SAAoB;IAC9C,KAAK,EAAE;IADmB,cAAS,GAATA,SAAS;EAErC;EANO,OAAOT,IAAI;IAChB,OAAO,oBAAoB;EAC7B;EAMAC,aAAa;IACX,IAAI,CAAC,IAAI,CAACQ,SAAS,EAAE;MACnB,MAAM,IAAIN,KAAK,CAAC,oBAAoB,CAAC;;EAEzC;EAEAC,KAAK;IACH,OAAO,QAAQ;EACjB;EAEAJ,IAAI;IACF,OAAOQ,mBAAmB,CAACR,IAAI,EAAE;EACnC;;AArBFK;AAwBA,MAAaK,eAAgB,SAAQb,gBAAa;EAKhDC,YACkBS,OAAe,EACfI,eAAuB,EACvBC,UAAmB;IAEnC,KAAK,EAAE;IAJS,YAAO,GAAPL,OAAO;IACP,oBAAe,GAAfI,eAAe;IACf,eAAU,GAAVC,UAAU;EAG5B;EAVO,OAAOZ,IAAI;IAChB,OAAO,eAAe;EACxB;EAUAC,aAAa;IACX,IAAI,CAAC,IAAI,CAACM,OAAO,EAAE;MACjB,MAAM,IAAIJ,KAAK,CAAC,mBAAmB,CAAC;;IAGtC,IAAI,CAAC,IAAI,CAACQ,eAAe,EAAE;MACzB,MAAM,IAAIR,KAAK,CAAC,2BAA2B,CAAC;;EAEhD;EAEAC,KAAK;IACH,OAAO,QAAQ;EACjB;EAEAJ,IAAI;IACF,OAAOU,eAAe,CAACV,IAAI,EAAE;EAC/B;;AA7BFK;AAgCA;AACA,MAAaQ,SAAU,SAAQhB,gBAAmB;EAKhDC,YACkBS,OAAe,EACfO,EAAW,EACXC,IAAgC;IAEhD,KAAK,EAAE;IAJS,YAAO,GAAPR,OAAO;IACP,OAAE,GAAFO,EAAE;IACF,SAAI,GAAJC,IAAI;EAGtB;EAVO,OAAOf,IAAI;IAChB,OAAO,uBAAuB;EAChC;EAUAC,aAAa;IACX,IAAI,CAAC,IAAI,CAACM,OAAO,EAAE;MACjB,MAAM,IAAIJ,KAAK,CAAC,mBAAmB,CAAC;;IAGtC,IAAI,CAAC,IAAI,CAACW,EAAE,EAAE;MACZ,MAAM,IAAIX,KAAK,CAAC,aAAa,CAAC;;IAGhC,IACE,CAAC,IAAI,CAACY,IAAI,IACT,IAAI,CAACA,IAAI,KAAK,MAAM,IAAI,IAAI,CAACA,IAAI,KAAK,OAAO,IAAI,IAAI,CAACA,IAAI,KAAK,OAAQ,EACxE;MACA,MAAM,IAAIZ,KAAK,CAAC,cAAc,CAAC;;EAEnC;EAEAC,KAAK;IACH,OAAO,eAAe;EACxB;EAEAJ,IAAI;IACF,OAAOa,SAAS,CAACb,IAAI,EAAE;EACzB;;AApCFK;AAuCA,MAAaW,qBAAsB,SAAQnB,gBAAe;EAKxDC,YACkBS,OAAe,EACfI,eAAuB;IAEvC,KAAK,EAAE;IAHS,YAAO,GAAPJ,OAAO;IACP,oBAAe,GAAfI,eAAe;EAGjC;EATO,OAAOX,IAAI;IAChB,OAAO,0BAA0B;EACnC;EASAC,aAAa;IACX,IAAI,CAAC,IAAI,CAACM,OAAO,EAAE;MACjB,MAAM,IAAIJ,KAAK,CAAC,mBAAmB,CAAC;;IAGtC,IAAI,CAAC,IAAI,CAACQ,eAAe,EAAE;MACzB,MAAM,IAAIR,KAAK,CAAC,2BAA2B,CAAC;;EAEhD;EAEAC,KAAK;IACH,OAAO,QAAQ;EACjB;EAEAJ,IAAI;IACF,OAAOgB,qBAAqB,CAAChB,IAAI,EAAE;EACrC;;AA5BFK;AA+BA,MAAaY,mBAAoB,SAAQpB,gBAA0B;EAKjEC,YACkBS,OAAe,EACfW,MAAc,EACdC,OAAmB,EAI7B;IAAA,IAHUC,kFAGZ,EAAE;IAEN,KAAK,EAAE;IARS,YAAO,GAAPb,OAAO;IACP,WAAM,GAANW,MAAM;IACN,YAAO,GAAPC,OAAO;IACP,gBAAW,GAAXC,WAAW;EAM7B;EAdO,OAAOpB,IAAI;IAChB,OAAO,oBAAoB;EAC7B;EAcAC,aAAa;IACX,IAAI,CAAC,IAAI,CAACM,OAAO,EAAE;MACjB,MAAM,IAAIJ,KAAK,CAAC,kBAAkB,CAAC;;IAGrC,IAAI,CAAC,IAAI,CAACe,MAAM,EAAE;MAChB,MAAM,IAAIf,KAAK,CAAC,gBAAgB,CAAC;;IAGnC;IACA;IACA;IAEA,MAAMgB,OAAO,GAAG,IAAI,CAACA,OAAO;IAE5B;IACA;IACA,MAAME,kBAAkB,GAAG,CAAC,MAAK;MAC/B,IACEF,OAAO,IACPA,OAAO,CAACG,IAAI,IACZC,KAAK,CAACC,OAAO,CAACL,OAAO,CAACG,IAAI,CAAC,IAC3BH,OAAO,CAACG,IAAI,CAACpB,MAAM,KAAK,CAAC,EACzB;QACA,MAAMuB,GAAG,GAAGN,OAAO,CAACG,IAAI,CAAC,CAAC,CAAC;QAC3B,OAAOG,GAAG,CAACzB,IAAI,KAAK,kBAAkB;OACvC,MAAM;QACL,OAAO,KAAK;;IAEhB,CAAC,GAAG;IAEJ;IACA;IACA,IAAI,CAACqB,kBAAkB,IAAIF,OAAO,CAACO,QAAQ,KAAK,IAAI,CAACnB,OAAO,EAAE;MAC5D,MAAM,IAAIJ,KAAK,CACb,oEAAoE,CACrE;;IAGH,IAAI,CAAC,IAAI,CAACiB,WAAW,EAAE;MACrB,MAAM,IAAIjB,KAAK,CAAC,uBAAuB,CAAC;;EAE5C;EAEAC,KAAK;IACH,OAAO,SAAS;EAClB;EAEAJ,IAAI;IACF,OAAOiB,mBAAmB,CAACjB,IAAI,EAAE;EACnC;;AAnEFK;AAsEA,MAAasB,8BAA+B,SAAQ9B,gBAAgB;EAKlEC,YACkBS,OAAe,EACfW,MAAc,EACdU,IAAgB,EAChBC,SAAuB;IAEvC,KAAK,EAAE;IALS,YAAO,GAAPtB,OAAO;IACP,WAAM,GAANW,MAAM;IACN,SAAI,GAAJU,IAAI;IACJ,cAAS,GAATC,SAAS;EAG3B;EAXO,OAAO7B,IAAI;IAChB,OAAO,iCAAiC;EAC1C;EAWAC,aAAa;IACX,IAAI,CAAC,IAAI,CAACM,OAAO,EAAE;MACjB,MAAM,IAAIJ,KAAK,CAAC,kBAAkB,CAAC;;IAGrC,IAAI,CAAC,IAAI,CAACe,MAAM,EAAE;MAChB,MAAM,IAAIf,KAAK,CAAC,gBAAgB,CAAC;;IAGnC,IAAI,CAAC,IAAI,CAAC0B,SAAS,EAAE;MACnB,MAAM,IAAI1B,KAAK,CAAC,mBAAmB,CAAC;;IAGtC;IACA;IACA;EACF;;EAEAC,KAAK;IACH,OAAO,SAAS;EAClB;EAEAJ,IAAI;IACF,OAAO2B,8BAA8B,CAAC3B,IAAI,EAAE;EAC9C;;AAtCFK;AAyCA,MAAayB,oBAAqB,SAAQjC,gBAQxC;EAKAC,YACkBS,OAAe,EACfW,MAAc,EACdC,OAKf,EACiD;IAAA,IAAlCC,kFAAgC,EAAE;IAElD,KAAK,EAAE;IAVS,YAAO,GAAPb,OAAO;IACP,WAAM,GAANW,MAAM;IACN,YAAO,GAAPC,OAAO;IAMP,gBAAW,GAAXC,WAAW;EAG7B;EAhBO,OAAOpB,IAAI;IAChB,OAAO,qBAAqB;EAC9B;EAgBAC,aAAa;IACX,IAAI,CAAC,IAAI,CAACM,OAAO,EAAE;MACjB,MAAM,IAAIJ,KAAK,CAAC,kBAAkB,CAAC;;IAGrC,IAAI,CAAC,IAAI,CAACe,MAAM,EAAE;MAChB,MAAM,IAAIf,KAAK,CAAC,gBAAgB,CAAC;;IAGnC;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA,IAAI,CAAC,IAAI,CAACiB,WAAW,EAAE;MACrB,MAAM,IAAIjB,KAAK,CAAC,uBAAuB,CAAC;;EAE5C;EAEAC,KAAK;IACH,OAAO,SAAS;EAClB;EAEAJ,IAAI;IACF,OAAO8B,oBAAoB,CAAC9B,IAAI,EAAE;EACpC;;AAlEFK;AAqEA,MAAa0B,YAAa,SAAQlC,gBAAmB;EAKnDC,YAA4BS,OAAe;IACzC,KAAK,EAAE;IADmB,YAAO,GAAPA,OAAO;EAEnC;EANO,OAAOP,IAAI;IAChB,OAAO,gBAAgB;EACzB;EAMAC,aAAa;IACX,IAAI,CAAC,IAAI,CAACM,OAAO,EAAE;MACjB,MAAM,IAAIJ,KAAK,CAAC,kBAAkB,CAAC;;EAEvC;EAEAC,KAAK;IACH,OAAO,aAAa;EACtB;EAEAJ,IAAI;IACF,OAAO+B,YAAY,CAAC/B,IAAI,EAAE;EAC5B;;AArBFK;AAwBA,MAAa2B,iBAAkB,SAAQnC,gBAAmB;EAKxDC,YACkBS,OAAe,EACf0B,gBAAwB;EACxC;EACgBR,GAAW;IAE3B,KAAK,EAAE;IALS,YAAO,GAAPlB,OAAO;IACP,qBAAgB,GAAhB0B,gBAAgB;IAEhB,QAAG,GAAHR,GAAG;EAGrB;EAXO,OAAOzB,IAAI;IAChB,OAAO,qBAAqB;EAC9B;EAWAC,aAAa;IACX,IAAI,CAAC,IAAI,CAACM,OAAO,EAAE;MACjB,MAAM,IAAIJ,KAAK,CAAC,kBAAkB,CAAC;;IAGrC,IAAI,CAAC,IAAI,CAAC8B,gBAAgB,EAAE;MAC1B,MAAM,IAAI9B,KAAK,CAAC,4BAA4B,CAAC;;IAG/C,IAAI,CAAC,IAAI,CAACsB,GAAG,EAAE;MACb,MAAM,IAAItB,KAAK,CAAC,aAAa,CAAC;;EAElC;EAEAC,KAAK;IACH,OAAO,aAAa;EACtB;EAEAJ,IAAI;IACF,OAAOgC,iBAAiB,CAAChC,IAAI,EAAE;EACjC;;AAlCFK;AAqCA,MAAa6B,iBAAkB,SAAQrC,gBAAmB;EAKxDC,YACkBS,OAAe,EACf4B,UAAsB,EACtBC,KAAiB;IAEjC,KAAK,EAAE;IAJS,YAAO,GAAP7B,OAAO;IACP,eAAU,GAAV4B,UAAU;IACV,UAAK,GAALC,KAAK;EAGvB;EAVO,OAAOpC,IAAI;IAChB,OAAO,qBAAqB;EAC9B;EAUAC,aAAa;IACX,IAAI,CAAC,IAAI,CAACM,OAAO,EAAE;MACjB,MAAM,IAAIJ,KAAK,CAAC,kBAAkB,CAAC;;IAGrC,IAAI,CAAC,IAAI,CAACgC,UAAU,IAAI,IAAI,CAACA,UAAU,CAACjC,MAAM,KAAK,CAAC,EAAE;MACpD,MAAM,IAAIC,KAAK,CAAC,oBAAoB,CAAC;;IAGvC,IAAI,CAAC,IAAI,CAACiC,KAAK,IAAI,IAAI,CAACA,KAAK,CAAClC,MAAM,KAAK,CAAC,EAAE;MAC1C,MAAM,IAAIC,KAAK,CAAC,eAAe,CAAC;;EAEpC;EAEAC,KAAK;IACH,OAAO,aAAa;EACtB;EAEAJ,IAAI;IACF,OAAOkC,iBAAiB,CAAClC,IAAI,EAAE;EACjC;;AAjCFK;AAoCA,MAAagC,qBAAsB,SAAQxC,gBAAmB;EAK5DC,YACkBS,OAAe,EACf6B,KAAiB;IAEjC,KAAK,EAAE;IAHS,YAAO,GAAP7B,OAAO;IACP,UAAK,GAAL6B,KAAK;EAGvB;EATO,OAAOpC,IAAI;IAChB,OAAO,2BAA2B;EACpC;EASAC,aAAa;IACX,IAAI,CAAC,IAAI,CAACM,OAAO,EAAE;MACjB,MAAM,IAAIJ,KAAK,CAAC,kBAAkB,CAAC;;IAGrC,IAAI,CAAC,IAAI,CAACiC,KAAK,EAAE;MACf;MACA,MAAM,IAAIjC,KAAK,CAAC,eAAe,CAAC;;EAEpC;EAEAC,KAAK;IACH,OAAO,aAAa;EACtB;EAEAJ,IAAI;IACF,OAAOqC,qBAAqB,CAACrC,IAAI,EAAE;EACrC;;AA7BFK","names":["EnableAccessMsg","router_1","constructor","chainIds","type","validateBasic","length","Error","route","exports","GetKeyMsg","chainId","SuggestChainInfoMsg","chainInfo","SuggestTokenMsg","contractAddress","viewingKey","SendTxMsg","tx","mode","GetSecret20ViewingKey","RequestSignAminoMsg","signer","signDoc","signOptions","hasOnlyMsgSignData","msgs","Array","isArray","msg","chain_id","RequestVerifyADR36AminoSignDoc","data","signature","RequestSignDirectMsg","GetPubkeyMsg","ReqeustEncryptMsg","contractCodeHash","RequestDecryptMsg","cipherText","nonce","GetTxEncryptionKeyMsg"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/@keplr-wallet/provider/src/types/msgs.ts"],"sourcesContent":["import { Message } from \"@keplr-wallet/router\";\nimport { ChainInfo, KeplrSignOptions, Key } from \"@keplr-wallet/types\";\nimport { AminoSignResponse, StdSignature, StdSignDoc } from \"@cosmjs/launchpad\";\n\nexport class EnableAccessMsg extends Message<void> {\n  public static type() {\n    return \"enable-access\";\n  }\n\n  constructor(public readonly chainIds: string[]) {\n    super();\n  }\n\n  validateBasic(): void {\n    if (!this.chainIds || this.chainIds.length === 0) {\n      throw new Error(\"chain id not set\");\n    }\n  }\n\n  route(): string {\n    return \"permission\";\n  }\n\n  type(): string {\n    return EnableAccessMsg.type();\n  }\n}\n\nexport class GetKeyMsg extends Message<Key> {\n  public static type() {\n    return \"get-key\";\n  }\n\n  constructor(public readonly chainId: string) {\n    super();\n  }\n\n  validateBasic(): void {\n    if (!this.chainId) {\n      throw new Error(\"chain id not set\");\n    }\n  }\n\n  route(): string {\n    return \"keyring\";\n  }\n\n  type(): string {\n    return GetKeyMsg.type();\n  }\n}\n\nexport class SuggestChainInfoMsg extends Message<void> {\n  public static type() {\n    return \"suggest-chain-info\";\n  }\n\n  constructor(public readonly chainInfo: ChainInfo) {\n    super();\n  }\n\n  validateBasic(): void {\n    if (!this.chainInfo) {\n      throw new Error(\"chain info not set\");\n    }\n  }\n\n  route(): string {\n    return \"chains\";\n  }\n\n  type(): string {\n    return SuggestChainInfoMsg.type();\n  }\n}\n\nexport class SuggestTokenMsg extends Message<void> {\n  public static type() {\n    return \"suggest-token\";\n  }\n\n  constructor(\n    public readonly chainId: string,\n    public readonly contractAddress: string,\n    public readonly viewingKey?: string\n  ) {\n    super();\n  }\n\n  validateBasic(): void {\n    if (!this.chainId) {\n      throw new Error(\"Chain id is empty\");\n    }\n\n    if (!this.contractAddress) {\n      throw new Error(\"Contract address is empty\");\n    }\n  }\n\n  route(): string {\n    return \"tokens\";\n  }\n\n  type(): string {\n    return SuggestTokenMsg.type();\n  }\n}\n\n// Return the tx hash\nexport class SendTxMsg extends Message<Uint8Array> {\n  public static type() {\n    return \"send-tx-to-background\";\n  }\n\n  constructor(\n    public readonly chainId: string,\n    public readonly tx: unknown,\n    public readonly mode: \"async\" | \"sync\" | \"block\"\n  ) {\n    super();\n  }\n\n  validateBasic(): void {\n    if (!this.chainId) {\n      throw new Error(\"chain id is empty\");\n    }\n\n    if (!this.tx) {\n      throw new Error(\"tx is empty\");\n    }\n\n    if (\n      !this.mode ||\n      (this.mode !== \"sync\" && this.mode !== \"async\" && this.mode !== \"block\")\n    ) {\n      throw new Error(\"invalid mode\");\n    }\n  }\n\n  route(): string {\n    return \"background-tx\";\n  }\n\n  type(): string {\n    return SendTxMsg.type();\n  }\n}\n\nexport class GetSecret20ViewingKey extends Message<string> {\n  public static type() {\n    return \"get-secret20-viewing-key\";\n  }\n\n  constructor(\n    public readonly chainId: string,\n    public readonly contractAddress: string\n  ) {\n    super();\n  }\n\n  validateBasic(): void {\n    if (!this.chainId) {\n      throw new Error(\"Chain id is empty\");\n    }\n\n    if (!this.contractAddress) {\n      throw new Error(\"Contract address is empty\");\n    }\n  }\n\n  route(): string {\n    return \"tokens\";\n  }\n\n  type(): string {\n    return GetSecret20ViewingKey.type();\n  }\n}\n\nexport class RequestSignAminoMsg extends Message<AminoSignResponse> {\n  public static type() {\n    return \"request-sign-amino\";\n  }\n\n  constructor(\n    public readonly chainId: string,\n    public readonly signer: string,\n    public readonly signDoc: StdSignDoc,\n    public readonly signOptions: KeplrSignOptions & {\n      // Hack option field to detect the sign arbitrary for string\n      isADR36WithString?: boolean;\n    } = {}\n  ) {\n    super();\n  }\n\n  validateBasic(): void {\n    if (!this.chainId) {\n      throw new Error(\"chain id not set\");\n    }\n\n    if (!this.signer) {\n      throw new Error(\"signer not set\");\n    }\n\n    // It is not important to check this on the client side as opposed to increasing the bundle size.\n    // Validate bech32 address.\n    // Bech32Address.validate(this.signer);\n\n    const signDoc = this.signDoc;\n\n    // Check that the sign doc is for ADR-36,\n    // the validation should be performed on the background.\n    const hasOnlyMsgSignData = (() => {\n      if (\n        signDoc &&\n        signDoc.msgs &&\n        Array.isArray(signDoc.msgs) &&\n        signDoc.msgs.length === 1\n      ) {\n        const msg = signDoc.msgs[0];\n        return msg.type === \"sign/MsgSignData\";\n      } else {\n        return false;\n      }\n    })();\n\n    // If the sign doc is expected to be for ADR-36,\n    // it doesn't have to have the chain id in the sign doc.\n    if (!hasOnlyMsgSignData && signDoc.chain_id !== this.chainId) {\n      throw new Error(\n        \"Chain id in the message is not matched with the requested chain id\"\n      );\n    }\n\n    if (!this.signOptions) {\n      throw new Error(\"Sign options are null\");\n    }\n  }\n\n  route(): string {\n    return \"keyring\";\n  }\n\n  type(): string {\n    return RequestSignAminoMsg.type();\n  }\n}\n\nexport class RequestVerifyADR36AminoSignDoc extends Message<boolean> {\n  public static type() {\n    return \"request-verify-adr-36-amino-doc\";\n  }\n\n  constructor(\n    public readonly chainId: string,\n    public readonly signer: string,\n    public readonly data: Uint8Array,\n    public readonly signature: StdSignature\n  ) {\n    super();\n  }\n\n  validateBasic(): void {\n    if (!this.chainId) {\n      throw new Error(\"chain id not set\");\n    }\n\n    if (!this.signer) {\n      throw new Error(\"signer not set\");\n    }\n\n    if (!this.signature) {\n      throw new Error(\"Signature not set\");\n    }\n\n    // It is not important to check this on the client side as opposed to increasing the bundle size.\n    // Validate bech32 address.\n    // Bech32Address.validate(this.signer);\n  }\n\n  route(): string {\n    return \"keyring\";\n  }\n\n  type(): string {\n    return RequestVerifyADR36AminoSignDoc.type();\n  }\n}\n\nexport class RequestSignDirectMsg extends Message<{\n  readonly signed: {\n    bodyBytes: Uint8Array;\n    authInfoBytes: Uint8Array;\n    chainId: string;\n    accountNumber: string;\n  };\n  readonly signature: StdSignature;\n}> {\n  public static type() {\n    return \"request-sign-direct\";\n  }\n\n  constructor(\n    public readonly chainId: string,\n    public readonly signer: string,\n    public readonly signDoc: {\n      bodyBytes?: Uint8Array | null;\n      authInfoBytes?: Uint8Array | null;\n      chainId?: string | null;\n      accountNumber?: string | null;\n    },\n    public readonly signOptions: KeplrSignOptions = {}\n  ) {\n    super();\n  }\n\n  validateBasic(): void {\n    if (!this.chainId) {\n      throw new Error(\"chain id not set\");\n    }\n\n    if (!this.signer) {\n      throw new Error(\"signer not set\");\n    }\n\n    // It is not important to check this on the client side as opposed to increasing the bundle size.\n    // Validate bech32 address.\n    // Bech32Address.validate(this.signer);\n\n    // const signDoc = cosmos.tx.v1beta1.SignDoc.create({\n    //   bodyBytes: this.signDoc.bodyBytes,\n    //   authInfoBytes: this.signDoc.authInfoBytes,\n    //   chainId: this.signDoc.chainId,\n    //   accountNumber: this.signDoc.accountNumber\n    //     ? Long.fromString(this.signDoc.accountNumber)\n    //     : undefined,\n    // });\n    //\n    // if (signDoc.chainId !== this.chainId) {\n    //   throw new Error(\n    //     \"Chain id in the message is not matched with the requested chain id\"\n    //   );\n    // }\n\n    if (!this.signOptions) {\n      throw new Error(\"Sign options are null\");\n    }\n  }\n\n  route(): string {\n    return \"keyring\";\n  }\n\n  type(): string {\n    return RequestSignDirectMsg.type();\n  }\n}\n\nexport class GetPubkeyMsg extends Message<Uint8Array> {\n  public static type() {\n    return \"get-pubkey-msg\";\n  }\n\n  constructor(public readonly chainId: string) {\n    super();\n  }\n\n  validateBasic(): void {\n    if (!this.chainId) {\n      throw new Error(\"chain id not set\");\n    }\n  }\n\n  route(): string {\n    return \"secret-wasm\";\n  }\n\n  type(): string {\n    return GetPubkeyMsg.type();\n  }\n}\n\nexport class ReqeustEncryptMsg extends Message<Uint8Array> {\n  public static type() {\n    return \"request-encrypt-msg\";\n  }\n\n  constructor(\n    public readonly chainId: string,\n    public readonly contractCodeHash: string,\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    public readonly msg: object\n  ) {\n    super();\n  }\n\n  validateBasic(): void {\n    if (!this.chainId) {\n      throw new Error(\"chain id not set\");\n    }\n\n    if (!this.contractCodeHash) {\n      throw new Error(\"contract code hash not set\");\n    }\n\n    if (!this.msg) {\n      throw new Error(\"msg not set\");\n    }\n  }\n\n  route(): string {\n    return \"secret-wasm\";\n  }\n\n  type(): string {\n    return ReqeustEncryptMsg.type();\n  }\n}\n\nexport class RequestDecryptMsg extends Message<Uint8Array> {\n  public static type() {\n    return \"request-decrypt-msg\";\n  }\n\n  constructor(\n    public readonly chainId: string,\n    public readonly cipherText: Uint8Array,\n    public readonly nonce: Uint8Array\n  ) {\n    super();\n  }\n\n  validateBasic(): void {\n    if (!this.chainId) {\n      throw new Error(\"chain id not set\");\n    }\n\n    if (!this.cipherText || this.cipherText.length === 0) {\n      throw new Error(\"ciphertext not set\");\n    }\n\n    if (!this.nonce || this.nonce.length === 0) {\n      throw new Error(\"nonce not set\");\n    }\n  }\n\n  route(): string {\n    return \"secret-wasm\";\n  }\n\n  type(): string {\n    return RequestDecryptMsg.type();\n  }\n}\n\nexport class GetTxEncryptionKeyMsg extends Message<Uint8Array> {\n  public static type() {\n    return \"get-tx-encryption-key-msg\";\n  }\n\n  constructor(\n    public readonly chainId: string,\n    public readonly nonce: Uint8Array\n  ) {\n    super();\n  }\n\n  validateBasic(): void {\n    if (!this.chainId) {\n      throw new Error(\"chain id not set\");\n    }\n\n    if (!this.nonce) {\n      // Nonce of zero length is permitted.\n      throw new Error(\"nonce is null\");\n    }\n  }\n\n  route(): string {\n    return \"secret-wasm\";\n  }\n\n  type(): string {\n    return GetTxEncryptionKeyMsg.type();\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}