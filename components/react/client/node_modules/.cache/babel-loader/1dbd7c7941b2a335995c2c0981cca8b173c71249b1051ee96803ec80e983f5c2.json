{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Bip39 = void 0;\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst bip39 = __importStar(require(\"bip39\"));\nconst pbkdf2_1 = require(\"pbkdf2\");\nconst unorm = __importStar(require(\"unorm\"));\nconst englishmnemonic_1 = require(\"./englishmnemonic\");\nclass Bip39 {\n  /**\n   * Encodes raw entropy of length 16, 20, 24, 28 or 32 bytes as an English mnemonic between 12 and 24 words.\n   *\n   * | Entropy            | Words |\n   * |--------------------|-------|\n   * | 128 bit (16 bytes) |    12 |\n   * | 160 bit (20 bytes) |    15 |\n   * | 192 bit (24 bytes) |    18 |\n   * | 224 bit (28 bytes) |    21 |\n   * | 256 bit (32 bytes) |    24 |\n   *\n   *\n   * @see https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki#generating-the-mnemonic\n   * @param entropy The entropy to be encoded. This must be cryptographically secure.\n   */\n  static encode(entropy) {\n    const allowedEntropyLengths = [16, 20, 24, 28, 32];\n    if (allowedEntropyLengths.indexOf(entropy.length) === -1) {\n      throw new Error(\"invalid input length\");\n    }\n    return new englishmnemonic_1.EnglishMnemonic(bip39.entropyToMnemonic(encoding_1.toHex(entropy)));\n  }\n  static decode(mnemonic) {\n    return encoding_1.fromHex(bip39.mnemonicToEntropy(mnemonic.toString()));\n  }\n  static async mnemonicToSeed(mnemonic, password) {\n    // reimplementation of bip39.mnemonicToSeed using the asynchronous\n    // interface of https://www.npmjs.com/package/pbkdf2\n    const mnemonicBytes = encoding_1.toUtf8(unorm.nfkd(mnemonic.toString()));\n    const salt = \"mnemonic\" + (password ? unorm.nfkd(password) : \"\");\n    const saltBytes = encoding_1.toUtf8(salt);\n    return this.pbkdf2(mnemonicBytes, saltBytes, 2048, 64, \"sha512\");\n  }\n  // convert pbkdf2's callback interface to Promise interface\n  static async pbkdf2(secret, salt, iterations, keylen, digest) {\n    return new Promise((resolve, reject) => {\n      pbkdf2_1.pbkdf2(secret, salt, iterations, keylen, digest, (err, derivedKey) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(new Uint8Array(derivedKey));\n        }\n      });\n    });\n  }\n}\nexports.Bip39 = Bip39;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AAEA,MAAaA,KAAK;EAChB;;;;;;;;;;;;;;;EAeO,OAAOC,MAAM,CAACC,OAAmB;IACtC,MAAMC,qBAAqB,GAAsB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAErE,IAAIA,qBAAqB,CAACC,OAAO,CAACF,OAAO,CAACG,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE;MACxD,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;;IAGzC,OAAO,IAAIC,iCAAe,CAACC,KAAK,CAACC,iBAAiB,CAACC,gBAAK,CAACR,OAAO,CAAC,CAAC,CAAC;EACrE;EAEO,OAAOS,MAAM,CAACC,QAAyB;IAC5C,OAAOF,kBAAO,CAACF,KAAK,CAACK,iBAAiB,CAACD,QAAQ,CAACE,QAAQ,EAAE,CAAC,CAAC;EAC9D;EAEO,aAAaC,cAAc,CAACH,QAAyB,EAAEI,QAAiB;IAC7E;IACA;IACA,MAAMC,aAAa,GAAGP,iBAAM,CAACQ,KAAK,CAACC,IAAI,CAACP,QAAQ,CAACE,QAAQ,EAAE,CAAC,CAAC;IAC7D,MAAMM,IAAI,GAAG,UAAU,IAAIJ,QAAQ,GAAGE,KAAK,CAACC,IAAI,CAACH,QAAQ,CAAC,GAAG,EAAE,CAAC;IAChE,MAAMK,SAAS,GAAGX,iBAAM,CAACU,IAAI,CAAC;IAC9B,OAAO,IAAI,CAACE,MAAM,CAACL,aAAa,EAAEI,SAAS,EAAE,IAAI,EAAE,EAAE,EAAE,QAAQ,CAAC;EAClE;EAEA;EACQ,aAAaC,MAAM,CACzBC,MAAkB,EAClBH,IAAgB,EAChBI,UAAkB,EAClBC,MAAc,EACdC,MAAc;IAEd,OAAO,IAAIC,OAAO,CAAM,CAACC,OAAO,EAAEC,MAAM,KAAI;MAC1CC,eAAM,CAACP,MAAM,EAAEH,IAAI,EAAEI,UAAU,EAAEC,MAAM,EAAEC,MAAM,EAAE,CAACK,GAAG,EAAEC,UAAU,KAAI;QACnE,IAAID,GAAG,EAAE;UACPF,MAAM,CAACE,GAAG,CAAC;SACZ,MAAM;UACLH,OAAO,CAAC,IAAIK,UAAU,CAACD,UAAU,CAAC,CAAC;;MAEvC,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;;AAxDFE","names":["Bip39","encode","entropy","allowedEntropyLengths","indexOf","length","Error","englishmnemonic_1","bip39","entropyToMnemonic","encoding_1","decode","mnemonic","mnemonicToEntropy","toString","mnemonicToSeed","password","mnemonicBytes","unorm","nfkd","salt","saltBytes","pbkdf2","secret","iterations","keylen","digest","Promise","resolve","reject","pbkdf2_1","err","derivedKey","Uint8Array","exports"],"sources":["../src/bip39.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}