{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getHandler = void 0;\nconst router_1 = require(\"@keplr-wallet/router\");\nconst messages_1 = require(\"./messages\");\nconst getHandler = service => {\n  return (env, msg) => {\n    switch (msg.constructor) {\n      case messages_1.SendTxMsg:\n        return handleSendTxMsg(service)(env, msg);\n      default:\n        throw new router_1.KeplrError(\"tx\", 110, \"Unknown msg type\");\n    }\n  };\n};\nexports.getHandler = getHandler;\nconst handleSendTxMsg = service => {\n  return (env, msg) => __awaiter(void 0, void 0, void 0, function* () {\n    yield service.permissionService.checkOrGrantBasicAccessPermission(env, msg.chainId, msg.origin);\n    return yield service.sendTx(msg.chainId, msg.tx, msg.mode);\n  });\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAOA;AAGO,MAAMA,UAAU,GACrBC,OAA4B,IAC1B;EACF,OAAO,CAACC,GAAQ,EAAEC,GAAqB,KAAI;IACzC,QAAQA,GAAG,CAACC,WAAW;MACrB,KAAKC,oBAAS;QACZ,OAAOC,eAAe,CAACL,OAAO,CAAC,CAACC,GAAG,EAAEC,GAAgB,CAAC;MACxD;QACE,MAAM,IAAII,mBAAU,CAAC,IAAI,EAAE,GAAG,EAAE,kBAAkB,CAAC;IAAC;EAE1D,CAAC;AACH,CAAC;AAXYC,kBAAU;AAavB,MAAMF,eAAe,GAEcL,OAAO,IAAI;EAC5C,OAAO,CAAOC,GAAG,EAAEC,GAAG,KAAIM;IACxB,MAAMR,OAAO,CAACS,iBAAiB,CAACC,iCAAiC,CAC/DT,GAAG,EACHC,GAAG,CAACS,OAAO,EACXT,GAAG,CAACU,MAAM,CACX;IAED,OAAO,MAAMZ,OAAO,CAACa,MAAM,CAACX,GAAG,CAACS,OAAO,EAAET,GAAG,CAACY,EAAE,EAAEZ,GAAG,CAACa,IAAI,CAAC;EAC5D,CAAC;AACH,CAAC","names":["getHandler","service","env","msg","constructor","messages_1","handleSendTxMsg","router_1","exports","__awaiter","permissionService","checkOrGrantBasicAccessPermission","chainId","origin","sendTx","tx","mode"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/@keplr-wallet/background/src/tx/handler.ts"],"sourcesContent":["import {\n  Env,\n  Handler,\n  InternalHandler,\n  KeplrError,\n  Message,\n} from \"@keplr-wallet/router\";\nimport { SendTxMsg } from \"./messages\";\nimport { BackgroundTxService } from \"./service\";\n\nexport const getHandler: (service: BackgroundTxService) => Handler = (\n  service: BackgroundTxService\n) => {\n  return (env: Env, msg: Message<unknown>) => {\n    switch (msg.constructor) {\n      case SendTxMsg:\n        return handleSendTxMsg(service)(env, msg as SendTxMsg);\n      default:\n        throw new KeplrError(\"tx\", 110, \"Unknown msg type\");\n    }\n  };\n};\n\nconst handleSendTxMsg: (\n  service: BackgroundTxService\n) => InternalHandler<SendTxMsg> = (service) => {\n  return async (env, msg) => {\n    await service.permissionService.checkOrGrantBasicAccessPermission(\n      env,\n      msg.chainId,\n      msg.origin\n    );\n\n    return await service.sendTx(msg.chainId, msg.tx, msg.mode);\n  };\n};\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}