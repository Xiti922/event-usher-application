{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst encoding_1 = require(\"@iov/encoding\");\nconst {\n  fromBase64,\n  fromHex\n} = encoding_1.Encoding;\nfunction isStdTx(txValue) {\n  const {\n    memo,\n    msg,\n    fee,\n    signatures\n  } = txValue;\n  return typeof memo === \"string\" && Array.isArray(msg) && typeof fee === \"object\" && Array.isArray(signatures);\n}\nexports.isStdTx = isStdTx;\nfunction isMsgSend(msg) {\n  return msg.type === \"cosmos-sdk/MsgSend\";\n}\nexports.isMsgSend = isMsgSend;\nfunction isMsgStoreCode(msg) {\n  return msg.type === \"wasm/MsgStoreCode\";\n}\nexports.isMsgStoreCode = isMsgStoreCode;\nfunction isMsgInstantiateContract(msg) {\n  return msg.type === \"wasm/MsgInstantiateContract\";\n}\nexports.isMsgInstantiateContract = isMsgInstantiateContract;\nfunction isMsgExecuteContract(msg) {\n  return msg.type === \"wasm/MsgExecuteContract\";\n}\nexports.isMsgExecuteContract = isMsgExecuteContract;\nfunction extractContractMsg(msg) {\n  if (msg.type === \"wasm/MsgExecuteContract\") {\n    return encoding_1.Encoding.fromBase64(msg.value.msg);\n  } /*  if (msg.type === \"wasm/MsgInstantiateContract\")  */else {\n    return encoding_1.Encoding.fromBase64(msg.value.init_msg);\n  }\n}\nexports.extractContractMsg = extractContractMsg;\nexports.pubkeyType = {\n  /** @see https://github.com/tendermint/tendermint/blob/v0.33.0/crypto/ed25519/ed25519.go#L22 */\n  secp256k1: \"tendermint/PubKeySecp256k1\",\n  /** @see https://github.com/tendermint/tendermint/blob/v0.33.0/crypto/secp256k1/secp256k1.go#L23 */\n  ed25519: \"tendermint/PubKeyEd25519\",\n  /** @see https://github.com/tendermint/tendermint/blob/v0.33.0/crypto/sr25519/codec.go#L12 */\n  sr25519: \"tendermint/PubKeySr25519\"\n};\nexports.pubkeyTypes = [exports.pubkeyType.secp256k1, exports.pubkeyType.ed25519, exports.pubkeyType.sr25519];\nfunction parseWasmData(_ref) {\n  let {\n    key,\n    val\n  } = _ref;\n  return {\n    key: fromHex(key),\n    val: fromBase64(val)\n  };\n}\nexports.parseWasmData = parseWasmData;","map":{"version":3,"mappings":";;;;;AAAA;AAEA,MAAM;EAAEA,UAAU;EAAEC;AAAO,CAAE,GAAGC,mBAAQ;AAUxC,SAAgBC,OAAO,CAACC,OAAgB;EACtC,MAAM;IAAEC,IAAI;IAAEC,GAAG;IAAEC,GAAG;IAAEC;EAAU,CAAE,GAAGJ,OAAgB;EACvD,OACE,OAAOC,IAAI,KAAK,QAAQ,IAAII,KAAK,CAACC,OAAO,CAACJ,GAAG,CAAC,IAAI,OAAOC,GAAG,KAAK,QAAQ,IAAIE,KAAK,CAACC,OAAO,CAACF,UAAU,CAAC;AAE1G;AALAG;AA2FA,SAAgBC,SAAS,CAACN,GAAQ;EAChC,OAAQA,GAAe,CAACO,IAAI,KAAK,oBAAoB;AACvD;AAFAF;AAIA,SAAgBG,cAAc,CAACR,GAAQ;EACrC,OAAQA,GAAoB,CAACO,IAAI,KAAK,mBAAmB;AAC3D;AAFAF;AAIA,SAAgBI,wBAAwB,CAACT,GAAQ;EAC/C,OAAQA,GAA8B,CAACO,IAAI,KAAK,6BAA6B;AAC/E;AAFAF;AAIA,SAAgBK,oBAAoB,CAACV,GAAQ;EAC3C,OAAQA,GAA0B,CAACO,IAAI,KAAK,yBAAyB;AACvE;AAFAF;AAIA,SAAgBM,kBAAkB,CAACX,GAAgD;EACjF,IAAIA,GAAG,CAACO,IAAI,KAAK,yBAAyB,EAAE;IAC1C,OAAOX,mBAAQ,CAACF,UAAU,CAAEM,GAA0B,CAACY,KAAK,CAACZ,GAAG,CAAC;GAClE,CAAC,4DAA6D;IAC7D,OAAOJ,mBAAQ,CAACF,UAAU,CAAEM,GAA8B,CAACY,KAAK,CAACC,QAAQ,CAAC;;AAE9E;AANAR;AAiCaA,kBAAU,GAAG;EACxB;EACAS,SAAS,EAAE,4BAAqC;EAChD;EACAC,OAAO,EAAE,0BAAmC;EAC5C;EACAC,OAAO,EAAE;CACV;AAEYX,mBAAW,GAAsB,CAACA,kBAAU,CAACS,SAAS,EAAET,kBAAU,CAACU,OAAO,EAAEV,kBAAU,CAACW,OAAO,CAAC;AAe5G,SAAgBC,aAAa,OAAuB;EAAA,IAAtB;IAAEC,GAAG;IAAEC;EAAG,CAAY;EAClD,OAAO;IACLD,GAAG,EAAEvB,OAAO,CAACuB,GAAG,CAAC;IACjBC,GAAG,EAAEzB,UAAU,CAACyB,GAAG;GACpB;AACH;AALAd","names":["fromBase64","fromHex","encoding_1","isStdTx","txValue","memo","msg","fee","signatures","Array","isArray","exports","isMsgSend","type","isMsgStoreCode","isMsgInstantiateContract","isMsgExecuteContract","extractContractMsg","value","init_msg","secp256k1","ed25519","sr25519","parseWasmData","key","val"],"sources":["../src/types.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}