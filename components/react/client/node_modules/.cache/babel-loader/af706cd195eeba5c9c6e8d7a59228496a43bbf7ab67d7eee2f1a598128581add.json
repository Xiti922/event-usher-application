{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst crypto_1 = require(\"@iov/crypto\");\nconst signature_1 = require(\"./signature\");\nfunction prehash(bytes, type) {\n  switch (type) {\n    case null:\n      return new Uint8Array([...bytes]);\n    case \"sha256\":\n      return new crypto_1.Sha256(bytes).digest();\n    case \"sha512\":\n      return new crypto_1.Sha512(bytes).digest();\n    default:\n      throw new Error(\"Unknown prehash type\");\n  }\n}\n/**\n * The Cosmoshub derivation path in the form `m/44'/118'/0'/0/a`\n * with 0-based account index `a`.\n * The Secret Network derivation path in the form `m/44'/529'/0'/0/a`\n * with 0-based account index `a`.\n */\nfunction makeSecretNetworkPath(a) {\n  return [crypto_1.Slip10RawIndex.hardened(44), crypto_1.Slip10RawIndex.hardened(529), crypto_1.Slip10RawIndex.hardened(0), crypto_1.Slip10RawIndex.normal(0), crypto_1.Slip10RawIndex.normal(a)];\n}\nexports.makeSecretNetworkPath = makeSecretNetworkPath;\nclass Secp256k1Pen {\n  constructor(privkey, pubkey) {\n    this.privkey = privkey;\n    this.pubkey = pubkey;\n  }\n  static async fromMnemonic(mnemonic) {\n    let hdPath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : makeSecretNetworkPath(0);\n    const seed = await crypto_1.Bip39.mnemonicToSeed(new crypto_1.EnglishMnemonic(mnemonic));\n    const {\n      privkey\n    } = crypto_1.Slip10.derivePath(crypto_1.Slip10Curve.Secp256k1, seed, hdPath);\n    const uncompressed = (await crypto_1.Secp256k1.makeKeypair(privkey)).pubkey;\n    return new Secp256k1Pen(privkey, crypto_1.Secp256k1.compressPubkey(uncompressed));\n  }\n  /**\n   * Creates and returns a signature\n   */\n  async sign(signBytes) {\n    let prehashType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"sha256\";\n    const message = prehash(signBytes, prehashType);\n    const signature = await crypto_1.Secp256k1.createSignature(message, this.privkey);\n    const fixedLengthSignature = new Uint8Array([...signature.r(32), ...signature.s(32)]);\n    return signature_1.encodeSecp256k1Signature(this.pubkey, fixedLengthSignature);\n  }\n}\nexports.Secp256k1Pen = Secp256k1Pen;","map":{"version":3,"mappings":";;;;;AAAA;AAWA;AAoBA,SAASA,OAAO,CAACC,KAAiB,EAAEC,IAAiB;EACnD,QAAQA,IAAI;IACV,KAAK,IAAI;MACP,OAAO,IAAIC,UAAU,CAAC,CAAC,GAAGF,KAAK,CAAC,CAAC;IACnC,KAAK,QAAQ;MACX,OAAO,IAAIG,eAAM,CAACH,KAAK,CAAC,CAACI,MAAM,EAAE;IACnC,KAAK,QAAQ;MACX,OAAO,IAAID,eAAM,CAACH,KAAK,CAAC,CAACI,MAAM,EAAE;IACnC;MACE,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;EAAC;AAE9C;AAEA;;;;;;AAMA,SAAgBC,qBAAqB,CAACC,CAAS;EAC7C,OAAO,CACLJ,uBAAc,CAACK,QAAQ,CAAC,EAAE,CAAC,EAC3BL,uBAAc,CAACK,QAAQ,CAAC,GAAG,CAAC,EAC5BL,uBAAc,CAACK,QAAQ,CAAC,CAAC,CAAC,EAC1BL,uBAAc,CAACM,MAAM,CAAC,CAAC,CAAC,EACxBN,uBAAc,CAACM,MAAM,CAACF,CAAC,CAAC,CACzB;AACH;AARAG;AAUA,MAAaC,YAAY;EAcvBC,YAAoBC,OAAmB,EAAEC,MAAkB;IACzD,IAAI,CAACD,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,MAAM,GAAGA,MAAM;EACtB;EAhBO,aAAaC,YAAY,CAC9BC,QAAgB,EAC4C;IAAA,IAA5DC,6EAAoCX,qBAAqB,CAAC,CAAC,CAAC;IAE5D,MAAMY,IAAI,GAAG,MAAMf,cAAK,CAACgB,cAAc,CAAC,IAAIhB,wBAAe,CAACa,QAAQ,CAAC,CAAC;IACtE,MAAM;MAAEH;IAAO,CAAE,GAAGV,eAAM,CAACiB,UAAU,CAACjB,oBAAW,CAACkB,SAAS,EAAEH,IAAI,EAAED,MAAM,CAAC;IAC1E,MAAMK,YAAY,GAAG,CAAC,MAAMnB,kBAAS,CAACoB,WAAW,CAACV,OAAO,CAAC,EAAEC,MAAM;IAClE,OAAO,IAAIH,YAAY,CAACE,OAAO,EAAEV,kBAAS,CAACqB,cAAc,CAACF,YAAY,CAAC,CAAC;EAC1E;EAUA;;;EAGO,MAAMG,IAAI,CAACC,SAAqB,EAAqC;IAAA,IAAnCC,kFAA2B,QAAQ;IAC1E,MAAMC,OAAO,GAAG7B,OAAO,CAAC2B,SAAS,EAAEC,WAAW,CAAC;IAC/C,MAAME,SAAS,GAAG,MAAM1B,kBAAS,CAAC2B,eAAe,CAACF,OAAO,EAAE,IAAI,CAACf,OAAO,CAAC;IACxE,MAAMkB,oBAAoB,GAAG,IAAI7B,UAAU,CAAC,CAAC,GAAG2B,SAAS,CAACG,CAAC,CAAC,EAAE,CAAC,EAAE,GAAGH,SAAS,CAACI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACrF,OAAOC,oCAAwB,CAAC,IAAI,CAACpB,MAAM,EAAEiB,oBAAoB,CAAC;EACpE;;AA3BFrB","names":["prehash","bytes","type","Uint8Array","crypto_1","digest","Error","makeSecretNetworkPath","a","hardened","normal","exports","Secp256k1Pen","constructor","privkey","pubkey","fromMnemonic","mnemonic","hdPath","seed","mnemonicToSeed","derivePath","Secp256k1","uncompressed","makeKeypair","compressPubkey","sign","signBytes","prehashType","message","signature","createSignature","fixedLengthSignature","r","s","signature_1"],"sources":["../src/pen.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}