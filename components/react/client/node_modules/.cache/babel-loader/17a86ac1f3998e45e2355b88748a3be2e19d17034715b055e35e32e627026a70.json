{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Secp256k1 = void 0;\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst elliptic_1 = __importDefault(require(\"elliptic\"));\nconst secp256k1signature_1 = require(\"./secp256k1signature\");\nconst secp256k1 = new elliptic_1.default.ec(\"secp256k1\");\nconst secp256k1N = new bn_js_1.default(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141\", \"hex\");\nclass Secp256k1 {\n  /**\n   * Takes a 32 byte private key and returns a privkey/pubkey pair.\n   *\n   * The resulting pubkey is uncompressed. For the use in Cosmos it should\n   * be compressed first using `Secp256k1.compressPubkey`.\n   */\n  static async makeKeypair(privkey) {\n    if (privkey.length !== 32) {\n      // is this check missing in secp256k1.validatePrivateKey?\n      // https://github.com/bitjson/bitcoin-ts/issues/4\n      throw new Error(\"input data is not a valid secp256k1 private key\");\n    }\n    const keypair = secp256k1.keyFromPrivate(privkey);\n    if (keypair.validate().result !== true) {\n      throw new Error(\"input data is not a valid secp256k1 private key\");\n    }\n    // range test that is not part of the elliptic implementation\n    const privkeyAsBigInteger = new bn_js_1.default(privkey);\n    if (privkeyAsBigInteger.gte(secp256k1N)) {\n      // not strictly smaller than N\n      throw new Error(\"input data is not a valid secp256k1 private key\");\n    }\n    const out = {\n      privkey: (0, encoding_1.fromHex)(keypair.getPrivate(\"hex\")),\n      // encodes uncompressed as\n      // - 1-byte prefix \"04\"\n      // - 32-byte x coordinate\n      // - 32-byte y coordinate\n      pubkey: Uint8Array.from(keypair.getPublic(\"array\"))\n    };\n    return out;\n  }\n  /**\n   * Creates a signature that is\n   * - deterministic (RFC 6979)\n   * - lowS signature\n   * - DER encoded\n   */\n  static async createSignature(messageHash, privkey) {\n    if (messageHash.length === 0) {\n      throw new Error(\"Message hash must not be empty\");\n    }\n    if (messageHash.length > 32) {\n      throw new Error(\"Message hash length must not exceed 32 bytes\");\n    }\n    const keypair = secp256k1.keyFromPrivate(privkey);\n    // the `canonical` option ensures creation of lowS signature representations\n    const {\n      r,\n      s,\n      recoveryParam\n    } = keypair.sign(messageHash, {\n      canonical: true\n    });\n    if (typeof recoveryParam !== \"number\") throw new Error(\"Recovery param missing\");\n    return new secp256k1signature_1.ExtendedSecp256k1Signature(Uint8Array.from(r.toArray()), Uint8Array.from(s.toArray()), recoveryParam);\n  }\n  static async verifySignature(signature, messageHash, pubkey) {\n    if (messageHash.length === 0) {\n      throw new Error(\"Message hash must not be empty\");\n    }\n    if (messageHash.length > 32) {\n      throw new Error(\"Message hash length must not exceed 32 bytes\");\n    }\n    const keypair = secp256k1.keyFromPublic(pubkey);\n    // From https://github.com/indutny/elliptic:\n    //\n    //     Sign the message's hash (input must be an array, or a hex-string)\n    //\n    //     Signature MUST be either:\n    //     1) DER-encoded signature as hex-string; or\n    //     2) DER-encoded signature as buffer; or\n    //     3) object with two hex-string properties (r and s); or\n    //     4) object with two buffer properties (r and s)\n    //\n    // Uint8Array is not a Buffer, but elliptic seems to be happy with the interface\n    // common to both types. Uint8Array is not an array of ints but the interface is\n    // similar\n    try {\n      return keypair.verify(messageHash, signature.toDer());\n    } catch (error) {\n      return false;\n    }\n  }\n  static recoverPubkey(signature, messageHash) {\n    const signatureForElliptic = {\n      r: (0, encoding_1.toHex)(signature.r()),\n      s: (0, encoding_1.toHex)(signature.s())\n    };\n    const point = secp256k1.recoverPubKey(messageHash, signatureForElliptic, signature.recovery);\n    const keypair = secp256k1.keyFromPublic(point);\n    return (0, encoding_1.fromHex)(keypair.getPublic(false, \"hex\"));\n  }\n  /**\n   * Takes a compressed or uncompressed pubkey and return a compressed one.\n   *\n   * This function is idempotent.\n   */\n  static compressPubkey(pubkey) {\n    switch (pubkey.length) {\n      case 33:\n        return pubkey;\n      case 65:\n        return Uint8Array.from(secp256k1.keyFromPublic(pubkey).getPublic(true, \"array\"));\n      default:\n        throw new Error(\"Invalid pubkey length\");\n    }\n  }\n  /**\n   * Takes a compressed or uncompressed pubkey and returns an uncompressed one.\n   *\n   * This function is idempotent.\n   */\n  static uncompressPubkey(pubkey) {\n    switch (pubkey.length) {\n      case 33:\n        return Uint8Array.from(secp256k1.keyFromPublic(pubkey).getPublic(false, \"array\"));\n      case 65:\n        return pubkey;\n      default:\n        throw new Error(\"Invalid pubkey length\");\n    }\n  }\n  static trimRecoveryByte(signature) {\n    switch (signature.length) {\n      case 64:\n        return signature;\n      case 65:\n        return signature.slice(0, 64);\n      default:\n        throw new Error(\"Invalid signature length\");\n    }\n  }\n}\nexports.Secp256k1 = Secp256k1;","map":{"version":3,"mappings":"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","names":["secp256k1","elliptic_1","ec","secp256k1N","bn_js_1","Secp256k1","makeKeypair","privkey","length","Error","keypair","keyFromPrivate","validate","result","privkeyAsBigInteger","gte","out","getPrivate","pubkey","Uint8Array","from","getPublic","createSignature","messageHash","r","s","recoveryParam","sign","canonical","secp256k1signature_1","toArray","verifySignature","signature","keyFromPublic","verify","toDer","error","recoverPubkey","signatureForElliptic","point","recoverPubKey","recovery","compressPubkey","uncompressPubkey","trimRecoveryByte","slice","exports"],"sources":["../src/secp256k1.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}