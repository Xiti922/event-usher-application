{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PricePretty = void 0;\nconst int_pretty_1 = require(\"./int-pretty\");\nconst dec_utils_1 = require(\"./dec-utils\");\nclass PricePretty {\n  constructor(_fiatCurrency, amount) {\n    this._fiatCurrency = _fiatCurrency;\n    this.amount = amount;\n    this._options = {\n      separator: \"\",\n      upperCase: false,\n      lowerCase: false,\n      locale: \"en-US\"\n    };\n    this.intPretty = new int_pretty_1.IntPretty(amount).maxDecimals(_fiatCurrency.maxDecimals).shrink(true).trim(true).locale(false).inequalitySymbol(true);\n    this._options.locale = _fiatCurrency.locale;\n  }\n  get options() {\n    return Object.assign(Object.assign({}, this.intPretty.options), this._options);\n  }\n  get symbol() {\n    return this._fiatCurrency.symbol;\n  }\n  get fiatCurrency() {\n    return this._fiatCurrency;\n  }\n  separator(str) {\n    const pretty = this.clone();\n    pretty._options.separator = str;\n    return pretty;\n  }\n  upperCase(bool) {\n    const pretty = this.clone();\n    pretty._options.upperCase = bool;\n    pretty._options.lowerCase = !bool;\n    return pretty;\n  }\n  lowerCase(bool) {\n    const pretty = this.clone();\n    pretty._options.lowerCase = bool;\n    pretty._options.upperCase = !bool;\n    return pretty;\n  }\n  moveDecimalPointLeft(delta) {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.moveDecimalPointLeft(delta);\n    return pretty;\n  }\n  moveDecimalPointRight(delta) {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.moveDecimalPointRight(delta);\n    return pretty;\n  }\n  /**\n   * @deprecated Use`moveDecimalPointLeft`\n   */\n  increasePrecision(delta) {\n    return this.moveDecimalPointLeft(delta);\n  }\n  /**\n   * @deprecated Use`moveDecimalPointRight`\n   */\n  decreasePrecision(delta) {\n    return this.moveDecimalPointRight(delta);\n  }\n  maxDecimals(max) {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.maxDecimals(max);\n    return pretty;\n  }\n  inequalitySymbol(bool) {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.inequalitySymbol(bool);\n    return pretty;\n  }\n  inequalitySymbolSeparator(str) {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.inequalitySymbolSeparator(str);\n    return pretty;\n  }\n  trim(bool) {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.trim(bool);\n    return pretty;\n  }\n  shrink(bool) {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.shrink(bool);\n    return pretty;\n  }\n  locale(locale) {\n    const pretty = this.clone();\n    pretty._options.locale = locale;\n    return pretty;\n  }\n  /**\n   * Ready indicates the actual value is ready to show the users.\n   * Even if the ready option is false, it expects that the value can be shown to users (probably as 0).\n   * The method that returns prettied value may return `undefined` or `null` if the value is not ready.\n   * But, alternatively, it can return the 0 value that can be shown the users anyway, but indicates that the value is not ready.\n   * @param bool\n   */\n  ready(bool) {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.ready(bool);\n    return pretty;\n  }\n  get isReady() {\n    return this.intPretty.isReady;\n  }\n  add(target) {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.add(target);\n    return pretty;\n  }\n  sub(target) {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.sub(target);\n    return pretty;\n  }\n  mul(target) {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.mul(target);\n    return pretty;\n  }\n  quo(target) {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.quo(target);\n    return pretty;\n  }\n  toDec() {\n    return this.intPretty.toDec();\n  }\n  toString() {\n    let symbol = this.symbol;\n    if (this._options.upperCase) {\n      symbol = symbol.toUpperCase();\n    }\n    if (this._options.lowerCase) {\n      symbol = symbol.toLowerCase();\n    }\n    const dec = this.toDec();\n    const options = this.options;\n    if (options.inequalitySymbol && !dec.isZero() && dec.abs().lt(dec_utils_1.DecUtils.getTenExponentN(-options.maxDecimals))) {\n      return this.intPretty.toStringWithSymbols(`${symbol}${this._options.separator}`, \"\");\n    }\n    let localeString = parseFloat(this.intPretty.toString()).toLocaleString(options.locale, {\n      maximumFractionDigits: options.maxDecimals\n    });\n    const isNeg = localeString.charAt(0) === \"-\";\n    if (isNeg) {\n      localeString = localeString.slice(1);\n    }\n    return `${isNeg ? \"-\" : \"\"}${symbol}${this._options.separator}${localeString}`;\n  }\n  clone() {\n    const pretty = new PricePretty(this._fiatCurrency, this.amount);\n    pretty._options = Object.assign({}, this._options);\n    pretty.intPretty = this.intPretty.clone();\n    return pretty;\n  }\n}\nexports.PricePretty = PricePretty;","map":{"version":3,"mappings":"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","names":["PricePretty","constructor","_fiatCurrency","amount","separator","upperCase","lowerCase","locale","intPretty","int_pretty_1","maxDecimals","shrink","trim","inequalitySymbol","_options","options","symbol","fiatCurrency","str","pretty","clone","bool","moveDecimalPointLeft","delta","moveDecimalPointRight","increasePrecision","decreasePrecision","max","inequalitySymbolSeparator","ready","isReady","add","target","sub","mul","quo","toDec","toString","toUpperCase","toLowerCase","dec","isZero","abs","lt","dec_utils_1","getTenExponentN","toStringWithSymbols","localeString","parseFloat","toLocaleString","maximumFractionDigits","isNeg","charAt","slice","exports"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/@keplr-wallet/unit/src/price-pretty.ts"],"sourcesContent":["import { IntPretty, IntPrettyOptions } from \"./int-pretty\";\nimport { Dec } from \"./decimal\";\nimport { FiatCurrency } from \"@keplr-wallet/types\";\nimport { DeepReadonly } from \"utility-types\";\nimport { DecUtils } from \"./dec-utils\";\nimport bigInteger from \"big-integer\";\n\nexport type PricePrettyOptions = {\n  separator: string;\n  upperCase: boolean;\n  lowerCase: boolean;\n  locale: string;\n};\n\nexport class PricePretty {\n  protected intPretty: IntPretty;\n\n  protected _options: PricePrettyOptions = {\n    separator: \"\",\n    upperCase: false,\n    lowerCase: false,\n    locale: \"en-US\",\n  };\n\n  constructor(\n    protected _fiatCurrency: FiatCurrency,\n    protected amount: Dec | { toDec(): Dec } | bigInteger.BigNumber\n  ) {\n    this.intPretty = new IntPretty(amount)\n      .maxDecimals(_fiatCurrency.maxDecimals)\n      .shrink(true)\n      .trim(true)\n      .locale(false)\n      .inequalitySymbol(true);\n\n    this._options.locale = _fiatCurrency.locale;\n  }\n\n  get options(): DeepReadonly<\n    Omit<IntPrettyOptions, \"locale\"> & PricePrettyOptions\n  > {\n    return {\n      ...this.intPretty.options,\n      ...this._options,\n    };\n  }\n\n  get symbol(): string {\n    return this._fiatCurrency.symbol;\n  }\n\n  get fiatCurrency(): FiatCurrency {\n    return this._fiatCurrency;\n  }\n\n  separator(str: string): PricePretty {\n    const pretty = this.clone();\n    pretty._options.separator = str;\n    return pretty;\n  }\n\n  upperCase(bool: boolean): PricePretty {\n    const pretty = this.clone();\n    pretty._options.upperCase = bool;\n    pretty._options.lowerCase = !bool;\n    return pretty;\n  }\n\n  lowerCase(bool: boolean): PricePretty {\n    const pretty = this.clone();\n    pretty._options.lowerCase = bool;\n    pretty._options.upperCase = !bool;\n    return pretty;\n  }\n\n  moveDecimalPointLeft(delta: number): PricePretty {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.moveDecimalPointLeft(delta);\n    return pretty;\n  }\n\n  moveDecimalPointRight(delta: number): PricePretty {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.moveDecimalPointRight(delta);\n    return pretty;\n  }\n\n  /**\n   * @deprecated Use`moveDecimalPointLeft`\n   */\n  increasePrecision(delta: number): PricePretty {\n    return this.moveDecimalPointLeft(delta);\n  }\n\n  /**\n   * @deprecated Use`moveDecimalPointRight`\n   */\n  decreasePrecision(delta: number): PricePretty {\n    return this.moveDecimalPointRight(delta);\n  }\n\n  maxDecimals(max: number): PricePretty {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.maxDecimals(max);\n    return pretty;\n  }\n\n  inequalitySymbol(bool: boolean): PricePretty {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.inequalitySymbol(bool);\n    return pretty;\n  }\n\n  inequalitySymbolSeparator(str: string): PricePretty {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.inequalitySymbolSeparator(str);\n    return pretty;\n  }\n\n  trim(bool: boolean): PricePretty {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.trim(bool);\n    return pretty;\n  }\n\n  shrink(bool: boolean): PricePretty {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.shrink(bool);\n    return pretty;\n  }\n\n  locale(locale: string): PricePretty {\n    const pretty = this.clone();\n    pretty._options.locale = locale;\n    return pretty;\n  }\n\n  /**\n   * Ready indicates the actual value is ready to show the users.\n   * Even if the ready option is false, it expects that the value can be shown to users (probably as 0).\n   * The method that returns prettied value may return `undefined` or `null` if the value is not ready.\n   * But, alternatively, it can return the 0 value that can be shown the users anyway, but indicates that the value is not ready.\n   * @param bool\n   */\n  ready(bool: boolean): PricePretty {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.ready(bool);\n    return pretty;\n  }\n\n  get isReady(): boolean {\n    return this.intPretty.isReady;\n  }\n\n  add(target: Dec | { toDec(): Dec }): PricePretty {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.add(target);\n    return pretty;\n  }\n\n  sub(target: Dec | { toDec(): Dec }): PricePretty {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.sub(target);\n    return pretty;\n  }\n\n  mul(target: Dec | { toDec(): Dec }): PricePretty {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.mul(target);\n    return pretty;\n  }\n\n  quo(target: Dec | { toDec(): Dec }): PricePretty {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.quo(target);\n    return pretty;\n  }\n\n  toDec(): Dec {\n    return this.intPretty.toDec();\n  }\n\n  toString(): string {\n    let symbol = this.symbol;\n    if (this._options.upperCase) {\n      symbol = symbol.toUpperCase();\n    }\n    if (this._options.lowerCase) {\n      symbol = symbol.toLowerCase();\n    }\n\n    const dec = this.toDec();\n    const options = this.options;\n\n    if (\n      options.inequalitySymbol &&\n      !dec.isZero() &&\n      dec.abs().lt(DecUtils.getTenExponentN(-options.maxDecimals))\n    ) {\n      return this.intPretty.toStringWithSymbols(\n        `${symbol}${this._options.separator}`,\n        \"\"\n      );\n    }\n\n    let localeString = parseFloat(this.intPretty.toString()).toLocaleString(\n      options.locale,\n      {\n        maximumFractionDigits: options.maxDecimals,\n      }\n    );\n\n    const isNeg = localeString.charAt(0) === \"-\";\n    if (isNeg) {\n      localeString = localeString.slice(1);\n    }\n\n    return `${isNeg ? \"-\" : \"\"}${symbol}${\n      this._options.separator\n    }${localeString}`;\n  }\n\n  clone(): PricePretty {\n    const pretty = new PricePretty(this._fiatCurrency, this.amount);\n    pretty._options = {\n      ...this._options,\n    };\n    pretty.intPretty = this.intPretty.clone();\n    return pretty;\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}