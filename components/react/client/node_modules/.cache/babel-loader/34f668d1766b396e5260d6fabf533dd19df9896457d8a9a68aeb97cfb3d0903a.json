{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getHandler = void 0;\nconst router_1 = require(\"@keplr-wallet/router\");\nconst messages_1 = require(\"./messages\");\nconst getHandler = service => {\n  return (env, msg) => {\n    switch (msg.constructor) {\n      case messages_1.GetChainInfosMsg:\n        return handleGetChainInfosMsg(service)(env, msg);\n      case messages_1.SuggestChainInfoMsg:\n        return handleSuggestChainInfoMsg(service)(env, msg);\n      case messages_1.RemoveSuggestedChainInfoMsg:\n        return handleRemoveSuggestedChainInfoMsg(service)(env, msg);\n      default:\n        throw new router_1.KeplrError(\"chains\", 110, \"Unknown msg type\");\n    }\n  };\n};\nexports.getHandler = getHandler;\nconst handleGetChainInfosMsg = service => {\n  return () => __awaiter(void 0, void 0, void 0, function* () {\n    const chainInfos = yield service.getChainInfos();\n    return {\n      chainInfos\n    };\n  });\n};\nconst handleSuggestChainInfoMsg = service => {\n  return (env, msg) => __awaiter(void 0, void 0, void 0, function* () {\n    if (yield service.hasChainInfo(msg.chainInfo.chainId)) {\n      // If suggested chain info is already registered, just return.\n      return;\n    }\n    const chainInfo = msg.chainInfo;\n    // And, always handle it as beta.\n    chainInfo.beta = true;\n    yield service.suggestChainInfo(env, chainInfo, msg.origin);\n  });\n};\nconst handleRemoveSuggestedChainInfoMsg = service => {\n  return (_, msg) => __awaiter(void 0, void 0, void 0, function* () {\n    yield service.removeChainInfo(msg.chainId);\n    return yield service.getChainInfos();\n  });\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAQA;AASO,MAAMA,UAAU,GAAyCC,OAAO,IAAI;EACzE,OAAO,CAACC,GAAQ,EAAEC,GAAqB,KAAI;IACzC,QAAQA,GAAG,CAACC,WAAW;MACrB,KAAKC,2BAAgB;QACnB,OAAOC,sBAAsB,CAACL,OAAO,CAAC,CAACC,GAAG,EAAEC,GAAuB,CAAC;MACtE,KAAKE,8BAAmB;QACtB,OAAOE,yBAAyB,CAACN,OAAO,CAAC,CACvCC,GAAG,EACHC,GAA0B,CAC3B;MACH,KAAKE,sCAA2B;QAC9B,OAAOG,iCAAiC,CAACP,OAAO,CAAC,CAC/CC,GAAG,EACHC,GAAkC,CACnC;MACH;QACE,MAAM,IAAIM,mBAAU,CAAC,QAAQ,EAAE,GAAG,EAAE,kBAAkB,CAAC;IAAC;EAE9D,CAAC;AACH,CAAC;AAnBYC,kBAAU;AAqBvB,MAAMJ,sBAAsB,GAEcL,OAAO,IAAI;EACnD,OAAO,MAAWU;IAChB,MAAMC,UAAU,GAAG,MAAMX,OAAO,CAACY,aAAa,EAAE;IAChD,OAAO;MACLD;KACD;EACH,CAAC;AACH,CAAC;AAED,MAAML,yBAAyB,GAEcN,OAAO,IAAI;EACtD,OAAO,CAAOC,GAAG,EAAEC,GAAG,KAAIQ;IACxB,IAAI,MAAMV,OAAO,CAACa,YAAY,CAACX,GAAG,CAACY,SAAS,CAACC,OAAO,CAAC,EAAE;MACrD;MACA;;IAGF,MAAMD,SAAS,GAAGZ,GAAG,CAACY,SAAiC;IACvD;IACAA,SAAS,CAACE,IAAI,GAAG,IAAI;IAErB,MAAMhB,OAAO,CAACiB,gBAAgB,CAAChB,GAAG,EAAEa,SAAS,EAAEZ,GAAG,CAACgB,MAAM,CAAC;EAC5D,CAAC;AACH,CAAC;AAED,MAAMX,iCAAiC,GAEcP,OAAO,IAAI;EAC9D,OAAO,CAAOmB,CAAC,EAAEjB,GAAG,KAAIQ;IACtB,MAAMV,OAAO,CAACoB,eAAe,CAAClB,GAAG,CAACa,OAAO,CAAC;IAC1C,OAAO,MAAMf,OAAO,CAACY,aAAa,EAAE;EACtC,CAAC;AACH,CAAC","names":["getHandler","service","env","msg","constructor","messages_1","handleGetChainInfosMsg","handleSuggestChainInfoMsg","handleRemoveSuggestedChainInfoMsg","router_1","exports","__awaiter","chainInfos","getChainInfos","hasChainInfo","chainInfo","chainId","beta","suggestChainInfo","origin","_","removeChainInfo"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/@keplr-wallet/background/src/chains/handler.ts"],"sourcesContent":["import {\n  Env,\n  Handler,\n  InternalHandler,\n  KeplrError,\n  Message,\n} from \"@keplr-wallet/router\";\nimport { ChainsService } from \"./service\";\nimport {\n  GetChainInfosMsg,\n  RemoveSuggestedChainInfoMsg,\n  SuggestChainInfoMsg,\n} from \"./messages\";\nimport { ChainInfo } from \"@keplr-wallet/types\";\n\ntype Writeable<T> = { -readonly [P in keyof T]: T[P] };\n\nexport const getHandler: (service: ChainsService) => Handler = (service) => {\n  return (env: Env, msg: Message<unknown>) => {\n    switch (msg.constructor) {\n      case GetChainInfosMsg:\n        return handleGetChainInfosMsg(service)(env, msg as GetChainInfosMsg);\n      case SuggestChainInfoMsg:\n        return handleSuggestChainInfoMsg(service)(\n          env,\n          msg as SuggestChainInfoMsg\n        );\n      case RemoveSuggestedChainInfoMsg:\n        return handleRemoveSuggestedChainInfoMsg(service)(\n          env,\n          msg as RemoveSuggestedChainInfoMsg\n        );\n      default:\n        throw new KeplrError(\"chains\", 110, \"Unknown msg type\");\n    }\n  };\n};\n\nconst handleGetChainInfosMsg: (\n  service: ChainsService\n) => InternalHandler<GetChainInfosMsg> = (service) => {\n  return async () => {\n    const chainInfos = await service.getChainInfos();\n    return {\n      chainInfos,\n    };\n  };\n};\n\nconst handleSuggestChainInfoMsg: (\n  service: ChainsService\n) => InternalHandler<SuggestChainInfoMsg> = (service) => {\n  return async (env, msg) => {\n    if (await service.hasChainInfo(msg.chainInfo.chainId)) {\n      // If suggested chain info is already registered, just return.\n      return;\n    }\n\n    const chainInfo = msg.chainInfo as Writeable<ChainInfo>;\n    // And, always handle it as beta.\n    chainInfo.beta = true;\n\n    await service.suggestChainInfo(env, chainInfo, msg.origin);\n  };\n};\n\nconst handleRemoveSuggestedChainInfoMsg: (\n  service: ChainsService\n) => InternalHandler<RemoveSuggestedChainInfoMsg> = (service) => {\n  return async (_, msg) => {\n    await service.removeChainInfo(msg.chainId);\n    return await service.getChainInfos();\n  };\n};\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}