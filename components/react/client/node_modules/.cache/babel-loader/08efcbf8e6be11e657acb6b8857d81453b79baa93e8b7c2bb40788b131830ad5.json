{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __exportStar = this && this.__exportStar || function (m, exports) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.init = void 0;\nconst PersistentMemory = __importStar(require(\"./persistent-memory/internal\"));\nconst Chains = __importStar(require(\"./chains/internal\"));\nconst Ledger = __importStar(require(\"./ledger/internal\"));\nconst KeyRing = __importStar(require(\"./keyring/internal\"));\nconst SecretWasm = __importStar(require(\"./secret-wasm/internal\"));\nconst BackgroundTx = __importStar(require(\"./tx/internal\"));\nconst Updater = __importStar(require(\"./updater/internal\"));\nconst Tokens = __importStar(require(\"./tokens/internal\"));\nconst Interaction = __importStar(require(\"./interaction/internal\"));\nconst Permission = __importStar(require(\"./permission/internal\"));\nconst PhishingList = __importStar(require(\"./phishing-list/internal\"));\n__exportStar(require(\"./persistent-memory\"), exports);\n__exportStar(require(\"./chains\"), exports);\n__exportStar(require(\"./ledger\"), exports);\n__exportStar(require(\"./keyring\"), exports);\n__exportStar(require(\"./secret-wasm\"), exports);\n__exportStar(require(\"./tx\"), exports);\n__exportStar(require(\"./updater\"), exports);\n__exportStar(require(\"./tokens\"), exports);\n__exportStar(require(\"./interaction\"), exports);\n__exportStar(require(\"./permission\"), exports);\n__exportStar(require(\"./phishing-list\"), exports);\nfunction init(router, storeCreator,\n// Message requester to the content script.\neventMsgRequester, embedChainInfos,\n// The origins that are able to pass any permission.\nprivilegedOrigins, commonCrypto, notification) {\n  let ledgerOptions = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : {};\n  let experimentalOptions = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : {};\n  var _a;\n  const interactionService = new Interaction.InteractionService(eventMsgRequester, commonCrypto.rng);\n  const persistentMemoryService = new PersistentMemory.PersistentMemoryService();\n  const permissionService = new Permission.PermissionService(storeCreator(\"permission\"), privilegedOrigins);\n  const chainUpdaterService = new Updater.ChainUpdaterService(storeCreator(\"updator\"));\n  const tokensService = new Tokens.TokensService(storeCreator(\"tokens\"));\n  const chainsService = new Chains.ChainsService(storeCreator(\"chains\"), embedChainInfos, {\n    useMemoryKVStoreForSuggestChain: (_a = experimentalOptions.suggestChain) === null || _a === void 0 ? void 0 : _a.useMemoryKVStore\n  });\n  const ledgerService = new Ledger.LedgerService(storeCreator(\"ledger\"), ledgerOptions);\n  const keyRingService = new KeyRing.KeyRingService(storeCreator(\"keyring\"), embedChainInfos, commonCrypto);\n  const secretWasmService = new SecretWasm.SecretWasmService(storeCreator(\"secretwasm\"));\n  const backgroundTxService = new BackgroundTx.BackgroundTxService(notification);\n  const phishingListService = new PhishingList.PhishingListService({\n    blockListUrl: \"https://raw.githubusercontent.com/chainapsis/phishing-block-list/main/block-list.txt\",\n    fetchingIntervalMs: 3 * 3600 * 1000,\n    retryIntervalMs: 10 * 60 * 1000\n  });\n  interactionService.init();\n  persistentMemoryService.init();\n  permissionService.init(interactionService, chainsService, keyRingService);\n  chainUpdaterService.init(chainsService);\n  tokensService.init(interactionService, permissionService, chainsService, keyRingService);\n  chainsService.init(chainUpdaterService, interactionService);\n  ledgerService.init(interactionService);\n  keyRingService.init(interactionService, chainsService, permissionService, ledgerService);\n  secretWasmService.init(chainsService, keyRingService, permissionService);\n  backgroundTxService.init(chainsService, permissionService);\n  phishingListService.init();\n  Interaction.init(router, interactionService);\n  PersistentMemory.init(router, persistentMemoryService);\n  Permission.init(router, permissionService);\n  Updater.init(router, chainUpdaterService);\n  Tokens.init(router, tokensService);\n  Chains.init(router, chainsService);\n  Ledger.init(router, ledgerService);\n  KeyRing.init(router, keyRingService);\n  SecretWasm.init(router, secretWasmService);\n  BackgroundTx.init(router, backgroundTxService);\n  PhishingList.init(router, phishingListService);\n}\nexports.init = init;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AAQA,SAAgBC,IAAI,CAClBC,MAAc,EACdC,YAAyC;AACzC;AACAC,iBAAmC,EACnCC,eAA4B;AAC5B;AACAC,iBAA2B,EAC3BC,YAA0B,EAC1BC,YAA0B,EASnB;EAAA,IARPC,oFAAwC,EAAE;EAAA,IAC1CC,0FAOK,EAAE;;EAEP,MAAMC,kBAAkB,GAAG,IAAIC,WAAW,CAACC,kBAAkB,CAC3DT,iBAAiB,EACjBG,YAAY,CAACO,GAAG,CACjB;EAED,MAAMC,uBAAuB,GAAG,IAAIC,gBAAgB,CAACC,uBAAuB,EAAE;EAE9E,MAAMC,iBAAiB,GAAG,IAAIC,UAAU,CAACC,iBAAiB,CACxDjB,YAAY,CAAC,YAAY,CAAC,EAC1BG,iBAAiB,CAClB;EAED,MAAMe,mBAAmB,GAAG,IAAIC,OAAO,CAACC,mBAAmB,CACzDpB,YAAY,CAAC,SAAS,CAAC,CACxB;EAED,MAAMqB,aAAa,GAAG,IAAIC,MAAM,CAACC,aAAa,CAACvB,YAAY,CAAC,QAAQ,CAAC,CAAC;EAEtE,MAAMwB,aAAa,GAAG,IAAIC,MAAM,CAACC,aAAa,CAC5C1B,YAAY,CAAC,QAAQ,CAAC,EACtBE,eAAe,EACf;IACEyB,+BAA+B,QAC7BpB,mBAAmB,CAACqB,YAAY,0CAAEC;GACrC,CACF;EAED,MAAMC,aAAa,GAAG,IAAIC,MAAM,CAACC,aAAa,CAC5ChC,YAAY,CAAC,QAAQ,CAAC,EACtBM,aAAa,CACd;EAED,MAAM2B,cAAc,GAAG,IAAIC,OAAO,CAACC,cAAc,CAC/CnC,YAAY,CAAC,SAAS,CAAC,EACvBE,eAAe,EACfE,YAAY,CACb;EAED,MAAMgC,iBAAiB,GAAG,IAAIC,UAAU,CAACC,iBAAiB,CACxDtC,YAAY,CAAC,YAAY,CAAC,CAC3B;EAED,MAAMuC,mBAAmB,GAAG,IAAIC,YAAY,CAACC,mBAAmB,CAC9DpC,YAAY,CACb;EAED,MAAMqC,mBAAmB,GAAG,IAAIC,YAAY,CAACC,mBAAmB,CAAC;IAC/DC,YAAY,EACV,sFAAsF;IACxFC,kBAAkB,EAAE,CAAC,GAAG,IAAI,GAAG,IAAI;IACnCC,eAAe,EAAE,EAAE,GAAG,EAAE,GAAG;GAC5B,CAAC;EAEFvC,kBAAkB,CAACV,IAAI,EAAE;EACzBc,uBAAuB,CAACd,IAAI,EAAE;EAC9BiB,iBAAiB,CAACjB,IAAI,CAACU,kBAAkB,EAAEgB,aAAa,EAAES,cAAc,CAAC;EACzEf,mBAAmB,CAACpB,IAAI,CAAC0B,aAAa,CAAC;EACvCH,aAAa,CAACvB,IAAI,CAChBU,kBAAkB,EAClBO,iBAAiB,EACjBS,aAAa,EACbS,cAAc,CACf;EACDT,aAAa,CAAC1B,IAAI,CAACoB,mBAAmB,EAAEV,kBAAkB,CAAC;EAC3DsB,aAAa,CAAChC,IAAI,CAACU,kBAAkB,CAAC;EACtCyB,cAAc,CAACnC,IAAI,CACjBU,kBAAkB,EAClBgB,aAAa,EACbT,iBAAiB,EACjBe,aAAa,CACd;EACDM,iBAAiB,CAACtC,IAAI,CAAC0B,aAAa,EAAES,cAAc,EAAElB,iBAAiB,CAAC;EACxEwB,mBAAmB,CAACzC,IAAI,CAAC0B,aAAa,EAAET,iBAAiB,CAAC;EAC1D2B,mBAAmB,CAAC5C,IAAI,EAAE;EAE1BW,WAAW,CAACX,IAAI,CAACC,MAAM,EAAES,kBAAkB,CAAC;EAC5CK,gBAAgB,CAACf,IAAI,CAACC,MAAM,EAAEa,uBAAuB,CAAC;EACtDI,UAAU,CAAClB,IAAI,CAACC,MAAM,EAAEgB,iBAAiB,CAAC;EAC1CI,OAAO,CAACrB,IAAI,CAACC,MAAM,EAAEmB,mBAAmB,CAAC;EACzCI,MAAM,CAACxB,IAAI,CAACC,MAAM,EAAEsB,aAAa,CAAC;EAClCI,MAAM,CAAC3B,IAAI,CAACC,MAAM,EAAEyB,aAAa,CAAC;EAClCO,MAAM,CAACjC,IAAI,CAACC,MAAM,EAAE+B,aAAa,CAAC;EAClCI,OAAO,CAACpC,IAAI,CAACC,MAAM,EAAEkC,cAAc,CAAC;EACpCI,UAAU,CAACvC,IAAI,CAACC,MAAM,EAAEqC,iBAAiB,CAAC;EAC1CI,YAAY,CAAC1C,IAAI,CAACC,MAAM,EAAEwC,mBAAmB,CAAC;EAC9CI,YAAY,CAAC7C,IAAI,CAACC,MAAM,EAAE2C,mBAAmB,CAAC;AAChD;AA1GAM","names":["__exportStar","init","router","storeCreator","eventMsgRequester","embedChainInfos","privilegedOrigins","commonCrypto","notification","ledgerOptions","experimentalOptions","interactionService","Interaction","InteractionService","rng","persistentMemoryService","PersistentMemory","PersistentMemoryService","permissionService","Permission","PermissionService","chainUpdaterService","Updater","ChainUpdaterService","tokensService","Tokens","TokensService","chainsService","Chains","ChainsService","useMemoryKVStoreForSuggestChain","suggestChain","useMemoryKVStore","ledgerService","Ledger","LedgerService","keyRingService","KeyRing","KeyRingService","secretWasmService","SecretWasm","SecretWasmService","backgroundTxService","BackgroundTx","BackgroundTxService","phishingListService","PhishingList","PhishingListService","blockListUrl","fetchingIntervalMs","retryIntervalMs","exports"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/@keplr-wallet/background/src/index.ts"],"sourcesContent":["import { MessageRequester, Router } from \"@keplr-wallet/router\";\n\nimport * as PersistentMemory from \"./persistent-memory/internal\";\nimport * as Chains from \"./chains/internal\";\nimport * as Ledger from \"./ledger/internal\";\nimport * as KeyRing from \"./keyring/internal\";\nimport * as SecretWasm from \"./secret-wasm/internal\";\nimport * as BackgroundTx from \"./tx/internal\";\nimport * as Updater from \"./updater/internal\";\nimport * as Tokens from \"./tokens/internal\";\nimport * as Interaction from \"./interaction/internal\";\nimport * as Permission from \"./permission/internal\";\nimport * as PhishingList from \"./phishing-list/internal\";\n\nexport * from \"./persistent-memory\";\nexport * from \"./chains\";\nexport * from \"./ledger\";\nexport * from \"./keyring\";\nexport * from \"./secret-wasm\";\nexport * from \"./tx\";\nexport * from \"./updater\";\nexport * from \"./tokens\";\nexport * from \"./interaction\";\nexport * from \"./permission\";\nexport * from \"./phishing-list\";\n\nimport { KVStore } from \"@keplr-wallet/common\";\nimport { ChainInfo } from \"@keplr-wallet/types\";\nimport { CommonCrypto } from \"./keyring\";\nimport { Notification } from \"./tx\";\nimport { LedgerOptions } from \"./ledger/options\";\n\nexport function init(\n  router: Router,\n  storeCreator: (prefix: string) => KVStore,\n  // Message requester to the content script.\n  eventMsgRequester: MessageRequester,\n  embedChainInfos: ChainInfo[],\n  // The origins that are able to pass any permission.\n  privilegedOrigins: string[],\n  commonCrypto: CommonCrypto,\n  notification: Notification,\n  ledgerOptions: Partial<LedgerOptions> = {},\n  experimentalOptions: Partial<{\n    suggestChain: Partial<{\n      // Chains registered as suggest chains are managed in memory.\n      // In other words, it disappears when the app is closed.\n      // General operation should be fine. This is a temporary solution for the mobile app.\n      useMemoryKVStore: boolean;\n    }>;\n  }> = {}\n) {\n  const interactionService = new Interaction.InteractionService(\n    eventMsgRequester,\n    commonCrypto.rng\n  );\n\n  const persistentMemoryService = new PersistentMemory.PersistentMemoryService();\n\n  const permissionService = new Permission.PermissionService(\n    storeCreator(\"permission\"),\n    privilegedOrigins\n  );\n\n  const chainUpdaterService = new Updater.ChainUpdaterService(\n    storeCreator(\"updator\")\n  );\n\n  const tokensService = new Tokens.TokensService(storeCreator(\"tokens\"));\n\n  const chainsService = new Chains.ChainsService(\n    storeCreator(\"chains\"),\n    embedChainInfos,\n    {\n      useMemoryKVStoreForSuggestChain:\n        experimentalOptions.suggestChain?.useMemoryKVStore,\n    }\n  );\n\n  const ledgerService = new Ledger.LedgerService(\n    storeCreator(\"ledger\"),\n    ledgerOptions\n  );\n\n  const keyRingService = new KeyRing.KeyRingService(\n    storeCreator(\"keyring\"),\n    embedChainInfos,\n    commonCrypto\n  );\n\n  const secretWasmService = new SecretWasm.SecretWasmService(\n    storeCreator(\"secretwasm\")\n  );\n\n  const backgroundTxService = new BackgroundTx.BackgroundTxService(\n    notification\n  );\n\n  const phishingListService = new PhishingList.PhishingListService({\n    blockListUrl:\n      \"https://raw.githubusercontent.com/chainapsis/phishing-block-list/main/block-list.txt\",\n    fetchingIntervalMs: 3 * 3600 * 1000, // 3 hours\n    retryIntervalMs: 10 * 60 * 1000, // 10 mins\n  });\n\n  interactionService.init();\n  persistentMemoryService.init();\n  permissionService.init(interactionService, chainsService, keyRingService);\n  chainUpdaterService.init(chainsService);\n  tokensService.init(\n    interactionService,\n    permissionService,\n    chainsService,\n    keyRingService\n  );\n  chainsService.init(chainUpdaterService, interactionService);\n  ledgerService.init(interactionService);\n  keyRingService.init(\n    interactionService,\n    chainsService,\n    permissionService,\n    ledgerService\n  );\n  secretWasmService.init(chainsService, keyRingService, permissionService);\n  backgroundTxService.init(chainsService, permissionService);\n  phishingListService.init();\n\n  Interaction.init(router, interactionService);\n  PersistentMemory.init(router, persistentMemoryService);\n  Permission.init(router, permissionService);\n  Updater.init(router, chainUpdaterService);\n  Tokens.init(router, tokensService);\n  Chains.init(router, chainsService);\n  Ledger.init(router, ledgerService);\n  KeyRing.init(router, keyRingService);\n  SecretWasm.init(router, secretWasmService);\n  BackgroundTx.init(router, backgroundTxService);\n  PhishingList.init(router, phishingListService);\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}