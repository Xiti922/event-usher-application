{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst encoding_1 = require(\"@iov/encoding\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst elliptic_1 = __importDefault(require(\"elliptic\"));\nconst secp256k1signature_1 = require(\"./secp256k1signature\");\nconst secp256k1 = new elliptic_1.default.ec(\"secp256k1\");\nconst secp256k1N = new bn_js_1.default(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141\", \"hex\");\nclass Secp256k1 {\n  static async makeKeypair(privkey) {\n    if (privkey.length !== 32) {\n      // is this check missing in secp256k1.validatePrivateKey?\n      // https://github.com/bitjson/bitcoin-ts/issues/4\n      throw new Error(\"input data is not a valid secp256k1 private key\");\n    }\n    const keypair = secp256k1.keyFromPrivate(privkey);\n    if (keypair.validate().result !== true) {\n      throw new Error(\"input data is not a valid secp256k1 private key\");\n    }\n    // range test that is not part of the elliptic implementation\n    const privkeyAsBigInteger = new bn_js_1.default(privkey);\n    if (privkeyAsBigInteger.gte(secp256k1N)) {\n      // not strictly smaller than N\n      throw new Error(\"input data is not a valid secp256k1 private key\");\n    }\n    const out = {\n      privkey: encoding_1.Encoding.fromHex(keypair.getPrivate(\"hex\")),\n      // encodes uncompressed as\n      // - 1-byte prefix \"04\"\n      // - 32-byte x coordinate\n      // - 32-byte y coordinate\n      pubkey: encoding_1.Encoding.fromHex(keypair.getPublic().encode(\"hex\"))\n    };\n    return out;\n  }\n  // Creates a signature that is\n  // - deterministic (RFC 6979)\n  // - lowS signature\n  // - DER encoded\n  static async createSignature(messageHash, privkey) {\n    if (messageHash.length === 0) {\n      throw new Error(\"Message hash must not be empty\");\n    }\n    if (messageHash.length > 32) {\n      throw new Error(\"Message hash length must not exceed 32 bytes\");\n    }\n    const keypair = secp256k1.keyFromPrivate(privkey);\n    // the `canonical` option ensures creation of lowS signature representations\n    const signature = keypair.sign(messageHash, {\n      canonical: true\n    });\n    return new secp256k1signature_1.ExtendedSecp256k1Signature(Uint8Array.from(signature.r.toArray()), Uint8Array.from(signature.s.toArray()), signature.recoveryParam);\n  }\n  static async verifySignature(signature, messageHash, pubkey) {\n    if (messageHash.length === 0) {\n      throw new Error(\"Message hash must not be empty\");\n    }\n    if (messageHash.length > 32) {\n      throw new Error(\"Message hash length must not exceed 32 bytes\");\n    }\n    const keypair = secp256k1.keyFromPublic(pubkey);\n    // From https://github.com/indutny/elliptic:\n    //\n    //     Sign the message's hash (input must be an array, or a hex-string)\n    //\n    //     Signature MUST be either:\n    //     1) DER-encoded signature as hex-string; or\n    //     2) DER-encoded signature as buffer; or\n    //     3) object with two hex-string properties (r and s); or\n    //     4) object with two buffer properties (r and s)\n    //\n    // Uint8Array is not a Buffer, but elliptic seems to be happy with the interface\n    // common to both types. Uint8Array is not an array of ints but the interface is\n    // similar\n    try {\n      return keypair.verify(messageHash, signature.toDer());\n    } catch (error) {\n      return false;\n    }\n  }\n  static recoverPubkey(signature, messageHash) {\n    const signatureForElliptic = {\n      r: encoding_1.Encoding.toHex(signature.r()),\n      s: encoding_1.Encoding.toHex(signature.s())\n    };\n    const point = secp256k1.recoverPubKey(messageHash, signatureForElliptic, signature.recovery);\n    const keypair = secp256k1.keyFromPublic(point);\n    return encoding_1.Encoding.fromHex(keypair.getPublic(false, \"hex\"));\n  }\n  static compressPubkey(pubkey) {\n    switch (pubkey.length) {\n      case 33:\n        return pubkey;\n      case 65:\n        return Uint8Array.from(secp256k1.keyFromPublic(pubkey).pub.encodeCompressed());\n      default:\n        throw new Error(\"Invalid pubkey length\");\n    }\n  }\n  static trimRecoveryByte(signature) {\n    switch (signature.length) {\n      case 64:\n        return signature;\n      case 65:\n        return signature.slice(0, 64);\n      default:\n        throw new Error(\"Invalid signature length\");\n    }\n  }\n}\nexports.Secp256k1 = Secp256k1;","map":{"version":3,"mappings":"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","names":["secp256k1","elliptic_1","ec","secp256k1N","bn_js_1","Secp256k1","makeKeypair","privkey","length","Error","keypair","keyFromPrivate","validate","result","privkeyAsBigInteger","gte","out","encoding_1","fromHex","getPrivate","pubkey","getPublic","encode","createSignature","messageHash","signature","sign","canonical","secp256k1signature_1","Uint8Array","from","r","toArray","s","recoveryParam","verifySignature","keyFromPublic","verify","toDer","error","recoverPubkey","signatureForElliptic","toHex","point","recoverPubKey","recovery","compressPubkey","pub","encodeCompressed","trimRecoveryByte","slice","exports"],"sources":["../src/secp256k1.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}