{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ProtoSignDocDecoder = void 0;\nconst tx_1 = require(\"@keplr-wallet/proto-types/cosmos/tx/v1beta1/tx\");\nconst codec_1 = require(\"../codec\");\nclass ProtoSignDocDecoder {\n  constructor(signDoc) {\n    let protoCodec = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : codec_1.defaultProtoCodec;\n    this.signDoc = signDoc;\n    this.protoCodec = protoCodec;\n  }\n  static decode(bytes) {\n    return new ProtoSignDocDecoder(tx_1.SignDoc.decode(bytes));\n  }\n  get txBody() {\n    if (!this._txBody) {\n      this._txBody = tx_1.TxBody.decode(this.signDoc.bodyBytes);\n    }\n    return this._txBody;\n  }\n  get txMsgs() {\n    const msgs = [];\n    for (const msg of this.txBody.messages) {\n      msgs.push(this.protoCodec.unpackAny(msg));\n    }\n    return msgs;\n  }\n  get authInfo() {\n    if (!this._authInfo) {\n      this._authInfo = tx_1.AuthInfo.decode(this.signDoc.authInfoBytes);\n    }\n    return this._authInfo;\n  }\n  get chainId() {\n    return this.signDoc.chainId;\n  }\n  get accountNumber() {\n    return this.signDoc.accountNumber.toString();\n  }\n  toBytes() {\n    return tx_1.SignDoc.encode(this.signDoc).finish();\n  }\n  toJSON() {\n    return {\n      txBody: Object.assign(Object.assign({}, tx_1.TxBody.toJSON(this.txBody)), {\n        messages: this.txMsgs.map(msg => {\n          if (msg) {\n            if (msg instanceof codec_1.UnknownMessage) {\n              return msg.toJSON();\n            }\n            if (\"factory\" in msg) {\n              return msg.factory.toJSON(msg.unpacked);\n            }\n          }\n          return msg;\n        })\n      }),\n      authInfo: tx_1.AuthInfo.toJSON(this.authInfo),\n      chainId: this.chainId,\n      accountNumber: this.accountNumber\n    };\n  }\n}\nexports.ProtoSignDocDecoder = ProtoSignDocDecoder;","map":{"version":3,"mappings":";;;;;;AAAA;AAKA;AAOA,MAAaA,mBAAmB;EAQ9BC,YACkBC,OAAgB,EAC6B;IAAA,IAA1CC,iFAAyBC,yBAAiB;IAD7C,YAAO,GAAPF,OAAO;IACJ,eAAU,GAAVC,UAAU;EAC5B;EAVI,OAAOE,MAAM,CAACC,KAAiB;IACpC,OAAO,IAAIN,mBAAmB,CAACO,YAAO,CAACF,MAAM,CAACC,KAAK,CAAC,CAAC;EACvD;EAUA,IAAIE,MAAM;IACR,IAAI,CAAC,IAAI,CAACC,OAAO,EAAE;MACjB,IAAI,CAACA,OAAO,GAAGF,WAAM,CAACF,MAAM,CAAC,IAAI,CAACH,OAAO,CAACQ,SAAS,CAAC;;IAGtD,OAAO,IAAI,CAACD,OAAO;EACrB;EAEA,IAAIE,MAAM;IACR,MAAMC,IAAI,GAAsB,EAAE;IAClC,KAAK,MAAMC,GAAG,IAAI,IAAI,CAACL,MAAM,CAACM,QAAQ,EAAE;MACtCF,IAAI,CAACG,IAAI,CAAC,IAAI,CAACZ,UAAU,CAACa,SAAS,CAACH,GAAG,CAAC,CAAC;;IAG3C,OAAOD,IAAI;EACb;EAEA,IAAIK,QAAQ;IACV,IAAI,CAAC,IAAI,CAACC,SAAS,EAAE;MACnB,IAAI,CAACA,SAAS,GAAGX,aAAQ,CAACF,MAAM,CAAC,IAAI,CAACH,OAAO,CAACiB,aAAa,CAAC;;IAG9D,OAAO,IAAI,CAACD,SAAS;EACvB;EAEA,IAAIE,OAAO;IACT,OAAO,IAAI,CAAClB,OAAO,CAACkB,OAAO;EAC7B;EAEA,IAAIC,aAAa;IACf,OAAO,IAAI,CAACnB,OAAO,CAACmB,aAAa,CAACC,QAAQ,EAAE;EAC9C;EAEAC,OAAO;IACL,OAAOhB,YAAO,CAACiB,MAAM,CAAC,IAAI,CAACtB,OAAO,CAAC,CAACuB,MAAM,EAAE;EAC9C;EAEAC,MAAM;IACJ,OAAO;MACLlB,MAAM,kCACAD,WAAM,CAACmB,MAAM,CAAC,IAAI,CAAClB,MAAM,CAAS,GACnC;QACDM,QAAQ,EAAE,IAAI,CAACH,MAAM,CAACgB,GAAG,CAAEd,GAAG,IAAI;UAChC,IAAIA,GAAG,EAAE;YACP,IAAIA,GAAG,YAAYT,sBAAc,EAAE;cACjC,OAAOS,GAAG,CAACa,MAAM,EAAE;;YAErB,IAAI,SAAS,IAAIb,GAAG,EAAE;cACpB,OAAOA,GAAG,CAACe,OAAO,CAACF,MAAM,CAACb,GAAG,CAACgB,QAAQ,CAAC;;;UAG3C,OAAOhB,GAAG;QACZ,CAAC;OACF,CACF;MACDI,QAAQ,EAAEV,aAAQ,CAACmB,MAAM,CAAC,IAAI,CAACT,QAAQ,CAAC;MACxCG,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBC,aAAa,EAAE,IAAI,CAACA;KACrB;EACH;;AAxEFS","names":["ProtoSignDocDecoder","constructor","signDoc","protoCodec","codec_1","decode","bytes","tx_1","txBody","_txBody","bodyBytes","txMsgs","msgs","msg","messages","push","unpackAny","authInfo","_authInfo","authInfoBytes","chainId","accountNumber","toString","toBytes","encode","finish","toJSON","map","factory","unpacked","exports"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/@keplr-wallet/stores/node_modules/@keplr-wallet/cosmos/src/stargate/decoder/index.ts"],"sourcesContent":["import {\n  SignDoc,\n  TxBody,\n  AuthInfo,\n} from \"@keplr-wallet/proto-types/cosmos/tx/v1beta1/tx\";\nimport {\n  AnyWithUnpacked,\n  defaultProtoCodec,\n  ProtoCodec,\n  UnknownMessage,\n} from \"../codec\";\n\nexport class ProtoSignDocDecoder {\n  public static decode(bytes: Uint8Array): ProtoSignDocDecoder {\n    return new ProtoSignDocDecoder(SignDoc.decode(bytes));\n  }\n\n  protected _txBody?: TxBody;\n  protected _authInfo?: AuthInfo;\n\n  constructor(\n    public readonly signDoc: SignDoc,\n    protected readonly protoCodec: ProtoCodec = defaultProtoCodec\n  ) {}\n\n  get txBody(): TxBody {\n    if (!this._txBody) {\n      this._txBody = TxBody.decode(this.signDoc.bodyBytes);\n    }\n\n    return this._txBody;\n  }\n\n  get txMsgs(): AnyWithUnpacked[] {\n    const msgs: AnyWithUnpacked[] = [];\n    for (const msg of this.txBody.messages) {\n      msgs.push(this.protoCodec.unpackAny(msg));\n    }\n\n    return msgs;\n  }\n\n  get authInfo(): AuthInfo {\n    if (!this._authInfo) {\n      this._authInfo = AuthInfo.decode(this.signDoc.authInfoBytes);\n    }\n\n    return this._authInfo;\n  }\n\n  get chainId(): string {\n    return this.signDoc.chainId;\n  }\n\n  get accountNumber(): string {\n    return this.signDoc.accountNumber.toString();\n  }\n\n  toBytes(): Uint8Array {\n    return SignDoc.encode(this.signDoc).finish();\n  }\n\n  toJSON(): any {\n    return {\n      txBody: {\n        ...(TxBody.toJSON(this.txBody) as any),\n        ...{\n          messages: this.txMsgs.map((msg) => {\n            if (msg) {\n              if (msg instanceof UnknownMessage) {\n                return msg.toJSON();\n              }\n              if (\"factory\" in msg) {\n                return msg.factory.toJSON(msg.unpacked);\n              }\n            }\n            return msg;\n          }),\n        },\n      },\n      authInfo: AuthInfo.toJSON(this.authInfo),\n      chainId: this.chainId,\n      accountNumber: this.accountNumber,\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}