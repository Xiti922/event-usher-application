{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Coin = void 0;\nconst int_1 = require(\"./int\");\nclass Coin {\n  constructor(denom, amount) {\n    this.denom = denom;\n    this.amount = amount instanceof int_1.Int ? amount : new int_1.Int(amount);\n  }\n  static parse(str) {\n    const re = new RegExp(\"([0-9]+)[ ]*([a-zA-Z]+)$\");\n    const execed = re.exec(str);\n    if (!execed || execed.length !== 3) {\n      throw new Error(\"Invalid coin str\");\n    }\n    const denom = execed[2];\n    const amount = execed[1];\n    return new Coin(denom, amount);\n  }\n  toString() {\n    return `${this.amount.toString()}${this.denom}`;\n  }\n}\nexports.Coin = Coin;","map":{"version":3,"mappings":";;;;;;AAAA;AAGA,MAAaA,IAAI;EAgBfC,YAAYC,KAAa,EAAEC,MAAkC;IAC3D,IAAI,CAACD,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,MAAM,GAAGA,MAAM,YAAYC,SAAG,GAAGD,MAAM,GAAG,IAAIC,SAAG,CAACD,MAAM,CAAC;EAChE;EAlBO,OAAOE,KAAK,CAACC,GAAW;IAC7B,MAAMC,EAAE,GAAG,IAAIC,MAAM,CAAC,0BAA0B,CAAC;IACjD,MAAMC,MAAM,GAAGF,EAAE,CAACG,IAAI,CAACJ,GAAG,CAAC;IAC3B,IAAI,CAACG,MAAM,IAAIA,MAAM,CAACE,MAAM,KAAK,CAAC,EAAE;MAClC,MAAM,IAAIC,KAAK,CAAC,kBAAkB,CAAC;;IAErC,MAAMV,KAAK,GAAGO,MAAM,CAAC,CAAC,CAAC;IACvB,MAAMN,MAAM,GAAGM,MAAM,CAAC,CAAC,CAAC;IACxB,OAAO,IAAIT,IAAI,CAACE,KAAK,EAAEC,MAAM,CAAC;EAChC;EAWOU,QAAQ;IACb,OAAO,GAAG,IAAI,CAACV,MAAM,CAACU,QAAQ,EAAE,GAAG,IAAI,CAACX,KAAK,EAAE;EACjD;;AAvBFY","names":["Coin","constructor","denom","amount","int_1","parse","str","re","RegExp","execed","exec","length","Error","toString","exports"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/@keplr-wallet/unit/src/coin.ts"],"sourcesContent":["import { Int } from \"./int\";\nimport bigInteger from \"big-integer\";\n\nexport class Coin {\n  public static parse(str: string): Coin {\n    const re = new RegExp(\"([0-9]+)[ ]*([a-zA-Z]+)$\");\n    const execed = re.exec(str);\n    if (!execed || execed.length !== 3) {\n      throw new Error(\"Invalid coin str\");\n    }\n    const denom = execed[2];\n    const amount = execed[1];\n    return new Coin(denom, amount);\n  }\n\n  public denom: string;\n\n  public amount: Int;\n\n  constructor(denom: string, amount: Int | bigInteger.BigNumber) {\n    this.denom = denom;\n    this.amount = amount instanceof Int ? amount : new Int(amount);\n  }\n\n  public toString(): string {\n    return `${this.amount.toString()}${this.denom}`;\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}