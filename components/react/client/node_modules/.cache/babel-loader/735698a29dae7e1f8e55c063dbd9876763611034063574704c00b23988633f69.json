{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getHandler = void 0;\nconst messages_1 = require(\"./messages\");\nconst router_1 = require(\"@keplr-wallet/router\");\nconst getHandler = service => {\n  return (env, msg) => {\n    switch (msg.constructor) {\n      case messages_1.EnableAccessMsg:\n        return handleEnableAccessMsg(service)(env, msg);\n      case messages_1.GetPermissionOriginsMsg:\n        return handleGetPermissionOriginsMsg(service)(env, msg);\n      case messages_1.GetOriginPermittedChainsMsg:\n        return handleGetOriginPermittedChainsMsg(service)(env, msg);\n      case messages_1.AddPermissionOrigin:\n        return handleAddPermissionOrigin(service)(env, msg);\n      case messages_1.RemovePermissionOrigin:\n        return handleRemovePermissionOrigin(service)(env, msg);\n      default:\n        throw new router_1.KeplrError(\"permission\", 120, \"Unknown msg type\");\n    }\n  };\n};\nexports.getHandler = getHandler;\nconst handleEnableAccessMsg = service => {\n  return (env, msg) => __awaiter(void 0, void 0, void 0, function* () {\n    return yield service.checkOrGrantBasicAccessPermission(env, msg.chainIds, msg.origin);\n  });\n};\nconst handleGetPermissionOriginsMsg = service => {\n  return (_, msg) => {\n    return service.getPermissionOrigins(msg.chainId, msg.permissionType);\n  };\n};\nconst handleGetOriginPermittedChainsMsg = service => {\n  return (_, msg) => {\n    return service.getOriginPermittedChains(msg.permissionOrigin, msg.permissionType);\n  };\n};\nconst handleAddPermissionOrigin = service => {\n  return (_, msg) => __awaiter(void 0, void 0, void 0, function* () {\n    yield service.addPermission([msg.chainId], msg.permissionType, [msg.permissionOrigin]);\n  });\n};\nconst handleRemovePermissionOrigin = service => {\n  return (_, msg) => __awaiter(void 0, void 0, void 0, function* () {\n    yield service.removePermission(msg.chainId, msg.permissionType, [msg.permissionOrigin]);\n  });\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAOA;AASO,MAAMA,UAAU,GACrBC,OAAO,IACL;EACF,OAAO,CAACC,GAAQ,EAAEC,GAAqB,KAAI;IACzC,QAAQA,GAAG,CAACC,WAAW;MACrB,KAAKC,0BAAe;QAClB,OAAOC,qBAAqB,CAACL,OAAO,CAAC,CAACC,GAAG,EAAEC,GAAsB,CAAC;MACpE,KAAKE,kCAAuB;QAC1B,OAAOE,6BAA6B,CAACN,OAAO,CAAC,CAC3CC,GAAG,EACHC,GAA8B,CAC/B;MACH,KAAKE,sCAA2B;QAC9B,OAAOG,iCAAiC,CAACP,OAAO,CAAC,CAC/CC,GAAG,EACHC,GAAkC,CACnC;MACH,KAAKE,8BAAmB;QACtB,OAAOI,yBAAyB,CAACR,OAAO,CAAC,CACvCC,GAAG,EACHC,GAA6B,CAC9B;MACH,KAAKE,iCAAsB;QACzB,OAAOK,4BAA4B,CAACT,OAAO,CAAC,CAC1CC,GAAG,EACHC,GAA6B,CAC9B;MACH;QACE,MAAM,IAAIQ,mBAAU,CAAC,YAAY,EAAE,GAAG,EAAE,kBAAkB,CAAC;IAAC;EAElE,CAAC;AACH,CAAC;AA/BYC,kBAAU;AAiCvB,MAAMN,qBAAqB,GAEcL,OAAO,IAAI;EAClD,OAAO,CAAOC,GAAG,EAAEC,GAAG,KAAIU;IACxB,OAAO,MAAMZ,OAAO,CAACa,iCAAiC,CACpDZ,GAAG,EACHC,GAAG,CAACY,QAAQ,EACZZ,GAAG,CAACa,MAAM,CACX;EACH,CAAC;AACH,CAAC;AAED,MAAMT,6BAA6B,GAEcN,OAAO,IAAI;EAC1D,OAAO,CAACgB,CAAC,EAAEd,GAAG,KAAI;IAChB,OAAOF,OAAO,CAACiB,oBAAoB,CAACf,GAAG,CAACgB,OAAO,EAAEhB,GAAG,CAACiB,cAAc,CAAC;EACtE,CAAC;AACH,CAAC;AAED,MAAMZ,iCAAiC,GAEcP,OAAO,IAAI;EAC9D,OAAO,CAACgB,CAAC,EAAEd,GAAG,KAAI;IAChB,OAAOF,OAAO,CAACoB,wBAAwB,CACrClB,GAAG,CAACmB,gBAAgB,EACpBnB,GAAG,CAACiB,cAAc,CACnB;EACH,CAAC;AACH,CAAC;AAED,MAAMX,yBAAyB,GAEcR,OAAO,IAAI;EACtD,OAAO,CAAOgB,CAAC,EAAEd,GAAG,KAAIU;IACtB,MAAMZ,OAAO,CAACsB,aAAa,CAAC,CAACpB,GAAG,CAACgB,OAAO,CAAC,EAAEhB,GAAG,CAACiB,cAAc,EAAE,CAC7DjB,GAAG,CAACmB,gBAAgB,CACrB,CAAC;EACJ,CAAC;AACH,CAAC;AAED,MAAMZ,4BAA4B,GAEcT,OAAO,IAAI;EACzD,OAAO,CAAOgB,CAAC,EAAEd,GAAG,KAAIU;IACtB,MAAMZ,OAAO,CAACuB,gBAAgB,CAACrB,GAAG,CAACgB,OAAO,EAAEhB,GAAG,CAACiB,cAAc,EAAE,CAC9DjB,GAAG,CAACmB,gBAAgB,CACrB,CAAC;EACJ,CAAC;AACH,CAAC","names":["getHandler","service","env","msg","constructor","messages_1","handleEnableAccessMsg","handleGetPermissionOriginsMsg","handleGetOriginPermittedChainsMsg","handleAddPermissionOrigin","handleRemovePermissionOrigin","router_1","exports","__awaiter","checkOrGrantBasicAccessPermission","chainIds","origin","_","getPermissionOrigins","chainId","permissionType","getOriginPermittedChains","permissionOrigin","addPermission","removePermission"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/@keplr-wallet/background/src/permission/handler.ts"],"sourcesContent":["import {\n  AddPermissionOrigin,\n  EnableAccessMsg,\n  GetOriginPermittedChainsMsg,\n  GetPermissionOriginsMsg,\n  RemovePermissionOrigin,\n} from \"./messages\";\nimport {\n  Env,\n  Handler,\n  InternalHandler,\n  KeplrError,\n  Message,\n} from \"@keplr-wallet/router\";\nimport { PermissionService } from \"./service\";\n\nexport const getHandler: (service: PermissionService) => Handler = (\n  service\n) => {\n  return (env: Env, msg: Message<unknown>) => {\n    switch (msg.constructor) {\n      case EnableAccessMsg:\n        return handleEnableAccessMsg(service)(env, msg as EnableAccessMsg);\n      case GetPermissionOriginsMsg:\n        return handleGetPermissionOriginsMsg(service)(\n          env,\n          msg as GetPermissionOriginsMsg\n        );\n      case GetOriginPermittedChainsMsg:\n        return handleGetOriginPermittedChainsMsg(service)(\n          env,\n          msg as GetOriginPermittedChainsMsg\n        );\n      case AddPermissionOrigin:\n        return handleAddPermissionOrigin(service)(\n          env,\n          msg as RemovePermissionOrigin\n        );\n      case RemovePermissionOrigin:\n        return handleRemovePermissionOrigin(service)(\n          env,\n          msg as RemovePermissionOrigin\n        );\n      default:\n        throw new KeplrError(\"permission\", 120, \"Unknown msg type\");\n    }\n  };\n};\n\nconst handleEnableAccessMsg: (\n  service: PermissionService\n) => InternalHandler<EnableAccessMsg> = (service) => {\n  return async (env, msg) => {\n    return await service.checkOrGrantBasicAccessPermission(\n      env,\n      msg.chainIds,\n      msg.origin\n    );\n  };\n};\n\nconst handleGetPermissionOriginsMsg: (\n  service: PermissionService\n) => InternalHandler<GetPermissionOriginsMsg> = (service) => {\n  return (_, msg) => {\n    return service.getPermissionOrigins(msg.chainId, msg.permissionType);\n  };\n};\n\nconst handleGetOriginPermittedChainsMsg: (\n  service: PermissionService\n) => InternalHandler<GetOriginPermittedChainsMsg> = (service) => {\n  return (_, msg) => {\n    return service.getOriginPermittedChains(\n      msg.permissionOrigin,\n      msg.permissionType\n    );\n  };\n};\n\nconst handleAddPermissionOrigin: (\n  service: PermissionService\n) => InternalHandler<AddPermissionOrigin> = (service) => {\n  return async (_, msg) => {\n    await service.addPermission([msg.chainId], msg.permissionType, [\n      msg.permissionOrigin,\n    ]);\n  };\n};\n\nconst handleRemovePermissionOrigin: (\n  service: PermissionService\n) => InternalHandler<RemovePermissionOrigin> = (service) => {\n  return async (_, msg) => {\n    await service.removePermission(msg.chainId, msg.permissionType, [\n      msg.permissionOrigin,\n    ]);\n  };\n};\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}