{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Secp256k1Wallet = void 0;\nconst crypto_1 = require(\"@cosmjs/crypto\");\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst addresses_1 = require(\"./addresses\");\nconst signature_1 = require(\"./signature\");\nconst signdoc_1 = require(\"./signdoc\");\n/**\n * A wallet that holds a single secp256k1 keypair.\n *\n * If you want to work with BIP39 mnemonics and multiple accounts, use Secp256k1HdWallet.\n */\nclass Secp256k1Wallet {\n  constructor(privkey, pubkey, prefix) {\n    this.privkey = privkey;\n    this.pubkey = pubkey;\n    this.prefix = prefix;\n  }\n  /**\n   * Creates a Secp256k1Wallet from the given private key\n   *\n   * @param privkey The private key.\n   * @param prefix The bech32 address prefix (human readable part). Defaults to \"cosmos\".\n   */\n  static async fromKey(privkey) {\n    let prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"cosmos\";\n    const uncompressed = (await crypto_1.Secp256k1.makeKeypair(privkey)).pubkey;\n    return new Secp256k1Wallet(privkey, crypto_1.Secp256k1.compressPubkey(uncompressed), prefix);\n  }\n  get address() {\n    return (0, encoding_1.toBech32)(this.prefix, (0, addresses_1.rawSecp256k1PubkeyToRawAddress)(this.pubkey));\n  }\n  async getAccounts() {\n    return [{\n      algo: \"secp256k1\",\n      address: this.address,\n      pubkey: this.pubkey\n    }];\n  }\n  async signAmino(signerAddress, signDoc) {\n    if (signerAddress !== this.address) {\n      throw new Error(`Address ${signerAddress} not found in wallet`);\n    }\n    const message = new crypto_1.Sha256((0, signdoc_1.serializeSignDoc)(signDoc)).digest();\n    const signature = await crypto_1.Secp256k1.createSignature(message, this.privkey);\n    const signatureBytes = new Uint8Array([...signature.r(32), ...signature.s(32)]);\n    return {\n      signed: signDoc,\n      signature: (0, signature_1.encodeSecp256k1Signature)(this.pubkey, signatureBytes)\n    };\n  }\n}\nexports.Secp256k1Wallet = Secp256k1Wallet;","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AAEA;AACA;AACA;AAGA;;;;;AAKA,MAAaA,eAAe;EAgB1BC,YAAoBC,OAAmB,EAAEC,MAAkB,EAAEC,MAAc;IACzE,IAAI,CAACF,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,MAAM,GAAGA,MAAM;EACtB;EAnBA;;;;;;EAMO,aAAaC,OAAO,CAACH,OAAmB,EAAmB;IAAA,IAAjBE,MAAM,uEAAG,QAAQ;IAChE,MAAME,YAAY,GAAG,CAAC,MAAMC,kBAAS,CAACC,WAAW,CAACN,OAAO,CAAC,EAAEC,MAAM;IAClE,OAAO,IAAIH,eAAe,CAACE,OAAO,EAAEK,kBAAS,CAACE,cAAc,CAACH,YAAY,CAAC,EAAEF,MAAM,CAAC;EACrF;EAYA,IAAYM,OAAO;IACjB,OAAO,uBAAQ,EAAC,IAAI,CAACN,MAAM,EAAE,8CAA8B,EAAC,IAAI,CAACD,MAAM,CAAC,CAAC;EAC3E;EAEO,MAAMQ,WAAW;IACtB,OAAO,CACL;MACEC,IAAI,EAAE,WAAW;MACjBF,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBP,MAAM,EAAE,IAAI,CAACA;KACd,CACF;EACH;EAEO,MAAMU,SAAS,CAACC,aAAqB,EAAEC,OAAmB;IAC/D,IAAID,aAAa,KAAK,IAAI,CAACJ,OAAO,EAAE;MAClC,MAAM,IAAIM,KAAK,CAAC,WAAWF,aAAa,sBAAsB,CAAC;;IAEjE,MAAMG,OAAO,GAAG,IAAIV,eAAM,CAAC,8BAAgB,EAACQ,OAAO,CAAC,CAAC,CAACG,MAAM,EAAE;IAC9D,MAAMC,SAAS,GAAG,MAAMZ,kBAAS,CAACa,eAAe,CAACH,OAAO,EAAE,IAAI,CAACf,OAAO,CAAC;IACxE,MAAMmB,cAAc,GAAG,IAAIC,UAAU,CAAC,CAAC,GAAGH,SAAS,CAACI,CAAC,CAAC,EAAE,CAAC,EAAE,GAAGJ,SAAS,CAACK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC/E,OAAO;MACLC,MAAM,EAAEV,OAAO;MACfI,SAAS,EAAE,wCAAwB,EAAC,IAAI,CAAChB,MAAM,EAAEkB,cAAc;KAChE;EACH;;AA/CFK","names":["Secp256k1Wallet","constructor","privkey","pubkey","prefix","fromKey","uncompressed","crypto_1","makeKeypair","compressPubkey","address","getAccounts","algo","signAmino","signerAddress","signDoc","Error","message","digest","signature","createSignature","signatureBytes","Uint8Array","r","s","signed","exports"],"sources":["../src/secp256k1wallet.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}