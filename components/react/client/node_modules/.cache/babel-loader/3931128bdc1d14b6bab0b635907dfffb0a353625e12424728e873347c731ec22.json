{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getHandler = void 0;\nconst router_1 = require(\"@keplr-wallet/router\");\nconst messages_1 = require(\"./messages\");\nconst cosmos_1 = require(\"@keplr-wallet/cosmos\");\nconst tx_1 = require(\"@keplr-wallet/proto-types/cosmos/tx/v1beta1/tx\");\nconst getHandler = service => {\n  return (env, msg) => {\n    switch (msg.constructor) {\n      case messages_1.RestoreKeyRingMsg:\n        return handleRestoreKeyRingMsg(service)(env, msg);\n      case messages_1.DeleteKeyRingMsg:\n        return handleDeleteKeyRingMsg(service)(env, msg);\n      case messages_1.UpdateNameKeyRingMsg:\n        return handleUpdateNameKeyRingMsg(service)(env, msg);\n      case messages_1.ShowKeyRingMsg:\n        return handleShowKeyRingMsg(service)(env, msg);\n      case messages_1.CreateMnemonicKeyMsg:\n        return handleCreateMnemonicKeyMsg(service)(env, msg);\n      case messages_1.AddMnemonicKeyMsg:\n        return handleAddMnemonicKeyMsg(service)(env, msg);\n      case messages_1.CreatePrivateKeyMsg:\n        return handleCreatePrivateKeyMsg(service)(env, msg);\n      case messages_1.AddPrivateKeyMsg:\n        return handleAddPrivateKeyMsg(service)(env, msg);\n      case messages_1.CreateLedgerKeyMsg:\n        return handleCreateLedgerKeyMsg(service)(env, msg);\n      case messages_1.AddLedgerKeyMsg:\n        return handleAddLedgerKeyMsg(service)(env, msg);\n      case messages_1.LockKeyRingMsg:\n        return handleLockKeyRingMsg(service)(env, msg);\n      case messages_1.UnlockKeyRingMsg:\n        return handleUnlockKeyRingMsg(service)(env, msg);\n      case messages_1.GetKeyMsg:\n        return handleGetKeyMsg(service)(env, msg);\n      case messages_1.RequestSignAminoMsg:\n        return handleRequestSignAminoMsg(service)(env, msg);\n      case messages_1.RequestVerifyADR36AminoSignDoc:\n        return handleRequestVerifyADR36AminoSignDoc(service)(env, msg);\n      case messages_1.RequestSignDirectMsg:\n        return handleRequestSignDirectMsg(service)(env, msg);\n      case messages_1.GetMultiKeyStoreInfoMsg:\n        return handleGetMultiKeyStoreInfoMsg(service)(env, msg);\n      case messages_1.ChangeKeyRingMsg:\n        return handleChangeKeyRingMsg(service)(env, msg);\n      case messages_1.GetIsKeyStoreCoinTypeSetMsg:\n        return handleGetIsKeyStoreCoinTypeSetMsg(service)(env, msg);\n      case messages_1.SetKeyStoreCoinTypeMsg:\n        return handleSetKeyStoreCoinTypeMsg(service)(env, msg);\n      case messages_1.CheckPasswordMsg:\n        return handleCheckPasswordMsg(service)(env, msg);\n      case messages_1.ExportKeyRingDatasMsg:\n        return handleExportKeyRingDatasMsg(service)(env, msg);\n      default:\n        throw new router_1.KeplrError(\"keyring\", 221, \"Unknown msg type\");\n    }\n  };\n};\nexports.getHandler = getHandler;\nconst handleRestoreKeyRingMsg = service => {\n  return (_env, _msg) => __awaiter(void 0, void 0, void 0, function* () {\n    return yield service.restore();\n  });\n};\nconst handleDeleteKeyRingMsg = service => {\n  return (_, msg) => __awaiter(void 0, void 0, void 0, function* () {\n    return yield service.deleteKeyRing(msg.index, msg.password);\n  });\n};\nconst handleUpdateNameKeyRingMsg = service => {\n  return (_, msg) => __awaiter(void 0, void 0, void 0, function* () {\n    return yield service.updateNameKeyRing(msg.index, msg.name);\n  });\n};\nconst handleShowKeyRingMsg = service => {\n  return (_, msg) => __awaiter(void 0, void 0, void 0, function* () {\n    return yield service.showKeyRing(msg.index, msg.password);\n  });\n};\nconst handleCreateMnemonicKeyMsg = service => {\n  return (_, msg) => __awaiter(void 0, void 0, void 0, function* () {\n    return yield service.createMnemonicKey(msg.kdf, msg.mnemonic, msg.password, msg.meta, msg.bip44HDPath);\n  });\n};\nconst handleAddMnemonicKeyMsg = service => {\n  return (_, msg) => __awaiter(void 0, void 0, void 0, function* () {\n    return yield service.addMnemonicKey(msg.kdf, msg.mnemonic, msg.meta, msg.bip44HDPath);\n  });\n};\nconst handleCreatePrivateKeyMsg = service => {\n  return (_, msg) => __awaiter(void 0, void 0, void 0, function* () {\n    return yield service.createPrivateKey(msg.kdf, msg.privateKey, msg.password, msg.meta);\n  });\n};\nconst handleAddPrivateKeyMsg = service => {\n  return (_, msg) => __awaiter(void 0, void 0, void 0, function* () {\n    return yield service.addPrivateKey(msg.kdf, msg.privateKey, msg.meta);\n  });\n};\nconst handleCreateLedgerKeyMsg = service => {\n  return (env, msg) => __awaiter(void 0, void 0, void 0, function* () {\n    return yield service.createLedgerKey(env, msg.kdf, msg.password, msg.meta, msg.bip44HDPath);\n  });\n};\nconst handleAddLedgerKeyMsg = service => {\n  return (env, msg) => __awaiter(void 0, void 0, void 0, function* () {\n    return yield service.addLedgerKey(env, msg.kdf, msg.meta, msg.bip44HDPath);\n  });\n};\nconst handleLockKeyRingMsg = service => {\n  return () => {\n    return {\n      status: service.lock()\n    };\n  };\n};\nconst handleUnlockKeyRingMsg = service => {\n  return (_, msg) => __awaiter(void 0, void 0, void 0, function* () {\n    return {\n      status: yield service.unlock(msg.password)\n    };\n  });\n};\nconst handleGetKeyMsg = service => {\n  return (env, msg) => __awaiter(void 0, void 0, void 0, function* () {\n    yield service.permissionService.checkOrGrantBasicAccessPermission(env, msg.chainId, msg.origin);\n    const key = yield service.getKey(msg.chainId);\n    return {\n      name: service.getKeyStoreMeta(\"name\"),\n      algo: \"secp256k1\",\n      pubKey: key.pubKey,\n      address: key.address,\n      bech32Address: new cosmos_1.Bech32Address(key.address).toBech32((yield service.chainsService.getChainInfo(msg.chainId)).bech32Config.bech32PrefixAccAddr),\n      isNanoLedger: key.isNanoLedger\n    };\n  });\n};\nconst handleRequestSignAminoMsg = service => {\n  return (env, msg) => __awaiter(void 0, void 0, void 0, function* () {\n    yield service.permissionService.checkOrGrantBasicAccessPermission(env, msg.chainId, msg.origin);\n    return yield service.requestSignAmino(env, msg.origin, msg.chainId, msg.signer, msg.signDoc, msg.signOptions);\n  });\n};\nconst handleRequestVerifyADR36AminoSignDoc = service => {\n  return (env, msg) => __awaiter(void 0, void 0, void 0, function* () {\n    yield service.permissionService.checkOrGrantBasicAccessPermission(env, msg.chainId, msg.origin);\n    return yield service.verifyADR36AminoSignDoc(msg.chainId, msg.signer, msg.data, msg.signature);\n  });\n};\nconst handleRequestSignDirectMsg = service => {\n  return (env, msg) => __awaiter(void 0, void 0, void 0, function* () {\n    yield service.permissionService.checkOrGrantBasicAccessPermission(env, msg.chainId, msg.origin);\n    const signDoc = tx_1.SignDoc.fromPartial({\n      bodyBytes: msg.signDoc.bodyBytes,\n      authInfoBytes: msg.signDoc.authInfoBytes,\n      chainId: msg.signDoc.chainId,\n      accountNumber: msg.signDoc.accountNumber\n    });\n    const response = yield service.requestSignDirect(env, msg.origin, msg.chainId, msg.signer, signDoc, msg.signOptions);\n    return {\n      signed: {\n        bodyBytes: response.signed.bodyBytes,\n        authInfoBytes: response.signed.authInfoBytes,\n        chainId: response.signed.chainId,\n        accountNumber: response.signed.accountNumber.toString()\n      },\n      signature: response.signature\n    };\n  });\n};\nconst handleGetMultiKeyStoreInfoMsg = service => {\n  return () => {\n    return {\n      multiKeyStoreInfo: service.getMultiKeyStoreInfo()\n    };\n  };\n};\nconst handleChangeKeyRingMsg = service => {\n  return (_, msg) => __awaiter(void 0, void 0, void 0, function* () {\n    return yield service.changeKeyStoreFromMultiKeyStore(msg.index);\n  });\n};\nconst handleGetIsKeyStoreCoinTypeSetMsg = service => {\n  return (_, msg) => {\n    return service.getKeyStoreBIP44Selectables(msg.chainId, msg.paths);\n  };\n};\nconst handleSetKeyStoreCoinTypeMsg = service => {\n  return (_, msg) => __awaiter(void 0, void 0, void 0, function* () {\n    yield service.setKeyStoreCoinType(msg.chainId, msg.coinType);\n    return service.keyRingStatus;\n  });\n};\nconst handleCheckPasswordMsg = service => {\n  return (_, msg) => {\n    return service.checkPassword(msg.password);\n  };\n};\nconst handleExportKeyRingDatasMsg = service => {\n  return (_, msg) => __awaiter(void 0, void 0, void 0, function* () {\n    return yield service.exportKeyRingDatas(msg.password);\n  });\n};","map":{"version":3,"mappings":"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","names":["getHandler","service","env","msg","constructor","messages_1","handleRestoreKeyRingMsg","handleDeleteKeyRingMsg","handleUpdateNameKeyRingMsg","handleShowKeyRingMsg","handleCreateMnemonicKeyMsg","handleAddMnemonicKeyMsg","handleCreatePrivateKeyMsg","handleAddPrivateKeyMsg","handleCreateLedgerKeyMsg","handleAddLedgerKeyMsg","handleLockKeyRingMsg","handleUnlockKeyRingMsg","handleGetKeyMsg","handleRequestSignAminoMsg","handleRequestVerifyADR36AminoSignDoc","handleRequestSignDirectMsg","handleGetMultiKeyStoreInfoMsg","handleChangeKeyRingMsg","handleGetIsKeyStoreCoinTypeSetMsg","handleSetKeyStoreCoinTypeMsg","handleCheckPasswordMsg","handleExportKeyRingDatasMsg","router_1","exports","_env","_msg","__awaiter","restore","_","deleteKeyRing","index","password","updateNameKeyRing","name","showKeyRing","createMnemonicKey","kdf","mnemonic","meta","bip44HDPath","addMnemonicKey","createPrivateKey","privateKey","addPrivateKey","createLedgerKey","addLedgerKey","status","lock","unlock","permissionService","checkOrGrantBasicAccessPermission","chainId","origin","key","getKey","getKeyStoreMeta","algo","pubKey","address","bech32Address","cosmos_1","toBech32","chainsService","getChainInfo","bech32Config","bech32PrefixAccAddr","isNanoLedger","requestSignAmino","signer","signDoc","signOptions","verifyADR36AminoSignDoc","data","signature","tx_1","fromPartial","bodyBytes","authInfoBytes","accountNumber","response","requestSignDirect","signed","toString","multiKeyStoreInfo","getMultiKeyStoreInfo","changeKeyStoreFromMultiKeyStore","getKeyStoreBIP44Selectables","paths","setKeyStoreCoinType","coinType","keyRingStatus","checkPassword","exportKeyRingDatas"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/@keplr-wallet/background/src/keyring/handler.ts"],"sourcesContent":["import {\n  Env,\n  Handler,\n  InternalHandler,\n  KeplrError,\n  Message,\n} from \"@keplr-wallet/router\";\nimport {\n  CreateMnemonicKeyMsg,\n  CreatePrivateKeyMsg,\n  GetKeyMsg,\n  UnlockKeyRingMsg,\n  RequestSignAminoMsg,\n  RequestSignDirectMsg,\n  LockKeyRingMsg,\n  DeleteKeyRingMsg,\n  UpdateNameKeyRingMsg,\n  ShowKeyRingMsg,\n  AddMnemonicKeyMsg,\n  AddPrivateKeyMsg,\n  GetMultiKeyStoreInfoMsg,\n  ChangeKeyRingMsg,\n  AddLedgerKeyMsg,\n  CreateLedgerKeyMsg,\n  SetKeyStoreCoinTypeMsg,\n  RestoreKeyRingMsg,\n  GetIsKeyStoreCoinTypeSetMsg,\n  CheckPasswordMsg,\n  ExportKeyRingDatasMsg,\n  RequestVerifyADR36AminoSignDoc,\n} from \"./messages\";\nimport { KeyRingService } from \"./service\";\nimport { Bech32Address } from \"@keplr-wallet/cosmos\";\nimport { SignDoc } from \"@keplr-wallet/proto-types/cosmos/tx/v1beta1/tx\";\n\nexport const getHandler: (service: KeyRingService) => Handler = (\n  service: KeyRingService\n) => {\n  return (env: Env, msg: Message<unknown>) => {\n    switch (msg.constructor) {\n      case RestoreKeyRingMsg:\n        return handleRestoreKeyRingMsg(service)(env, msg as RestoreKeyRingMsg);\n      case DeleteKeyRingMsg:\n        return handleDeleteKeyRingMsg(service)(env, msg as DeleteKeyRingMsg);\n      case UpdateNameKeyRingMsg:\n        return handleUpdateNameKeyRingMsg(service)(\n          env,\n          msg as UpdateNameKeyRingMsg\n        );\n      case ShowKeyRingMsg:\n        return handleShowKeyRingMsg(service)(env, msg as ShowKeyRingMsg);\n      case CreateMnemonicKeyMsg:\n        return handleCreateMnemonicKeyMsg(service)(\n          env,\n          msg as CreateMnemonicKeyMsg\n        );\n      case AddMnemonicKeyMsg:\n        return handleAddMnemonicKeyMsg(service)(env, msg as AddMnemonicKeyMsg);\n      case CreatePrivateKeyMsg:\n        return handleCreatePrivateKeyMsg(service)(\n          env,\n          msg as CreatePrivateKeyMsg\n        );\n      case AddPrivateKeyMsg:\n        return handleAddPrivateKeyMsg(service)(env, msg as AddPrivateKeyMsg);\n      case CreateLedgerKeyMsg:\n        return handleCreateLedgerKeyMsg(service)(\n          env,\n          msg as CreateLedgerKeyMsg\n        );\n      case AddLedgerKeyMsg:\n        return handleAddLedgerKeyMsg(service)(env, msg as AddLedgerKeyMsg);\n      case LockKeyRingMsg:\n        return handleLockKeyRingMsg(service)(env, msg as LockKeyRingMsg);\n      case UnlockKeyRingMsg:\n        return handleUnlockKeyRingMsg(service)(env, msg as UnlockKeyRingMsg);\n      case GetKeyMsg:\n        return handleGetKeyMsg(service)(env, msg as GetKeyMsg);\n      case RequestSignAminoMsg:\n        return handleRequestSignAminoMsg(service)(\n          env,\n          msg as RequestSignAminoMsg\n        );\n      case RequestVerifyADR36AminoSignDoc:\n        return handleRequestVerifyADR36AminoSignDoc(service)(\n          env,\n          msg as RequestVerifyADR36AminoSignDoc\n        );\n      case RequestSignDirectMsg:\n        return handleRequestSignDirectMsg(service)(\n          env,\n          msg as RequestSignDirectMsg\n        );\n      case GetMultiKeyStoreInfoMsg:\n        return handleGetMultiKeyStoreInfoMsg(service)(\n          env,\n          msg as GetMultiKeyStoreInfoMsg\n        );\n      case ChangeKeyRingMsg:\n        return handleChangeKeyRingMsg(service)(env, msg as ChangeKeyRingMsg);\n      case GetIsKeyStoreCoinTypeSetMsg:\n        return handleGetIsKeyStoreCoinTypeSetMsg(service)(\n          env,\n          msg as GetIsKeyStoreCoinTypeSetMsg\n        );\n      case SetKeyStoreCoinTypeMsg:\n        return handleSetKeyStoreCoinTypeMsg(service)(\n          env,\n          msg as SetKeyStoreCoinTypeMsg\n        );\n      case CheckPasswordMsg:\n        return handleCheckPasswordMsg(service)(env, msg as CheckPasswordMsg);\n      case ExportKeyRingDatasMsg:\n        return handleExportKeyRingDatasMsg(service)(\n          env,\n          msg as ExportKeyRingDatasMsg\n        );\n      default:\n        throw new KeplrError(\"keyring\", 221, \"Unknown msg type\");\n    }\n  };\n};\n\nconst handleRestoreKeyRingMsg: (\n  service: KeyRingService\n) => InternalHandler<RestoreKeyRingMsg> = (service) => {\n  return async (_env, _msg) => {\n    return await service.restore();\n  };\n};\n\nconst handleDeleteKeyRingMsg: (\n  service: KeyRingService\n) => InternalHandler<DeleteKeyRingMsg> = (service) => {\n  return async (_, msg) => {\n    return await service.deleteKeyRing(msg.index, msg.password);\n  };\n};\n\nconst handleUpdateNameKeyRingMsg: (\n  service: KeyRingService\n) => InternalHandler<UpdateNameKeyRingMsg> = (service) => {\n  return async (_, msg) => {\n    return await service.updateNameKeyRing(msg.index, msg.name);\n  };\n};\n\nconst handleShowKeyRingMsg: (\n  service: KeyRingService\n) => InternalHandler<ShowKeyRingMsg> = (service) => {\n  return async (_, msg) => {\n    return await service.showKeyRing(msg.index, msg.password);\n  };\n};\n\nconst handleCreateMnemonicKeyMsg: (\n  service: KeyRingService\n) => InternalHandler<CreateMnemonicKeyMsg> = (service) => {\n  return async (_, msg) => {\n    return await service.createMnemonicKey(\n      msg.kdf,\n      msg.mnemonic,\n      msg.password,\n      msg.meta,\n      msg.bip44HDPath\n    );\n  };\n};\n\nconst handleAddMnemonicKeyMsg: (\n  service: KeyRingService\n) => InternalHandler<AddMnemonicKeyMsg> = (service) => {\n  return async (_, msg) => {\n    return await service.addMnemonicKey(\n      msg.kdf,\n      msg.mnemonic,\n      msg.meta,\n      msg.bip44HDPath\n    );\n  };\n};\n\nconst handleCreatePrivateKeyMsg: (\n  service: KeyRingService\n) => InternalHandler<CreatePrivateKeyMsg> = (service) => {\n  return async (_, msg) => {\n    return await service.createPrivateKey(\n      msg.kdf,\n      msg.privateKey,\n      msg.password,\n      msg.meta\n    );\n  };\n};\n\nconst handleAddPrivateKeyMsg: (\n  service: KeyRingService\n) => InternalHandler<AddPrivateKeyMsg> = (service) => {\n  return async (_, msg) => {\n    return await service.addPrivateKey(msg.kdf, msg.privateKey, msg.meta);\n  };\n};\n\nconst handleCreateLedgerKeyMsg: (\n  service: KeyRingService\n) => InternalHandler<CreateLedgerKeyMsg> = (service) => {\n  return async (env, msg) => {\n    return await service.createLedgerKey(\n      env,\n      msg.kdf,\n      msg.password,\n      msg.meta,\n      msg.bip44HDPath\n    );\n  };\n};\n\nconst handleAddLedgerKeyMsg: (\n  service: KeyRingService\n) => InternalHandler<AddLedgerKeyMsg> = (service) => {\n  return async (env, msg) => {\n    return await service.addLedgerKey(env, msg.kdf, msg.meta, msg.bip44HDPath);\n  };\n};\n\nconst handleLockKeyRingMsg: (\n  service: KeyRingService\n) => InternalHandler<LockKeyRingMsg> = (service) => {\n  return () => {\n    return {\n      status: service.lock(),\n    };\n  };\n};\n\nconst handleUnlockKeyRingMsg: (\n  service: KeyRingService\n) => InternalHandler<UnlockKeyRingMsg> = (service) => {\n  return async (_, msg) => {\n    return {\n      status: await service.unlock(msg.password),\n    };\n  };\n};\n\nconst handleGetKeyMsg: (\n  service: KeyRingService\n) => InternalHandler<GetKeyMsg> = (service) => {\n  return async (env, msg) => {\n    await service.permissionService.checkOrGrantBasicAccessPermission(\n      env,\n      msg.chainId,\n      msg.origin\n    );\n\n    const key = await service.getKey(msg.chainId);\n\n    return {\n      name: service.getKeyStoreMeta(\"name\"),\n      algo: \"secp256k1\",\n      pubKey: key.pubKey,\n      address: key.address,\n      bech32Address: new Bech32Address(key.address).toBech32(\n        (await service.chainsService.getChainInfo(msg.chainId)).bech32Config\n          .bech32PrefixAccAddr\n      ),\n      isNanoLedger: key.isNanoLedger,\n    };\n  };\n};\n\nconst handleRequestSignAminoMsg: (\n  service: KeyRingService\n) => InternalHandler<RequestSignAminoMsg> = (service) => {\n  return async (env, msg) => {\n    await service.permissionService.checkOrGrantBasicAccessPermission(\n      env,\n      msg.chainId,\n      msg.origin\n    );\n\n    return await service.requestSignAmino(\n      env,\n      msg.origin,\n      msg.chainId,\n      msg.signer,\n      msg.signDoc,\n      msg.signOptions\n    );\n  };\n};\n\nconst handleRequestVerifyADR36AminoSignDoc: (\n  service: KeyRingService\n) => InternalHandler<RequestVerifyADR36AminoSignDoc> = (service) => {\n  return async (env, msg) => {\n    await service.permissionService.checkOrGrantBasicAccessPermission(\n      env,\n      msg.chainId,\n      msg.origin\n    );\n\n    return await service.verifyADR36AminoSignDoc(\n      msg.chainId,\n      msg.signer,\n      msg.data,\n      msg.signature\n    );\n  };\n};\n\nconst handleRequestSignDirectMsg: (\n  service: KeyRingService\n) => InternalHandler<RequestSignDirectMsg> = (service) => {\n  return async (env, msg) => {\n    await service.permissionService.checkOrGrantBasicAccessPermission(\n      env,\n      msg.chainId,\n      msg.origin\n    );\n\n    const signDoc = SignDoc.fromPartial({\n      bodyBytes: msg.signDoc.bodyBytes,\n      authInfoBytes: msg.signDoc.authInfoBytes,\n      chainId: msg.signDoc.chainId,\n      accountNumber: msg.signDoc.accountNumber,\n    });\n\n    const response = await service.requestSignDirect(\n      env,\n      msg.origin,\n      msg.chainId,\n      msg.signer,\n      signDoc,\n      msg.signOptions\n    );\n\n    return {\n      signed: {\n        bodyBytes: response.signed.bodyBytes,\n        authInfoBytes: response.signed.authInfoBytes,\n        chainId: response.signed.chainId,\n        accountNumber: response.signed.accountNumber.toString(),\n      },\n      signature: response.signature,\n    };\n  };\n};\n\nconst handleGetMultiKeyStoreInfoMsg: (\n  service: KeyRingService\n) => InternalHandler<GetMultiKeyStoreInfoMsg> = (service) => {\n  return () => {\n    return {\n      multiKeyStoreInfo: service.getMultiKeyStoreInfo(),\n    };\n  };\n};\n\nconst handleChangeKeyRingMsg: (\n  service: KeyRingService\n) => InternalHandler<ChangeKeyRingMsg> = (service) => {\n  return async (_, msg) => {\n    return await service.changeKeyStoreFromMultiKeyStore(msg.index);\n  };\n};\n\nconst handleGetIsKeyStoreCoinTypeSetMsg: (\n  service: KeyRingService\n) => InternalHandler<GetIsKeyStoreCoinTypeSetMsg> = (service) => {\n  return (_, msg) => {\n    return service.getKeyStoreBIP44Selectables(msg.chainId, msg.paths);\n  };\n};\n\nconst handleSetKeyStoreCoinTypeMsg: (\n  service: KeyRingService\n) => InternalHandler<SetKeyStoreCoinTypeMsg> = (service) => {\n  return async (_, msg) => {\n    await service.setKeyStoreCoinType(msg.chainId, msg.coinType);\n    return service.keyRingStatus;\n  };\n};\n\nconst handleCheckPasswordMsg: (\n  service: KeyRingService\n) => InternalHandler<CheckPasswordMsg> = (service) => {\n  return (_, msg) => {\n    return service.checkPassword(msg.password);\n  };\n};\n\nconst handleExportKeyRingDatasMsg: (\n  service: KeyRingService\n) => InternalHandler<ExportKeyRingDatasMsg> = (service) => {\n  return async (_, msg) => {\n    return await service.exportKeyRingDatas(msg.password);\n  };\n};\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}