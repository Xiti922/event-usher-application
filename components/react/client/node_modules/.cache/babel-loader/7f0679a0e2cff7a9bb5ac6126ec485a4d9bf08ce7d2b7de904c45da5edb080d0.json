{"ast":null,"code":"\"use strict\";\n\n/**\n * The STREAM online authenticated encryption construction.\n * See <https://eprint.iacr.org/2015/189.pdf> for definition.\n */\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst aead_1 = require(\"./aead\");\nconst webcrypto_1 = require(\"./providers/webcrypto\");\n/** Size of a nonce required by STREAM in bytes */\nexports.NONCE_SIZE = 8;\n/** Byte flag indicating this is the last block in the STREAM (otherwise 0) */\nexports.LAST_BLOCK_FLAG = 1;\n/** Maximum value of the counter STREAM uses internally to identify messages */\nexports.COUNTER_MAX = 0xFFFFFFFF;\n/**\n * A STREAM encryptor with a 32-bit counter, generalized for any AEAD algorithm\n *\n * This corresponds to the ‚Ñ∞ stream encryptor object as defined in the paper\n * Online Authenticated-Encryption and its Nonce-Reuse Misuse-Resistance\n */\nclass StreamEncryptor {\n  /** Create a new StreamEncryptor instance with the given key */\n  static importKey(keyData, nonce, alg) {\n    let provider = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new webcrypto_1.WebCryptoProvider();\n    return __awaiter(this, void 0, void 0, function* () {\n      return new StreamEncryptor(yield aead_1.AEAD.importKey(keyData, alg, provider), nonce);\n    });\n  }\n  constructor(aead, nonce) {\n    this._aead = aead;\n    this._nonce_encoder = new NonceEncoder(nonce);\n  }\n  /** Encrypt and authenticate data using the selected AEAD algorithm */\n  seal(plaintext) {\n    let lastBlock = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let associatedData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Uint8Array(0);\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._aead.seal(plaintext, this._nonce_encoder.next(lastBlock), associatedData);\n    });\n  }\n  /** Make a best effort to wipe memory used by this instance */\n  clear() {\n    this._aead.clear();\n    return this;\n  }\n}\nexports.StreamEncryptor = StreamEncryptor;\n/**\n * A STREAM decryptor with a 32-bit counter, generalized for any AEAD algorithm\n *\n * This corresponds to the ùíü stream decryptor object as defined in the paper\n * Online Authenticated-Encryption and its Nonce-Reuse Misuse-Resistance\n */\nclass StreamDecryptor {\n  /** Create a new StreamDecryptor instance with the given key */\n  static importKey(keyData, nonce, alg) {\n    let provider = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new webcrypto_1.WebCryptoProvider();\n    return __awaiter(this, void 0, void 0, function* () {\n      return new StreamDecryptor(yield aead_1.AEAD.importKey(keyData, alg, provider), nonce);\n    });\n  }\n  constructor(aead, nonce) {\n    this._aead = aead;\n    this._nonce_encoder = new NonceEncoder(nonce);\n  }\n  /** Decrypt and authenticate data using the selected AEAD algorithm */\n  open(ciphertext) {\n    let lastBlock = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let associatedData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Uint8Array(0);\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._aead.open(ciphertext, this._nonce_encoder.next(lastBlock), associatedData);\n    });\n  }\n  /** Make a best effort to wipe memory used by this instance */\n  clear() {\n    this._aead.clear();\n    return this;\n  }\n}\nexports.StreamDecryptor = StreamDecryptor;\n/** Computes STREAM nonces based on the current position in the STREAM. */\nclass NonceEncoder {\n  constructor(noncePrefix) {\n    if (noncePrefix.length !== exports.NONCE_SIZE) {\n      throw new Error(`STREAM: nonce must be 8-bits (got ${noncePrefix.length}`);\n    }\n    this.buffer = new ArrayBuffer(exports.NONCE_SIZE + 4 + 1);\n    this.view = new DataView(this.buffer);\n    this.array = new Uint8Array(this.buffer);\n    this.array.set(noncePrefix);\n    this.counter = 0;\n    this.finished = false;\n  }\n  /** Compute the next nonce value, incrementing the internal counter */\n  next(lastBlock) {\n    if (this.finished) {\n      throw new Error(\"STREAM: already finished\");\n    }\n    this.view.setInt32(8, this.counter, false);\n    if (lastBlock) {\n      this.view.setInt8(12, exports.LAST_BLOCK_FLAG);\n      this.finished = true;\n    } else {\n      this.counter += 1;\n      if (this.counter > exports.COUNTER_MAX) {\n        throw new Error(\"STREAM counter overflowed\");\n      }\n    }\n    return this.array;\n  }\n}","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","aead_1","require","webcrypto_1","NONCE_SIZE","LAST_BLOCK_FLAG","COUNTER_MAX","StreamEncryptor","importKey","keyData","nonce","alg","provider","WebCryptoProvider","AEAD","constructor","aead","_aead","_nonce_encoder","NonceEncoder","seal","plaintext","lastBlock","associatedData","Uint8Array","clear","StreamDecryptor","open","ciphertext","noncePrefix","length","Error","buffer","ArrayBuffer","view","DataView","array","set","counter","finished","setInt32","setInt8"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/miscreant/release/stream.js"],"sourcesContent":["\"use strict\";\n/**\n * The STREAM online authenticated encryption construction.\n * See <https://eprint.iacr.org/2015/189.pdf> for definition.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst aead_1 = require(\"./aead\");\nconst webcrypto_1 = require(\"./providers/webcrypto\");\n/** Size of a nonce required by STREAM in bytes */\nexports.NONCE_SIZE = 8;\n/** Byte flag indicating this is the last block in the STREAM (otherwise 0) */\nexports.LAST_BLOCK_FLAG = 1;\n/** Maximum value of the counter STREAM uses internally to identify messages */\nexports.COUNTER_MAX = 0xFFFFFFFF;\n/**\n * A STREAM encryptor with a 32-bit counter, generalized for any AEAD algorithm\n *\n * This corresponds to the ‚Ñ∞ stream encryptor object as defined in the paper\n * Online Authenticated-Encryption and its Nonce-Reuse Misuse-Resistance\n */\nclass StreamEncryptor {\n    /** Create a new StreamEncryptor instance with the given key */\n    static importKey(keyData, nonce, alg, provider = new webcrypto_1.WebCryptoProvider()) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new StreamEncryptor(yield aead_1.AEAD.importKey(keyData, alg, provider), nonce);\n        });\n    }\n    constructor(aead, nonce) {\n        this._aead = aead;\n        this._nonce_encoder = new NonceEncoder(nonce);\n    }\n    /** Encrypt and authenticate data using the selected AEAD algorithm */\n    seal(plaintext, lastBlock = false, associatedData = new Uint8Array(0)) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._aead.seal(plaintext, this._nonce_encoder.next(lastBlock), associatedData);\n        });\n    }\n    /** Make a best effort to wipe memory used by this instance */\n    clear() {\n        this._aead.clear();\n        return this;\n    }\n}\nexports.StreamEncryptor = StreamEncryptor;\n/**\n * A STREAM decryptor with a 32-bit counter, generalized for any AEAD algorithm\n *\n * This corresponds to the ùíü stream decryptor object as defined in the paper\n * Online Authenticated-Encryption and its Nonce-Reuse Misuse-Resistance\n */\nclass StreamDecryptor {\n    /** Create a new StreamDecryptor instance with the given key */\n    static importKey(keyData, nonce, alg, provider = new webcrypto_1.WebCryptoProvider()) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new StreamDecryptor(yield aead_1.AEAD.importKey(keyData, alg, provider), nonce);\n        });\n    }\n    constructor(aead, nonce) {\n        this._aead = aead;\n        this._nonce_encoder = new NonceEncoder(nonce);\n    }\n    /** Decrypt and authenticate data using the selected AEAD algorithm */\n    open(ciphertext, lastBlock = false, associatedData = new Uint8Array(0)) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._aead.open(ciphertext, this._nonce_encoder.next(lastBlock), associatedData);\n        });\n    }\n    /** Make a best effort to wipe memory used by this instance */\n    clear() {\n        this._aead.clear();\n        return this;\n    }\n}\nexports.StreamDecryptor = StreamDecryptor;\n/** Computes STREAM nonces based on the current position in the STREAM. */\nclass NonceEncoder {\n    constructor(noncePrefix) {\n        if (noncePrefix.length !== exports.NONCE_SIZE) {\n            throw new Error(`STREAM: nonce must be 8-bits (got ${noncePrefix.length}`);\n        }\n        this.buffer = new ArrayBuffer(exports.NONCE_SIZE + 4 + 1);\n        this.view = new DataView(this.buffer);\n        this.array = new Uint8Array(this.buffer);\n        this.array.set(noncePrefix);\n        this.counter = 0;\n        this.finished = false;\n    }\n    /** Compute the next nonce value, incrementing the internal counter */\n    next(lastBlock) {\n        if (this.finished) {\n            throw new Error(\"STREAM: already finished\");\n        }\n        this.view.setInt32(8, this.counter, false);\n        if (lastBlock) {\n            this.view.setInt8(12, exports.LAST_BLOCK_FLAG);\n            this.finished = true;\n        }\n        else {\n            this.counter += 1;\n            if (this.counter > exports.COUNTER_MAX) {\n                throw new Error(\"STREAM counter overflowed\");\n            }\n        }\n        return this.array;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}