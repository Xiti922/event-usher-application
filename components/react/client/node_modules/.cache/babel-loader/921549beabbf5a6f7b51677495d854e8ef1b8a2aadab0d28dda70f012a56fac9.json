{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ResetChainEndpointsMsg = exports.SetChainEndpointsMsg = exports.TryUpdateChainMsg = void 0;\nconst router_1 = require(\"@keplr-wallet/router\");\nconst constants_1 = require(\"./constants\");\nclass TryUpdateChainMsg extends router_1.Message {\n  constructor(chainId) {\n    super();\n    this.chainId = chainId;\n  }\n  static type() {\n    return \"try-update-chain\";\n  }\n  validateBasic() {\n    if (!this.chainId) {\n      throw new router_1.KeplrError(\"updater\", 100, \"Empty chain id\");\n    }\n  }\n  route() {\n    return constants_1.ROUTE;\n  }\n  type() {\n    return TryUpdateChainMsg.type();\n  }\n}\nexports.TryUpdateChainMsg = TryUpdateChainMsg;\nclass SetChainEndpointsMsg extends router_1.Message {\n  constructor(chainId, rpc, rest) {\n    super();\n    this.chainId = chainId;\n    this.rpc = rpc;\n    this.rest = rest;\n  }\n  static type() {\n    return \"set-chain-endpoints\";\n  }\n  validateBasic() {\n    if (!this.chainId) {\n      throw new router_1.KeplrError(\"updater\", 100, \"Empty chain id\");\n    }\n    if (this.rpc) {\n      // Make sure that rpc is valid url form\n      const url = new URL(this.rpc);\n      if (url.protocol !== \"http:\" && url.protocol !== \"https:\") {\n        throw new Error(`RPC has invalid protocol: ${url.protocol}`);\n      }\n    }\n    if (this.rest) {\n      // Make sure that rest is valid url form\n      const url = new URL(this.rest);\n      if (url.protocol !== \"http:\" && url.protocol !== \"https:\") {\n        throw new Error(`LCD has invalid protocol: ${url.protocol}`);\n      }\n    }\n  }\n  route() {\n    return constants_1.ROUTE;\n  }\n  type() {\n    return SetChainEndpointsMsg.type();\n  }\n}\nexports.SetChainEndpointsMsg = SetChainEndpointsMsg;\nclass ResetChainEndpointsMsg extends router_1.Message {\n  constructor(chainId) {\n    super();\n    this.chainId = chainId;\n  }\n  static type() {\n    return \"reset-chain-endpoints\";\n  }\n  validateBasic() {\n    if (!this.chainId) {\n      throw new router_1.KeplrError(\"updater\", 100, \"Empty chain id\");\n    }\n  }\n  route() {\n    return constants_1.ROUTE;\n  }\n  type() {\n    return ResetChainEndpointsMsg.type();\n  }\n}\nexports.ResetChainEndpointsMsg = ResetChainEndpointsMsg;","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AAGA,MAAaA,iBAAkB,SAAQC,gBAAa;EAKlDC,YAA4BC,OAAe;IACzC,KAAK,EAAE;IADmB,YAAO,GAAPA,OAAO;EAEnC;EANO,OAAOC,IAAI;IAChB,OAAO,kBAAkB;EAC3B;EAMAC,aAAa;IACX,IAAI,CAAC,IAAI,CAACF,OAAO,EAAE;MACjB,MAAM,IAAIF,mBAAU,CAAC,SAAS,EAAE,GAAG,EAAE,gBAAgB,CAAC;;EAE1D;EAEAK,KAAK;IACH,OAAOC,iBAAK;EACd;EAEAH,IAAI;IACF,OAAOJ,iBAAiB,CAACI,IAAI,EAAE;EACjC;;AArBFI;AAwBA,MAAaC,oBAAqB,SAAQR,gBAA6B;EAKrEC,YACkBC,OAAe,EACfO,GAAuB,EACvBC,IAAwB;IAExC,KAAK,EAAE;IAJS,YAAO,GAAPR,OAAO;IACP,QAAG,GAAHO,GAAG;IACH,SAAI,GAAJC,IAAI;EAGtB;EAVO,OAAOP,IAAI;IAChB,OAAO,qBAAqB;EAC9B;EAUAC,aAAa;IACX,IAAI,CAAC,IAAI,CAACF,OAAO,EAAE;MACjB,MAAM,IAAIF,mBAAU,CAAC,SAAS,EAAE,GAAG,EAAE,gBAAgB,CAAC;;IAGxD,IAAI,IAAI,CAACS,GAAG,EAAE;MACZ;MACA,MAAME,GAAG,GAAG,IAAIC,GAAG,CAAC,IAAI,CAACH,GAAG,CAAC;MAC7B,IAAIE,GAAG,CAACE,QAAQ,KAAK,OAAO,IAAIF,GAAG,CAACE,QAAQ,KAAK,QAAQ,EAAE;QACzD,MAAM,IAAIC,KAAK,CAAC,6BAA6BH,GAAG,CAACE,QAAQ,EAAE,CAAC;;;IAGhE,IAAI,IAAI,CAACH,IAAI,EAAE;MACb;MACA,MAAMC,GAAG,GAAG,IAAIC,GAAG,CAAC,IAAI,CAACF,IAAI,CAAC;MAC9B,IAAIC,GAAG,CAACE,QAAQ,KAAK,OAAO,IAAIF,GAAG,CAACE,QAAQ,KAAK,QAAQ,EAAE;QACzD,MAAM,IAAIC,KAAK,CAAC,6BAA6BH,GAAG,CAACE,QAAQ,EAAE,CAAC;;;EAGlE;EAEAR,KAAK;IACH,OAAOC,iBAAK;EACd;EAEAH,IAAI;IACF,OAAOK,oBAAoB,CAACL,IAAI,EAAE;EACpC;;AAxCFI;AA2CA,MAAaQ,sBAAuB,SAAQf,gBAA6B;EAKvEC,YAA4BC,OAAe;IACzC,KAAK,EAAE;IADmB,YAAO,GAAPA,OAAO;EAEnC;EANO,OAAOC,IAAI;IAChB,OAAO,uBAAuB;EAChC;EAMAC,aAAa;IACX,IAAI,CAAC,IAAI,CAACF,OAAO,EAAE;MACjB,MAAM,IAAIF,mBAAU,CAAC,SAAS,EAAE,GAAG,EAAE,gBAAgB,CAAC;;EAE1D;EAEAK,KAAK;IACH,OAAOC,iBAAK;EACd;EAEAH,IAAI;IACF,OAAOY,sBAAsB,CAACZ,IAAI,EAAE;EACtC;;AArBFI","names":["TryUpdateChainMsg","router_1","constructor","chainId","type","validateBasic","route","constants_1","exports","SetChainEndpointsMsg","rpc","rest","url","URL","protocol","Error","ResetChainEndpointsMsg"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/@keplr-wallet/background/src/updater/messages.ts"],"sourcesContent":["import { KeplrError, Message } from \"@keplr-wallet/router\";\nimport { ROUTE } from \"./constants\";\nimport { ChainInfoWithEmbed } from \"../chains\";\n\nexport class TryUpdateChainMsg extends Message<void> {\n  public static type() {\n    return \"try-update-chain\";\n  }\n\n  constructor(public readonly chainId: string) {\n    super();\n  }\n\n  validateBasic(): void {\n    if (!this.chainId) {\n      throw new KeplrError(\"updater\", 100, \"Empty chain id\");\n    }\n  }\n\n  route(): string {\n    return ROUTE;\n  }\n\n  type(): string {\n    return TryUpdateChainMsg.type();\n  }\n}\n\nexport class SetChainEndpointsMsg extends Message<ChainInfoWithEmbed[]> {\n  public static type() {\n    return \"set-chain-endpoints\";\n  }\n\n  constructor(\n    public readonly chainId: string,\n    public readonly rpc: string | undefined,\n    public readonly rest: string | undefined\n  ) {\n    super();\n  }\n\n  validateBasic(): void {\n    if (!this.chainId) {\n      throw new KeplrError(\"updater\", 100, \"Empty chain id\");\n    }\n\n    if (this.rpc) {\n      // Make sure that rpc is valid url form\n      const url = new URL(this.rpc);\n      if (url.protocol !== \"http:\" && url.protocol !== \"https:\") {\n        throw new Error(`RPC has invalid protocol: ${url.protocol}`);\n      }\n    }\n    if (this.rest) {\n      // Make sure that rest is valid url form\n      const url = new URL(this.rest);\n      if (url.protocol !== \"http:\" && url.protocol !== \"https:\") {\n        throw new Error(`LCD has invalid protocol: ${url.protocol}`);\n      }\n    }\n  }\n\n  route(): string {\n    return ROUTE;\n  }\n\n  type(): string {\n    return SetChainEndpointsMsg.type();\n  }\n}\n\nexport class ResetChainEndpointsMsg extends Message<ChainInfoWithEmbed[]> {\n  public static type() {\n    return \"reset-chain-endpoints\";\n  }\n\n  constructor(public readonly chainId: string) {\n    super();\n  }\n\n  validateBasic(): void {\n    if (!this.chainId) {\n      throw new KeplrError(\"updater\", 100, \"Empty chain id\");\n    }\n  }\n\n  route(): string {\n    return ROUTE;\n  }\n\n  type(): string {\n    return ResetChainEndpointsMsg.type();\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}