{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeSignature = exports.encodeSecp256k1Signature = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst pubkey_1 = require(\"./pubkey\");\nconst types_1 = require(\"./types\");\n/**\n * Takes a binary pubkey and signature to create a signature object\n *\n * @param pubkey a compressed secp256k1 public key\n * @param signature a 64 byte fixed length representation of secp256k1 signature components r and s\n */\nfunction encodeSecp256k1Signature(pubkey, signature) {\n  if (signature.length !== 64) {\n    throw new Error(\"Signature must be 64 bytes long. Cosmos SDK uses a 2x32 byte fixed length encoding for the secp256k1 signature integers r and s.\");\n  }\n  return {\n    pub_key: pubkey_1.encodeSecp256k1Pubkey(pubkey),\n    signature: encoding_1.toBase64(signature)\n  };\n}\nexports.encodeSecp256k1Signature = encodeSecp256k1Signature;\nfunction decodeSignature(signature) {\n  switch (signature.pub_key.type) {\n    // Note: please don't add cases here without writing additional unit tests\n    case types_1.pubkeyType.secp256k1:\n      return {\n        pubkey: encoding_1.fromBase64(signature.pub_key.value),\n        signature: encoding_1.fromBase64(signature.signature)\n      };\n    default:\n      throw new Error(\"Unsupported pubkey type\");\n  }\n}\nexports.decodeSignature = decodeSignature;","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AAEA;AACA;AAEA;;;;;;AAMA,SAAgBA,wBAAwB,CAACC,MAAkB,EAAEC,SAAqB;EAChF,IAAIA,SAAS,CAACC,MAAM,KAAK,EAAE,EAAE;IAC3B,MAAM,IAAIC,KAAK,CACb,kIAAkI,CACnI;;EAGH,OAAO;IACLC,OAAO,EAAEC,8BAAqB,CAACL,MAAM,CAAC;IACtCC,SAAS,EAAEK,mBAAQ,CAACL,SAAS;GAC9B;AACH;AAXAM;AAaA,SAAgBC,eAAe,CAC7BP,SAAuB;EAEvB,QAAQA,SAAS,CAACG,OAAO,CAACK,IAAI;IAC5B;IACA,KAAKC,kBAAU,CAACC,SAAS;MACvB,OAAO;QACLX,MAAM,EAAEM,qBAAU,CAACL,SAAS,CAACG,OAAO,CAACQ,KAAK,CAAC;QAC3CX,SAAS,EAAEK,qBAAU,CAACL,SAAS,CAACA,SAAS;OAC1C;IACH;MACE,MAAM,IAAIE,KAAK,CAAC,yBAAyB,CAAC;EAAC;AAEjD;AAbAI","names":["encodeSecp256k1Signature","pubkey","signature","length","Error","pub_key","pubkey_1","encoding_1","exports","decodeSignature","type","types_1","secp256k1","value"],"sources":["../src/signature.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}