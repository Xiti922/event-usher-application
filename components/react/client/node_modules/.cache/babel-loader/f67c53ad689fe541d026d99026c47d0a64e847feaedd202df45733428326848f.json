{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst encoding_1 = require(\"@iov/encoding\");\nconst axios_1 = __importDefault(require(\"axios\"));\nconst enigmautils_1 = __importDefault(require(\"./enigmautils\"));\nconst ProtoEncoding_1 = require(\"./ProtoEncoding\");\nconst v1_4_protos_1 = require(\"./v1.4_protos\");\nfunction normalizeArray(backend) {\n  return backend || [];\n}\n/**\n * The mode used to send transaction\n *\n * @see https://cosmos.network/rpc/#/Transactions/post_txs\n */\nvar BroadcastMode;\n(function (BroadcastMode) {\n  /** Return after tx commit */\n  BroadcastMode[\"Block\"] = \"block\";\n  /** Return afer CheckTx */\n  BroadcastMode[\"Sync\"] = \"sync\";\n  /** Return right away */\n  BroadcastMode[\"Async\"] = \"async\";\n})(BroadcastMode = exports.BroadcastMode || (exports.BroadcastMode = {}));\nfunction isWasmError(resp) {\n  return resp.error !== undefined;\n}\nfunction unwrapWasmResponse(response) {\n  if (isWasmError(response)) {\n    throw new Error(response.error);\n  }\n  return response.result;\n}\n// We want to get message data from 500 errors\n// https://stackoverflow.com/questions/56577124/how-to-handle-500-error-message-with-axios\n// this should be chained to catch one error and throw a more informative one\nfunction parseAxiosError(err) {\n  var _a;\n  // use the error message sent from server, not default 500 msg\n  if ((_a = err.response) === null || _a === void 0 ? void 0 : _a.data) {\n    let errorText;\n    const data = err.response.data;\n    // expect { error: string }, but otherwise dump\n    if (data.error && typeof data.error === \"string\") {\n      errorText = data.error;\n    } else if (typeof data === \"string\") {\n      errorText = data;\n    } else {\n      errorText = JSON.stringify(data);\n    }\n    throw new Error(`${errorText} (HTTP ${err.response.status})`);\n  } else {\n    throw err;\n  }\n}\nclass RestClient {\n  /**\n   * Creates a new client to interact with a Cosmos SDK light client daemon.\n   * This class tries to be a direct mapping onto the API. Some basic decoding and normalizatin is done\n   * but things like caching are done at a higher level.\n   *\n   * When building apps, you should not need to use this class directly. If you do, this indicates a missing feature\n   * in higher level components. Feel free to raise an issue in this case.\n   *\n   * @param apiUrl The URL of a Cosmos SDK light client daemon API (sometimes called REST server or REST API)\n   * @param broadcastMode Defines at which point of the transaction processing the postTx method (i.e. transaction broadcasting) returns\n   * @param seed - The seed used to generate sender TX encryption key. If empty will generate random new one\n   */\n  constructor(apiUrl) {\n    let broadcastMode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : BroadcastMode.Block;\n    let seed = arguments.length > 2 ? arguments[2] : undefined;\n    const headers = {\n      post: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    this.client = axios_1.default.create({\n      baseURL: apiUrl,\n      headers: headers\n    });\n    this.broadcastMode = broadcastMode;\n    this.enigmautils = new enigmautils_1.default(apiUrl, seed);\n    this.codeHashCache = new Map();\n  }\n  async get(path) {\n    const {\n      data\n    } = await this.client.get(path).catch(parseAxiosError);\n    if (data === null) {\n      throw new Error(\"Received null response from server\");\n    }\n    return data;\n  }\n  async post(path, params) {\n    if (!encoding_1.isNonNullObject(params)) throw new Error(\"Got unexpected type of params. Expected object.\");\n    const {\n      data\n    } = await this.client.post(path, params).catch(parseAxiosError);\n    if (data === null) {\n      throw new Error(\"Received null response from server\");\n    }\n    return data;\n  }\n  // The /auth endpoints\n  async authAccounts(address) {\n    const [authResp, bankResp] = await Promise.all([this.get(`/auth/accounts/${address}`), this.get(`/bank/balances/${address}`)]);\n    const result = {\n      height: bankResp.height,\n      result: {\n        type: \"cosmos-sdk/Account\",\n        value: {\n          address: authResp.result.value.address,\n          coins: bankResp.result,\n          public_key: JSON.stringify(authResp.result.value.public_key),\n          account_number: Number(authResp.result.value.account_number || 0),\n          sequence: Number(authResp.result.value.sequence || 0)\n        }\n      }\n    };\n    return result;\n  }\n  // The /blocks endpoints\n  async blocksLatest() {\n    const responseData = await this.get(\"/blocks/latest\");\n    if (!responseData.block) {\n      throw new Error(\"Unexpected response data format\");\n    }\n    return responseData;\n  }\n  async blocks(height) {\n    const responseData = await this.get(`/blocks/${height}`);\n    if (!responseData.block) {\n      throw new Error(\"Unexpected response data format\");\n    }\n    return responseData;\n  }\n  // The /node_info endpoint\n  async nodeInfo() {\n    const responseData = await this.get(\"/node_info\");\n    if (!responseData.node_info) {\n      throw new Error(\"Unexpected response data format\");\n    }\n    return responseData;\n  }\n  // The /txs endpoints\n  async txById(id) {\n    let tryToDecrypt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const responseData = await this.get(`/txs/${id}`);\n    if (!responseData.tx) {\n      throw new Error(\"Unexpected response data format\");\n    }\n    if (tryToDecrypt) {\n      return this.decryptTxsResponse(responseData);\n    } else {\n      return responseData;\n    }\n  }\n  async txsQuery(query) {\n    let tryToDecrypt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const responseData = await this.get(`/txs?${query}`);\n    if (!responseData.txs) {\n      throw new Error(\"Unexpected response data format\");\n    }\n    const resp = responseData;\n    if (tryToDecrypt) {\n      for (let i = 0; i < resp.txs.length; i++) {\n        resp.txs[i] = await this.decryptTxsResponse(resp.txs[i]);\n      }\n    }\n    return resp;\n  }\n  /** returns the amino-encoding of the transaction performed by the server */\n  async encodeTx(tx) {\n    const responseData = await this.post(\"/txs/encode\", tx);\n    if (!responseData.tx) {\n      throw new Error(\"Unexpected response data format\");\n    }\n    return encoding_1.Encoding.fromBase64(responseData.tx);\n  }\n  /**\n   * Broadcasts a signed transaction to into the transaction pool.\n   * Depending on the RestClient's broadcast mode, this might or might\n   * wait for checkTx or deliverTx to be executed before returning.\n   *\n   * @param tx a signed transaction as StdTx (i.e. not wrapped in type/value container)\n   */\n  async postTx(tx) {\n    const params = {\n      tx: tx,\n      mode: this.broadcastMode\n    };\n    const responseData = await this.post(\"/txs\", params);\n    if (!responseData.txhash) {\n      throw new Error(\"Unexpected response data format\");\n    }\n    return responseData;\n  }\n  // The /wasm endpoints\n  // wasm rest queries are listed here: https://github.com/cosmwasm/wasmd/blob/master/x/wasm/client/rest/query.go#L19-L27\n  async listCodeInfo() {\n    const path = `/wasm/code`;\n    const responseData = await this.get(path);\n    return normalizeArray(await unwrapWasmResponse(responseData));\n  }\n  // this will download the original wasm bytecode by code id\n  // throws error if no code with this id\n  async getCode(id) {\n    const path = `/wasm/code/${id}`;\n    const responseData = await this.get(path);\n    return await unwrapWasmResponse(responseData);\n  }\n  async listContractsByCodeId(id) {\n    const path = `/wasm/code/${id}/contracts`;\n    const responseData = await this.get(path);\n    return normalizeArray(await unwrapWasmResponse(responseData));\n  }\n  async getCodeHashByCodeId(id) {\n    const codeHashFromCache = this.codeHashCache.get(id);\n    if (typeof codeHashFromCache === \"string\") {\n      return codeHashFromCache;\n    }\n    const path = `/wasm/code/${id}/hash`;\n    const responseData = await this.get(path);\n    this.codeHashCache.set(id, responseData.result);\n    return responseData.result;\n  }\n  async getCodeHashByContractAddr(addr) {\n    const codeHashFromCache = this.codeHashCache.get(addr);\n    if (typeof codeHashFromCache === \"string\") {\n      return codeHashFromCache;\n    }\n    const path = `/wasm/contract/${addr}/code-hash`;\n    const responseData = await this.get(path);\n    this.codeHashCache.set(addr, responseData.result);\n    return responseData.result;\n  }\n  /**\n   * Returns null when contract was not found at this address.\n   */\n  async getContractInfo(address) {\n    const path = `/wasm/contract/${address}`;\n    const response = await this.get(path);\n    return await unwrapWasmResponse(response);\n  }\n  /**\n   * Makes a smart query on the contract and parses the reponse as JSON.\n   * Throws error if no such contract exists, the query format is invalid or the response is invalid.\n   */\n  async queryContractSmart(contractAddress, query, addedParams, contractCodeHash) {\n    var _a;\n    if (!contractCodeHash) {\n      contractCodeHash = await this.getCodeHashByContractAddr(contractAddress);\n    } else {\n      this.codeHashCache.set(contractAddress, contractCodeHash);\n    }\n    const encrypted = await this.enigmautils.encrypt(contractCodeHash, query);\n    const nonce = encrypted.slice(0, 32);\n    const encoded = encoding_1.Encoding.toHex(encoding_1.Encoding.toUtf8(encoding_1.Encoding.toBase64(encrypted)));\n    // @ts-ignore\n    const paramString = new URLSearchParams(addedParams).toString();\n    const path = `/wasm/contract/${contractAddress}/query/${encoded}?encoding=hex&${paramString}`;\n    let responseData;\n    try {\n      responseData = await this.get(path);\n    } catch (err) {\n      try {\n        const errorMessageRgx = /encrypted: (.+?): (?:instantiate|execute|query|reply to) contract failed \\(HTTP 500\\)/g;\n        // @ts-ignore\n        const rgxMatches = errorMessageRgx.exec(err.message);\n        if (rgxMatches == null || ((_a = rgxMatches) === null || _a === void 0 ? void 0 : _a.length) != 2) {\n          throw err;\n        }\n        const errorCipherB64 = rgxMatches[1];\n        const errorCipherBz = encoding_1.Encoding.fromBase64(errorCipherB64);\n        const errorPlainBz = await this.enigmautils.decrypt(errorCipherBz, nonce);\n        //@ts-ignore\n        err.message = err.message.replace(errorCipherB64, encoding_1.Encoding.fromUtf8(errorPlainBz));\n      } catch (decryptionError) {\n        //@ts-ignore\n        throw new Error(`Failed to decrypt the following error message: ${err.message}.`);\n      }\n      throw err;\n    }\n    if (isWasmError(responseData)) {\n      throw new Error(JSON.stringify(await this.enigmautils.decrypt(encoding_1.Encoding.fromBase64(responseData.error), nonce)));\n    }\n    // By convention, smart queries must return a valid JSON document (see https://github.com/CosmWasm/cosmwasm/issues/144)\n    return JSON.parse(encoding_1.Encoding.fromUtf8(encoding_1.Encoding.fromBase64(encoding_1.Encoding.fromUtf8(await this.enigmautils.decrypt(encoding_1.Encoding.fromBase64(responseData.result.smart), nonce)))));\n  }\n  /**\n   * Get the consensus keypair for IO encryption\n   */\n  async getMasterCerts(address, query) {\n    return this.get(\"/register/master-cert\");\n  }\n  async decryptDataField() {\n    let dataField = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    let nonces = arguments.length > 1 ? arguments[1] : undefined;\n    const wasmOutputDataCipherBz = encoding_1.Encoding.fromHex(dataField);\n    let error;\n    for (const nonce of nonces) {\n      try {\n        const data = encoding_1.Encoding.fromBase64(encoding_1.Encoding.fromUtf8(await this.enigmautils.decrypt(wasmOutputDataCipherBz, nonce)));\n        return data;\n      } catch (e) {\n        error = e;\n      }\n    }\n    throw error;\n  }\n  async decryptLogs(logs, nonces) {\n    for (const l of logs) {\n      for (const e of l.events) {\n        if (e.type === \"wasm\") {\n          for (const nonce of nonces) {\n            let nonceOk = false;\n            for (const a of e.attributes) {\n              try {\n                a.key = encoding_1.Encoding.fromUtf8(await this.enigmautils.decrypt(encoding_1.Encoding.fromBase64(a.key), nonce));\n                nonceOk = true;\n              } catch (e) {}\n              try {\n                a.value = encoding_1.Encoding.fromUtf8(await this.enigmautils.decrypt(encoding_1.Encoding.fromBase64(a.value), nonce));\n                nonceOk = true;\n              } catch (e) {}\n            }\n            if (nonceOk) {\n              continue;\n            }\n          }\n        }\n      }\n    }\n    return logs;\n  }\n  async decryptTxsResponse(txsResponse) {\n    var _a, _b, _c;\n    let dataFields;\n    let data = Uint8Array.from([]);\n    if (txsResponse.data) {\n      dataFields = ProtoEncoding_1.decodeTxData(encoding_1.Encoding.fromHex(txsResponse.data));\n    }\n    let logs = txsResponse.logs;\n    if (logs) {\n      logs[0].msg_index = 0;\n    }\n    for (let i = 0; i < ((_a = txsResponse.tx.value.msg) === null || _a === void 0 ? void 0 : _a.length); i++) {\n      const msg = txsResponse.tx.value.msg[i];\n      let inputMsgEncrypted;\n      if (msg.type === \"wasm/MsgExecuteContract\") {\n        inputMsgEncrypted = encoding_1.Encoding.fromBase64(msg.value.msg);\n      } else if (msg.type === \"wasm/MsgInstantiateContract\") {\n        inputMsgEncrypted = encoding_1.Encoding.fromBase64(msg.value.init_msg);\n      } else {\n        continue;\n      }\n      const inputMsgPubkey = inputMsgEncrypted.slice(32, 64);\n      if (encoding_1.Encoding.toBase64(await this.enigmautils.getPubkey()) === encoding_1.Encoding.toBase64(inputMsgPubkey)) {\n        // my pubkey, can decrypt\n        const nonce = inputMsgEncrypted.slice(0, 32);\n        // decrypt input\n        const inputMsg = encoding_1.Encoding.fromUtf8(await this.enigmautils.decrypt(inputMsgEncrypted.slice(64), nonce));\n        if (msg.type === \"wasm/MsgExecuteContract\") {\n          // decrypt input\n          txsResponse.tx.value.msg[i].value.msg = inputMsg;\n          // decrypt output data\n          // stupid workaround because only 1st message data is returned\n          if (dataFields && i == 0 && dataFields[0].data) {\n            const decoded = v1_4_protos_1.MsgExecuteContractResponse.decode(encoding_1.Encoding.fromBase64(dataFields[0].data));\n            data = await this.decryptDataField(encoding_1.Encoding.toHex(decoded.data), [nonce]);\n          }\n        } else if (msg.type === \"wasm/MsgInstantiateContract\") {\n          // decrypt input\n          txsResponse.tx.value.msg[i].value.init_msg = inputMsg;\n        }\n        // decrypt output logs\n        if (txsResponse.logs && logs) {\n          if (!((_b = txsResponse.logs[i]) === null || _b === void 0 ? void 0 : _b.log)) {\n            logs[i].log = \"\";\n          }\n          logs[i] = (await this.decryptLogs([txsResponse.logs[i]], [nonce]))[0];\n        }\n        // failed to execute message; message index: 0: encrypted: (.+?): (?:instantiate|execute|query|reply to) contract failed\n        // decrypt error\n        const errorMessageRgx = new RegExp(`failed to execute message; message index: ${i}:(?: dispatch: submessages:)* encrypted: (.+?): (?:instantiate|execute|query|reply to) contract failed`, \"g\");\n        const rgxMatches = errorMessageRgx.exec(txsResponse.raw_log);\n        if (Array.isArray(rgxMatches) && ((_c = rgxMatches) === null || _c === void 0 ? void 0 : _c.length) === 2) {\n          const errorCipherB64 = rgxMatches[1];\n          const errorCipherBz = encoding_1.Encoding.fromBase64(errorCipherB64);\n          const errorPlainBz = await this.enigmautils.decrypt(errorCipherBz, nonce);\n          txsResponse.raw_log = txsResponse.raw_log.replace(errorCipherB64, encoding_1.Encoding.fromUtf8(errorPlainBz));\n        }\n      }\n    }\n    txsResponse = Object.assign({}, txsResponse, {\n      logs: logs\n    });\n    // @ts-ignore\n    txsResponse.data = data;\n    return txsResponse;\n  }\n}\nexports.RestClient = RestClient;","map":{"version":3,"mappings":"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","names":["normalizeArray","backend","BroadcastMode","exports","isWasmError","resp","error","undefined","unwrapWasmResponse","response","Error","result","parseAxiosError","err","data","errorText","JSON","stringify","status","RestClient","constructor","apiUrl","broadcastMode","Block","seed","headers","post","client","axios_1","create","baseURL","enigmautils","enigmautils_1","codeHashCache","Map","get","path","catch","params","encoding_1","authAccounts","address","authResp","bankResp","Promise","all","height","type","value","coins","public_key","account_number","Number","sequence","blocksLatest","responseData","block","blocks","nodeInfo","node_info","txById","id","tryToDecrypt","tx","decryptTxsResponse","txsQuery","query","txs","i","length","encodeTx","fromBase64","postTx","mode","txhash","listCodeInfo","getCode","listContractsByCodeId","getCodeHashByCodeId","codeHashFromCache","set","getCodeHashByContractAddr","addr","getContractInfo","queryContractSmart","contractAddress","addedParams","contractCodeHash","encrypted","encrypt","nonce","slice","encoded","toHex","toUtf8","toBase64","paramString","URLSearchParams","toString","errorMessageRgx","rgxMatches","exec","message","errorCipherB64","errorCipherBz","errorPlainBz","decrypt","replace","fromUtf8","decryptionError","parse","smart","getMasterCerts","decryptDataField","dataField","nonces","wasmOutputDataCipherBz","fromHex","e","decryptLogs","logs","l","events","nonceOk","a","attributes","key","txsResponse","dataFields","Uint8Array","from","ProtoEncoding_1","msg_index","msg","inputMsgEncrypted","init_msg","inputMsgPubkey","getPubkey","inputMsg","decoded","v1_4_protos_1","decode","log","RegExp","raw_log","Array","isArray","Object","assign"],"sources":["../src/restclient.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}