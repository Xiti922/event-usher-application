{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ObservableCosmwasmContractChainQuery = void 0;\nconst chain_query_1 = require(\"../chain-query\");\nconst buffer_1 = require(\"buffer/\");\nconst mobx_1 = require(\"mobx\");\nclass ObservableCosmwasmContractChainQuery extends chain_query_1.ObservableChainQuery {\n  constructor(kvStore, chainId, chainGetter, contractAddress,\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  obj) {\n    super(kvStore, chainId, chainGetter, ObservableCosmwasmContractChainQuery.getUrlFromObj(contractAddress, obj));\n    this.contractAddress = contractAddress;\n    this.obj = obj;\n  }\n  onStart() {\n    super.onStart();\n    return new Promise(resolve => {\n      this.disposer = mobx_1.autorun(() => {\n        const chainInfo = this.chainGetter.getChain(this.chainId);\n        if (chainInfo.features && chainInfo.features.includes(\"wasmd_0.24+\")) {\n          if (this.url.startsWith(\"/wasm/v1/\")) {\n            this.setUrl(`/cosmwasm${this.url}`);\n          }\n        } else {\n          if (this.url.startsWith(\"/cosmwasm/\")) {\n            this.setUrl(`${this.url.replace(\"/cosmwasm\", \"\")}`);\n          }\n        }\n        resolve();\n      });\n    });\n  }\n  onStop() {\n    if (this.disposer) {\n      this.disposer();\n      this.disposer = undefined;\n    }\n    super.onStop();\n  }\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  static getUrlFromObj(contractAddress, obj) {\n    const msg = JSON.stringify(obj);\n    const query = buffer_1.Buffer.from(msg).toString(\"base64\");\n    return `/wasm/v1/contract/${contractAddress}/smart/${query}`;\n  }\n  canFetch() {\n    return this.contractAddress.length !== 0;\n  }\n  fetchResponse(abortController) {\n    const _super = Object.create(null, {\n      fetchResponse: {\n        get: () => super.fetchResponse\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        response,\n        headers\n      } = yield _super.fetchResponse.call(this, abortController);\n      const wasmResult = response.data;\n      if (!wasmResult) {\n        throw new Error(\"Failed to get the response from the contract\");\n      }\n      return {\n        headers,\n        response: {\n          data: wasmResult.data,\n          status: response.status,\n          staled: false,\n          timestamp: Date.now()\n        }\n      };\n    });\n  }\n}\nexports.ObservableCosmwasmContractChainQuery = ObservableCosmwasmContractChainQuery;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAKA;AACA;AAEA,MAAaA,oCAEX,SAAQC,kCAAuB;EAG/BC,YACEC,OAAgB,EAChBC,OAAe,EACfC,WAAwB,EACLC,eAAuB;EAC1C;EACUC,GAAW;IAErB,KAAK,CACHJ,OAAO,EACPC,OAAO,EACPC,WAAW,EACXL,oCAAoC,CAACQ,aAAa,CAACF,eAAe,EAAEC,GAAG,CAAC,CACzE;IATkB,oBAAe,GAAfD,eAAe;IAExB,QAAG,GAAHC,GAAG;EAQf;EAEUE,OAAO;IACf,KAAK,CAACA,OAAO,EAAE;IAEf,OAAO,IAAIC,OAAO,CAAQC,OAAO,IAAI;MACnC,IAAI,CAACC,QAAQ,GAAGC,cAAO,CAAC,MAAK;QAC3B,MAAMC,SAAS,GAAG,IAAI,CAACT,WAAW,CAACU,QAAQ,CAAC,IAAI,CAACX,OAAO,CAAC;QACzD,IAAIU,SAAS,CAACE,QAAQ,IAAIF,SAAS,CAACE,QAAQ,CAACC,QAAQ,CAAC,aAAa,CAAC,EAAE;UACpE,IAAI,IAAI,CAACC,GAAG,CAACC,UAAU,CAAC,WAAW,CAAC,EAAE;YACpC,IAAI,CAACC,MAAM,CAAC,YAAY,IAAI,CAACF,GAAG,EAAE,CAAC;;SAEtC,MAAM;UACL,IAAI,IAAI,CAACA,GAAG,CAACC,UAAU,CAAC,YAAY,CAAC,EAAE;YACrC,IAAI,CAACC,MAAM,CAAC,GAAG,IAAI,CAACF,GAAG,CAACG,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,EAAE,CAAC;;;QAIvDV,OAAO,EAAE;MACX,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEUW,MAAM;IACd,IAAI,IAAI,CAACV,QAAQ,EAAE;MACjB,IAAI,CAACA,QAAQ,EAAE;MACf,IAAI,CAACA,QAAQ,GAAGW,SAAS;;IAE3B,KAAK,CAACD,MAAM,EAAE;EAChB;EAEA;EACU,OAAOd,aAAa,CAACF,eAAuB,EAAEC,GAAW;IACjE,MAAMiB,GAAG,GAAGC,IAAI,CAACC,SAAS,CAACnB,GAAG,CAAC;IAC/B,MAAMoB,KAAK,GAAGC,eAAM,CAACC,IAAI,CAACL,GAAG,CAAC,CAACM,QAAQ,CAAC,QAAQ,CAAC;IAEjD,OAAO,qBAAqBxB,eAAe,UAAUqB,KAAK,EAAE;EAC9D;EAEUI,QAAQ;IAChB,OAAO,IAAI,CAACzB,eAAe,CAAC0B,MAAM,KAAK,CAAC;EAC1C;EAEgBC,aAAa,CAC3BC,eAAgC;;;;;;;MAEhC,MAAM;QAAEC,QAAQ;QAAEC;MAAO,CAAE,GAAG,MAAMC,OAAMJ,aAAa,YAACC,eAAe,CAAC;MAExE,MAAMI,UAAU,GAAIH,QAAQ,CAACI,IAIhB;MAEb,IAAI,CAACD,UAAU,EAAE;QACf,MAAM,IAAIE,KAAK,CAAC,8CAA8C,CAAC;;MAGjE,OAAO;QACLJ,OAAO;QACPD,QAAQ,EAAE;UACRI,IAAI,EAAED,UAAU,CAACC,IAAS;UAC1BE,MAAM,EAAEN,QAAQ,CAACM,MAAM;UACvBC,MAAM,EAAE,KAAK;UACbC,SAAS,EAAEC,IAAI,CAACC,GAAG;;OAEtB;IACH,CAAC;;;AAtFHC","names":["ObservableCosmwasmContractChainQuery","chain_query_1","constructor","kvStore","chainId","chainGetter","contractAddress","obj","getUrlFromObj","onStart","Promise","resolve","disposer","mobx_1","chainInfo","getChain","features","includes","url","startsWith","setUrl","replace","onStop","undefined","msg","JSON","stringify","query","buffer_1","from","toString","canFetch","length","fetchResponse","abortController","response","headers","_super","wasmResult","data","Error","status","staled","timestamp","Date","now","exports"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/@keplr-wallet/stores/src/query/cosmwasm/contract-query.ts"],"sourcesContent":["import { ObservableChainQuery } from \"../chain-query\";\nimport { KVStore } from \"@keplr-wallet/common\";\nimport { ChainGetter } from \"../../common\";\nimport { QueryResponse } from \"../../common\";\n\nimport { Buffer } from \"buffer/\";\nimport { autorun } from \"mobx\";\n\nexport class ObservableCosmwasmContractChainQuery<\n  T\n> extends ObservableChainQuery<T> {\n  protected disposer?: () => void;\n\n  constructor(\n    kvStore: KVStore,\n    chainId: string,\n    chainGetter: ChainGetter,\n    protected readonly contractAddress: string,\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    protected obj: object\n  ) {\n    super(\n      kvStore,\n      chainId,\n      chainGetter,\n      ObservableCosmwasmContractChainQuery.getUrlFromObj(contractAddress, obj)\n    );\n  }\n\n  protected onStart() {\n    super.onStart();\n\n    return new Promise<void>((resolve) => {\n      this.disposer = autorun(() => {\n        const chainInfo = this.chainGetter.getChain(this.chainId);\n        if (chainInfo.features && chainInfo.features.includes(\"wasmd_0.24+\")) {\n          if (this.url.startsWith(\"/wasm/v1/\")) {\n            this.setUrl(`/cosmwasm${this.url}`);\n          }\n        } else {\n          if (this.url.startsWith(\"/cosmwasm/\")) {\n            this.setUrl(`${this.url.replace(\"/cosmwasm\", \"\")}`);\n          }\n        }\n\n        resolve();\n      });\n    });\n  }\n\n  protected onStop() {\n    if (this.disposer) {\n      this.disposer();\n      this.disposer = undefined;\n    }\n    super.onStop();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  protected static getUrlFromObj(contractAddress: string, obj: object): string {\n    const msg = JSON.stringify(obj);\n    const query = Buffer.from(msg).toString(\"base64\");\n\n    return `/wasm/v1/contract/${contractAddress}/smart/${query}`;\n  }\n\n  protected canFetch(): boolean {\n    return this.contractAddress.length !== 0;\n  }\n\n  protected async fetchResponse(\n    abortController: AbortController\n  ): Promise<{ response: QueryResponse<T>; headers: any }> {\n    const { response, headers } = await super.fetchResponse(abortController);\n\n    const wasmResult = (response.data as unknown) as\n      | {\n          data: any;\n        }\n      | undefined;\n\n    if (!wasmResult) {\n      throw new Error(\"Failed to get the response from the contract\");\n    }\n\n    return {\n      headers,\n      response: {\n        data: wasmResult.data as T,\n        status: response.status,\n        staled: false,\n        timestamp: Date.now(),\n      },\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}