{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Secp256k1HdWallet = exports.extractKdfConfiguration = void 0;\nconst crypto_1 = require(\"@cosmjs/crypto\");\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst utils_1 = require(\"@cosmjs/utils\");\nconst address_1 = require(\"./address\");\nconst encoding_2 = require(\"./encoding\");\nconst paths_1 = require(\"./paths\");\nconst signature_1 = require(\"./signature\");\nconst wallet_1 = require(\"./wallet\");\nconst serializationTypeV1 = \"secp256k1wallet-v1\";\n/**\n * A KDF configuration that is not very strong but can be used on the main thread.\n * It takes about 1 second in Node.js 12.15 and should have similar runtimes in other modern Wasm hosts.\n */\nconst basicPasswordHashingOptions = {\n  algorithm: \"argon2id\",\n  params: {\n    outputLength: 32,\n    opsLimit: 20,\n    memLimitKib: 12 * 1024\n  }\n};\nfunction isDerivationJson(thing) {\n  if (!utils_1.isNonNullObject(thing)) return false;\n  if (typeof thing.hdPath !== \"string\") return false;\n  if (typeof thing.prefix !== \"string\") return false;\n  return true;\n}\nfunction extractKdfConfigurationV1(doc) {\n  return doc.kdf;\n}\nfunction extractKdfConfiguration(serialization) {\n  const root = JSON.parse(serialization);\n  if (!utils_1.isNonNullObject(root)) throw new Error(\"Root document is not an object.\");\n  switch (root.type) {\n    case serializationTypeV1:\n      return extractKdfConfigurationV1(root);\n    default:\n      throw new Error(\"Unsupported serialization type\");\n  }\n}\nexports.extractKdfConfiguration = extractKdfConfiguration;\nclass Secp256k1HdWallet {\n  constructor(mnemonic, hdPath, privkey, pubkey, prefix) {\n    this.secret = mnemonic;\n    this.accounts = [{\n      hdPath: hdPath,\n      prefix: prefix\n    }];\n    this.privkey = privkey;\n    this.pubkey = pubkey;\n  }\n  /**\n   * Restores a wallet from the given BIP39 mnemonic.\n   *\n   * @param mnemonic Any valid English mnemonic.\n   * @param hdPath The BIP-32/SLIP-10 derivation path. Defaults to the Cosmos Hub/ATOM path `m/44'/118'/0'/0/0`.\n   * @param prefix The bech32 address prefix (human readable part). Defaults to \"cosmos\".\n   */\n  static async fromMnemonic(mnemonic) {\n    let hdPath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : paths_1.makeCosmoshubPath(0);\n    let prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"cosmos\";\n    const mnemonicChecked = new crypto_1.EnglishMnemonic(mnemonic);\n    const seed = await crypto_1.Bip39.mnemonicToSeed(mnemonicChecked);\n    const {\n      privkey\n    } = crypto_1.Slip10.derivePath(crypto_1.Slip10Curve.Secp256k1, seed, hdPath);\n    const uncompressed = (await crypto_1.Secp256k1.makeKeypair(privkey)).pubkey;\n    return new Secp256k1HdWallet(mnemonicChecked, hdPath, privkey, crypto_1.Secp256k1.compressPubkey(uncompressed), prefix);\n  }\n  /**\n   * Generates a new wallet with a BIP39 mnemonic of the given length.\n   *\n   * @param length The number of words in the mnemonic (12, 15, 18, 21 or 24).\n   * @param hdPath The BIP-32/SLIP-10 derivation path. Defaults to the Cosmos Hub/ATOM path `m/44'/118'/0'/0/0`.\n   * @param prefix The bech32 address prefix (human readable part). Defaults to \"cosmos\".\n   */\n  static async generate() {\n    let length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 12;\n    let hdPath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : paths_1.makeCosmoshubPath(0);\n    let prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"cosmos\";\n    const entropyLength = 4 * Math.floor(11 * length / 33);\n    const entropy = crypto_1.Random.getBytes(entropyLength);\n    const mnemonic = crypto_1.Bip39.encode(entropy);\n    return Secp256k1HdWallet.fromMnemonic(mnemonic.toString(), hdPath, prefix);\n  }\n  /**\n   * Restores a wallet from an encrypted serialization.\n   *\n   * @param password The user provided password used to generate an encryption key via a KDF.\n   *                 This is not normalized internally (see \"Unicode normalization\" to learn more).\n   */\n  static async deserialize(serialization, password) {\n    const root = JSON.parse(serialization);\n    if (!utils_1.isNonNullObject(root)) throw new Error(\"Root document is not an object.\");\n    switch (root.type) {\n      case serializationTypeV1:\n        return Secp256k1HdWallet.deserializeTypeV1(serialization, password);\n      default:\n        throw new Error(\"Unsupported serialization type\");\n    }\n  }\n  /**\n   * Restores a wallet from an encrypted serialization.\n   *\n   * This is an advanced alternative to calling `deserialize(serialization, password)` directly, which allows\n   * you to offload the KDF execution to a non-UI thread (e.g. in a WebWorker).\n   *\n   * The caller is responsible for ensuring the key was derived with the given KDF configuration. This can be\n   * done using `extractKdfConfiguration(serialization)` and `executeKdf(password, kdfConfiguration)` from this package.\n   */\n  static async deserializeWithEncryptionKey(serialization, encryptionKey) {\n    const root = JSON.parse(serialization);\n    if (!utils_1.isNonNullObject(root)) throw new Error(\"Root document is not an object.\");\n    const untypedRoot = root;\n    switch (untypedRoot.type) {\n      case serializationTypeV1:\n        {\n          const decryptedBytes = await wallet_1.decrypt(encoding_1.fromBase64(untypedRoot.data), encryptionKey, untypedRoot.encryption);\n          const decryptedDocument = JSON.parse(encoding_1.fromUtf8(decryptedBytes));\n          const {\n            mnemonic,\n            accounts\n          } = decryptedDocument;\n          utils_1.assert(typeof mnemonic === \"string\");\n          if (!Array.isArray(accounts)) throw new Error(\"Property 'accounts' is not an array\");\n          if (accounts.length !== 1) throw new Error(\"Property 'accounts' only supports one entry\");\n          const account = accounts[0];\n          if (!isDerivationJson(account)) throw new Error(\"Account is not in the correct format.\");\n          return Secp256k1HdWallet.fromMnemonic(mnemonic, crypto_1.stringToPath(account.hdPath), account.prefix);\n        }\n      default:\n        throw new Error(\"Unsupported serialization type\");\n    }\n  }\n  static async deserializeTypeV1(serialization, password) {\n    const root = JSON.parse(serialization);\n    if (!utils_1.isNonNullObject(root)) throw new Error(\"Root document is not an object.\");\n    const encryptionKey = await wallet_1.executeKdf(password, root.kdf);\n    return Secp256k1HdWallet.deserializeWithEncryptionKey(serialization, encryptionKey);\n  }\n  get mnemonic() {\n    return this.secret.toString();\n  }\n  get address() {\n    return address_1.rawSecp256k1PubkeyToAddress(this.pubkey, this.accounts[0].prefix);\n  }\n  async getAccounts() {\n    return [{\n      algo: \"secp256k1\",\n      address: this.address,\n      pubkey: this.pubkey\n    }];\n  }\n  async signAmino(signerAddress, signDoc) {\n    if (signerAddress !== this.address) {\n      throw new Error(`Address ${signerAddress} not found in wallet`);\n    }\n    const message = crypto_1.sha256(encoding_2.serializeSignDoc(signDoc));\n    const signature = await crypto_1.Secp256k1.createSignature(message, this.privkey);\n    const signatureBytes = new Uint8Array([...signature.r(32), ...signature.s(32)]);\n    return {\n      signed: signDoc,\n      signature: signature_1.encodeSecp256k1Signature(this.pubkey, signatureBytes)\n    };\n  }\n  /**\n   * Generates an encrypted serialization of this wallet.\n   *\n   * @param password The user provided password used to generate an encryption key via a KDF.\n   *                 This is not normalized internally (see \"Unicode normalization\" to learn more).\n   */\n  async serialize(password) {\n    const kdfConfiguration = basicPasswordHashingOptions;\n    const encryptionKey = await wallet_1.executeKdf(password, kdfConfiguration);\n    return this.serializeWithEncryptionKey(encryptionKey, kdfConfiguration);\n  }\n  /**\n   * Generates an encrypted serialization of this wallet.\n   *\n   * This is an advanced alternative to calling `serialize(password)` directly, which allows you to\n   * offload the KDF execution to a non-UI thread (e.g. in a WebWorker).\n   *\n   * The caller is responsible for ensuring the key was derived with the given KDF options. If this\n   * is not the case, the wallet cannot be restored with the original password.\n   */\n  async serializeWithEncryptionKey(encryptionKey, kdfConfiguration) {\n    const dataToEncrypt = {\n      mnemonic: this.mnemonic,\n      accounts: this.accounts.map(account => ({\n        hdPath: crypto_1.pathToString(account.hdPath),\n        prefix: account.prefix\n      }))\n    };\n    const dataToEncryptRaw = encoding_1.toUtf8(JSON.stringify(dataToEncrypt));\n    const encryptionConfiguration = {\n      algorithm: wallet_1.supportedAlgorithms.xchacha20poly1305Ietf\n    };\n    const encryptedData = await wallet_1.encrypt(dataToEncryptRaw, encryptionKey, encryptionConfiguration);\n    const out = {\n      type: serializationTypeV1,\n      kdf: kdfConfiguration,\n      encryption: encryptionConfiguration,\n      data: encoding_1.toBase64(encryptedData)\n    };\n    return JSON.stringify(out);\n  }\n}\nexports.Secp256k1HdWallet = Secp256k1HdWallet;","map":{"version":3,"mappings":"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","names":["serializationTypeV1","basicPasswordHashingOptions","algorithm","params","outputLength","opsLimit","memLimitKib","isDerivationJson","thing","utils_1","hdPath","prefix","extractKdfConfigurationV1","doc","kdf","extractKdfConfiguration","serialization","root","JSON","parse","Error","type","exports","Secp256k1HdWallet","constructor","mnemonic","privkey","pubkey","secret","accounts","fromMnemonic","paths_1","mnemonicChecked","crypto_1","seed","mnemonicToSeed","derivePath","Secp256k1","uncompressed","makeKeypair","compressPubkey","generate","length","entropyLength","Math","floor","entropy","getBytes","encode","toString","deserialize","password","deserializeTypeV1","deserializeWithEncryptionKey","encryptionKey","untypedRoot","decryptedBytes","wallet_1","encoding_1","data","encryption","decryptedDocument","Array","isArray","account","address","address_1","getAccounts","algo","signAmino","signerAddress","signDoc","message","encoding_2","signature","createSignature","signatureBytes","Uint8Array","r","s","signed","signature_1","serialize","kdfConfiguration","serializeWithEncryptionKey","dataToEncrypt","map","dataToEncryptRaw","stringify","encryptionConfiguration","xchacha20poly1305Ietf","encryptedData","out"],"sources":["../src/secp256k1hdwallet.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}