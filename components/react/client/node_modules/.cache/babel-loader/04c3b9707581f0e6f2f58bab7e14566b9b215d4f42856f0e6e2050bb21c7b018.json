{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ObservableQuerySpendableBalances = exports.ObservableChainQuerySpendableBalances = void 0;\nconst chain_query_1 = require(\"../../chain-query\");\nconst unit_1 = require(\"@keplr-wallet/unit\");\nconst mobx_1 = require(\"mobx\");\nclass ObservableChainQuerySpendableBalances extends chain_query_1.ObservableChainQuery {\n  constructor(kvStore, chainId, chainGetter, address) {\n    super(kvStore, chainId, chainGetter, `/cosmos/bank/v1beta1/spendable_balances/${address}`);\n  }\n  get balances() {\n    if (!this.response) {\n      return [];\n    }\n    const res = [];\n    const chainInfo = this.chainGetter.getChain(this.chainId);\n    for (const bal of this.response.data.balances) {\n      const currency = chainInfo.findCurrency(bal.denom);\n      if (currency) {\n        res.push(new unit_1.CoinPretty(currency, bal.amount));\n      }\n    }\n    return res;\n  }\n}\n__decorate([mobx_1.computed], ObservableChainQuerySpendableBalances.prototype, \"balances\", null);\nexports.ObservableChainQuerySpendableBalances = ObservableChainQuerySpendableBalances;\nclass ObservableQuerySpendableBalances extends chain_query_1.ObservableChainQueryMap {\n  constructor(kvStore, chainId, chainGetter) {\n    super(kvStore, chainId, chainGetter, denom => {\n      return new ObservableChainQuerySpendableBalances(this.kvStore, this.chainId, this.chainGetter, denom);\n    });\n    this.kvStore = kvStore;\n    this.chainId = chainId;\n    this.chainGetter = chainGetter;\n  }\n  getQueryBech32Address(bech32Address) {\n    return this.get(bech32Address);\n  }\n}\nexports.ObservableQuerySpendableBalances = ObservableQuerySpendableBalances;","map":{"version":3,"mappings":";;;;;;;;;;;;;AAEA;AAKA;AACA;AAEA,MAAaA,qCAAsC,SAAQC,kCAAuC;EAChGC,YACEC,OAAgB,EAChBC,OAAe,EACfC,WAAwB,EACxBC,OAAe;IAEf,KAAK,CACHH,OAAO,EACPC,OAAO,EACPC,WAAW,EACX,2CAA2CC,OAAO,EAAE,CACrD;EACH;EAGA,IAAIC,QAAQ;IACV,IAAI,CAAC,IAAI,CAACC,QAAQ,EAAE;MAClB,OAAO,EAAE;;IAGX,MAAMC,GAAG,GAAiB,EAAE;IAE5B,MAAMC,SAAS,GAAG,IAAI,CAACL,WAAW,CAACM,QAAQ,CAAC,IAAI,CAACP,OAAO,CAAC;IAEzD,KAAK,MAAMQ,GAAG,IAAI,IAAI,CAACJ,QAAQ,CAACK,IAAI,CAACN,QAAQ,EAAE;MAC7C,MAAMO,QAAQ,GAAGJ,SAAS,CAACK,YAAY,CAACH,GAAG,CAACI,KAAK,CAAC;MAClD,IAAIF,QAAQ,EAAE;QACZL,GAAG,CAACQ,IAAI,CAAC,IAAIC,iBAAU,CAACJ,QAAQ,EAAEF,GAAG,CAACO,MAAM,CAAC,CAAC;;;IAIlD,OAAOV,GAAG;EACZ;;AAjBAW,YADCC,eAAQ,qEAkBR;AAjCHC;AAoCA,MAAaC,gCAAiC,SAAQtB,qCAA0C;EAC9FC,YACqBC,OAAgB,EAChBC,OAAe,EACfC,WAAwB;IAE3C,KAAK,CAACF,OAAO,EAAEC,OAAO,EAAEC,WAAW,EAAGW,KAAa,IAAI;MACrD,OAAO,IAAIhB,qCAAqC,CAC9C,IAAI,CAACG,OAAO,EACZ,IAAI,CAACC,OAAO,EACZ,IAAI,CAACC,WAAW,EAChBW,KAAK,CACN;IACH,CAAC,CAAC;IAXiB,YAAO,GAAPb,OAAO;IACP,YAAO,GAAPC,OAAO;IACP,gBAAW,GAAXC,WAAW;EAUhC;EAEAmB,qBAAqB,CACnBC,aAAqB;IAErB,OAAO,IAAI,CAACC,GAAG,CAACD,aAAa,CAA0C;EACzE;;AApBFH","names":["ObservableChainQuerySpendableBalances","chain_query_1","constructor","kvStore","chainId","chainGetter","address","balances","response","res","chainInfo","getChain","bal","data","currency","findCurrency","denom","push","unit_1","amount","__decorate","mobx_1","exports","ObservableQuerySpendableBalances","getQueryBech32Address","bech32Address","get"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/@keplr-wallet/stores/src/query/cosmos/balance/spendable.ts"],"sourcesContent":["import { SpendableBalances } from \"./types\";\nimport { KVStore } from \"@keplr-wallet/common\";\nimport {\n  ObservableChainQuery,\n  ObservableChainQueryMap,\n} from \"../../chain-query\";\nimport { ChainGetter } from \"../../../common\";\nimport { CoinPretty } from \"@keplr-wallet/unit\";\nimport { computed } from \"mobx\";\n\nexport class ObservableChainQuerySpendableBalances extends ObservableChainQuery<SpendableBalances> {\n  constructor(\n    kvStore: KVStore,\n    chainId: string,\n    chainGetter: ChainGetter,\n    address: string\n  ) {\n    super(\n      kvStore,\n      chainId,\n      chainGetter,\n      `/cosmos/bank/v1beta1/spendable_balances/${address}`\n    );\n  }\n\n  @computed\n  get balances(): CoinPretty[] {\n    if (!this.response) {\n      return [];\n    }\n\n    const res: CoinPretty[] = [];\n\n    const chainInfo = this.chainGetter.getChain(this.chainId);\n\n    for (const bal of this.response.data.balances) {\n      const currency = chainInfo.findCurrency(bal.denom);\n      if (currency) {\n        res.push(new CoinPretty(currency, bal.amount));\n      }\n    }\n\n    return res;\n  }\n}\n\nexport class ObservableQuerySpendableBalances extends ObservableChainQueryMap<SpendableBalances> {\n  constructor(\n    protected readonly kvStore: KVStore,\n    protected readonly chainId: string,\n    protected readonly chainGetter: ChainGetter\n  ) {\n    super(kvStore, chainId, chainGetter, (denom: string) => {\n      return new ObservableChainQuerySpendableBalances(\n        this.kvStore,\n        this.chainId,\n        this.chainGetter,\n        denom\n      );\n    });\n  }\n\n  getQueryBech32Address(\n    bech32Address: string\n  ): ObservableChainQuerySpendableBalances {\n    return this.get(bech32Address) as ObservableChainQuerySpendableBalances;\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}