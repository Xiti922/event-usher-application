{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.accountFromAny = void 0;\nconst math_1 = require(\"@cosmjs/math\");\nconst proto_signing_1 = require(\"@cosmjs/proto-signing\");\nconst utils_1 = require(\"@cosmjs/utils\");\nconst auth_1 = require(\"cosmjs-types/cosmos/auth/v1beta1/auth\");\nconst vesting_1 = require(\"cosmjs-types/cosmos/vesting/v1beta1/vesting\");\nfunction uint64FromProto(input) {\n  return math_1.Uint64.fromString(input.toString());\n}\nfunction accountFromBaseAccount(input) {\n  const {\n    address,\n    pubKey,\n    accountNumber,\n    sequence\n  } = input;\n  const pubkey = (0, proto_signing_1.decodePubkey)(pubKey);\n  return {\n    address: address,\n    pubkey: pubkey,\n    accountNumber: uint64FromProto(accountNumber).toNumber(),\n    sequence: uint64FromProto(sequence).toNumber()\n  };\n}\n/**\n * Basic implementation of AccountParser. This is supposed to support the most relevant\n * common Cosmos SDK account types. If you need support for exotic account types,\n * you'll need to write your own account decoder.\n */\nfunction accountFromAny(input) {\n  var _a, _b, _c, _d, _e, _f, _g;\n  const {\n    typeUrl,\n    value\n  } = input;\n  switch (typeUrl) {\n    // auth\n    case \"/cosmos.auth.v1beta1.BaseAccount\":\n      return accountFromBaseAccount(auth_1.BaseAccount.decode(value));\n    case \"/cosmos.auth.v1beta1.ModuleAccount\":\n      {\n        const baseAccount = auth_1.ModuleAccount.decode(value).baseAccount;\n        (0, utils_1.assert)(baseAccount);\n        return accountFromBaseAccount(baseAccount);\n      }\n    // vesting\n    case \"/cosmos.vesting.v1beta1.BaseVestingAccount\":\n      {\n        const baseAccount = (_a = vesting_1.BaseVestingAccount.decode(value)) === null || _a === void 0 ? void 0 : _a.baseAccount;\n        (0, utils_1.assert)(baseAccount);\n        return accountFromBaseAccount(baseAccount);\n      }\n    case \"/cosmos.vesting.v1beta1.ContinuousVestingAccount\":\n      {\n        const baseAccount = (_c = (_b = vesting_1.ContinuousVestingAccount.decode(value)) === null || _b === void 0 ? void 0 : _b.baseVestingAccount) === null || _c === void 0 ? void 0 : _c.baseAccount;\n        (0, utils_1.assert)(baseAccount);\n        return accountFromBaseAccount(baseAccount);\n      }\n    case \"/cosmos.vesting.v1beta1.DelayedVestingAccount\":\n      {\n        const baseAccount = (_e = (_d = vesting_1.DelayedVestingAccount.decode(value)) === null || _d === void 0 ? void 0 : _d.baseVestingAccount) === null || _e === void 0 ? void 0 : _e.baseAccount;\n        (0, utils_1.assert)(baseAccount);\n        return accountFromBaseAccount(baseAccount);\n      }\n    case \"/cosmos.vesting.v1beta1.PeriodicVestingAccount\":\n      {\n        const baseAccount = (_g = (_f = vesting_1.PeriodicVestingAccount.decode(value)) === null || _f === void 0 ? void 0 : _f.baseVestingAccount) === null || _g === void 0 ? void 0 : _g.baseAccount;\n        (0, utils_1.assert)(baseAccount);\n        return accountFromBaseAccount(baseAccount);\n      }\n    default:\n      throw new Error(`Unsupported type: '${typeUrl}'`);\n  }\n}\nexports.accountFromAny = accountFromAny;","map":{"version":3,"mappings":";;;;;;AACA;AACA;AACA;AACA;AACA;AAiBA,SAASA,eAAe,CAACC,KAAoB;EAC3C,OAAOC,aAAM,CAACC,UAAU,CAACF,KAAK,CAACG,QAAQ,EAAE,CAAC;AAC5C;AAEA,SAASC,sBAAsB,CAACJ,KAAkB;EAChD,MAAM;IAAEK,OAAO;IAAEC,MAAM;IAAEC,aAAa;IAAEC;EAAQ,CAAE,GAAGR,KAAK;EAC1D,MAAMS,MAAM,GAAG,gCAAY,EAACH,MAAM,CAAC;EACnC,OAAO;IACLD,OAAO,EAAEA,OAAO;IAChBI,MAAM,EAAEA,MAAM;IACdF,aAAa,EAAER,eAAe,CAACQ,aAAa,CAAC,CAACG,QAAQ,EAAE;IACxDF,QAAQ,EAAET,eAAe,CAACS,QAAQ,CAAC,CAACE,QAAQ;GAC7C;AACH;AAQA;;;;;AAKA,SAAgBC,cAAc,CAACX,KAAU;;EACvC,MAAM;IAAEY,OAAO;IAAEC;EAAK,CAAE,GAAGb,KAAK;EAEhC,QAAQY,OAAO;IACb;IAEA,KAAK,kCAAkC;MACrC,OAAOR,sBAAsB,CAACU,kBAAW,CAACC,MAAM,CAACF,KAAK,CAAC,CAAC;IAC1D,KAAK,oCAAoC;MAAE;QACzC,MAAMG,WAAW,GAAGF,oBAAa,CAACC,MAAM,CAACF,KAAK,CAAC,CAACG,WAAW;QAC3D,kBAAM,EAACA,WAAW,CAAC;QACnB,OAAOZ,sBAAsB,CAACY,WAAW,CAAC;;IAG5C;IAEA,KAAK,4CAA4C;MAAE;QACjD,MAAMA,WAAW,GAAG,kCAAkB,CAACD,MAAM,CAACF,KAAK,CAAC,0CAAEG,WAAW;QACjE,kBAAM,EAACA,WAAW,CAAC;QACnB,OAAOZ,sBAAsB,CAACY,WAAW,CAAC;;IAE5C,KAAK,kDAAkD;MAAE;QACvD,MAAMA,WAAW,GAAG,8CAAwB,CAACD,MAAM,CAACF,KAAK,CAAC,0CAAEI,kBAAkB,0CAAED,WAAW;QAC3F,kBAAM,EAACA,WAAW,CAAC;QACnB,OAAOZ,sBAAsB,CAACY,WAAW,CAAC;;IAE5C,KAAK,+CAA+C;MAAE;QACpD,MAAMA,WAAW,GAAG,2CAAqB,CAACD,MAAM,CAACF,KAAK,CAAC,0CAAEI,kBAAkB,0CAAED,WAAW;QACxF,kBAAM,EAACA,WAAW,CAAC;QACnB,OAAOZ,sBAAsB,CAACY,WAAW,CAAC;;IAE5C,KAAK,gDAAgD;MAAE;QACrD,MAAMA,WAAW,GAAG,4CAAsB,CAACD,MAAM,CAACF,KAAK,CAAC,0CAAEI,kBAAkB,0CAAED,WAAW;QACzF,kBAAM,EAACA,WAAW,CAAC;QACnB,OAAOZ,sBAAsB,CAACY,WAAW,CAAC;;IAG5C;MACE,MAAM,IAAIE,KAAK,CAAC,sBAAsBN,OAAO,GAAG,CAAC;EAAC;AAExD;AAxCAO","names":["uint64FromProto","input","math_1","fromString","toString","accountFromBaseAccount","address","pubKey","accountNumber","sequence","pubkey","toNumber","accountFromAny","typeUrl","value","auth_1","decode","baseAccount","baseVestingAccount","Error","exports"],"sources":["../src/accounts.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}