{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CompactBitArray = exports.MultiSignature = exports.protobufPackage = void 0;\nconst minimal_1 = __importDefault(require(\"protobufjs/minimal\"));\nexports.protobufPackage = \"cosmos.crypto.multisig.v1beta1\";\nconst baseMultiSignature = {};\nexports.MultiSignature = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    for (const v of message.signatures) {\n      writer.uint32(10).bytes(v);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof Uint8Array ? new minimal_1.default.Reader(input) : input;\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseMultiSignature);\n    message.signatures = [];\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.signatures.push(reader.bytes());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseMultiSignature);\n    message.signatures = [];\n    if (object.signatures !== undefined && object.signatures !== null) {\n      for (const e of object.signatures) {\n        message.signatures.push(bytesFromBase64(e));\n      }\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    if (message.signatures) {\n      obj.signatures = message.signatures.map(e => base64FromBytes(e !== undefined ? e : new Uint8Array()));\n    } else {\n      obj.signatures = [];\n    }\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseMultiSignature);\n    message.signatures = [];\n    if (object.signatures !== undefined && object.signatures !== null) {\n      for (const e of object.signatures) {\n        message.signatures.push(e);\n      }\n    }\n    return message;\n  }\n};\nconst baseCompactBitArray = {\n  extraBitsStored: 0\n};\nexports.CompactBitArray = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.extraBitsStored !== 0) {\n      writer.uint32(8).uint32(message.extraBitsStored);\n    }\n    if (message.elems.length !== 0) {\n      writer.uint32(18).bytes(message.elems);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof Uint8Array ? new minimal_1.default.Reader(input) : input;\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseCompactBitArray);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.extraBitsStored = reader.uint32();\n          break;\n        case 2:\n          message.elems = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseCompactBitArray);\n    if (object.extraBitsStored !== undefined && object.extraBitsStored !== null) {\n      message.extraBitsStored = Number(object.extraBitsStored);\n    } else {\n      message.extraBitsStored = 0;\n    }\n    if (object.elems !== undefined && object.elems !== null) {\n      message.elems = bytesFromBase64(object.elems);\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.extraBitsStored !== undefined && (obj.extraBitsStored = message.extraBitsStored);\n    message.elems !== undefined && (obj.elems = base64FromBytes(message.elems !== undefined ? message.elems : new Uint8Array()));\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseCompactBitArray);\n    if (object.extraBitsStored !== undefined && object.extraBitsStored !== null) {\n      message.extraBitsStored = object.extraBitsStored;\n    } else {\n      message.extraBitsStored = 0;\n    }\n    if (object.elems !== undefined && object.elems !== null) {\n      message.elems = object.elems;\n    } else {\n      message.elems = new Uint8Array();\n    }\n    return message;\n  }\n};\nvar globalThis = (() => {\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  if (typeof self !== \"undefined\") return self;\n  if (typeof window !== \"undefined\") return window;\n  if (typeof global !== \"undefined\") return global;\n  throw \"Unable to locate global object\";\n})();\nconst atob = globalThis.atob || (b64 => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64) {\n  const bin = atob(b64);\n  const arr = new Uint8Array(bin.length);\n  for (let i = 0; i < bin.length; ++i) {\n    arr[i] = bin.charCodeAt(i);\n  }\n  return arr;\n}\nconst btoa = globalThis.btoa || (bin => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr) {\n  const bin = [];\n  for (let i = 0; i < arr.byteLength; ++i) {\n    bin.push(String.fromCharCode(arr[i]));\n  }\n  return btoa(bin.join(\"\"));\n}","map":{"version":3,"mappings":"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","names":["exports","baseMultiSignature","encode","message","writer","minimal_1","Writer","create","v","signatures","uint32","bytes","decode","input","length","reader","Uint8Array","Reader","end","undefined","len","pos","Object","tag","push","skipType","fromJSON","object","e","bytesFromBase64","toJSON","obj","map","base64FromBytes","fromPartial","baseCompactBitArray","extraBitsStored","elems","Number","globalThis","self","window","global","atob","b64","Buffer","from","toString","bin","arr","i","charCodeAt","btoa","byteLength","String","fromCharCode","join"],"sources":["../../../../../../src/codec/cosmos/crypto/multisig/v1beta1/multisig.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}