{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.encodeBech32Pubkey = exports.encodeAminoPubkey = exports.decodeBech32Pubkey = exports.decodeAminoPubkey = exports.encodeEd25519Pubkey = exports.encodeSecp256k1Pubkey = void 0;\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst math_1 = require(\"@cosmjs/math\");\nconst utils_1 = require(\"@cosmjs/utils\");\nconst pubkeys_1 = require(\"./pubkeys\");\n/**\n * Takes a Secp256k1 public key as raw bytes and returns the Amino JSON\n * representation of it (the type/value wrapper object).\n */\nfunction encodeSecp256k1Pubkey(pubkey) {\n  if (pubkey.length !== 33 || pubkey[0] !== 0x02 && pubkey[0] !== 0x03) {\n    throw new Error(\"Public key must be compressed secp256k1, i.e. 33 bytes starting with 0x02 or 0x03\");\n  }\n  return {\n    type: pubkeys_1.pubkeyType.secp256k1,\n    value: (0, encoding_1.toBase64)(pubkey)\n  };\n}\nexports.encodeSecp256k1Pubkey = encodeSecp256k1Pubkey;\n/**\n * Takes an Edd25519 public key as raw bytes and returns the Amino JSON\n * representation of it (the type/value wrapper object).\n */\nfunction encodeEd25519Pubkey(pubkey) {\n  if (pubkey.length !== 32) {\n    throw new Error(\"Ed25519 public key must be 32 bytes long\");\n  }\n  return {\n    type: pubkeys_1.pubkeyType.ed25519,\n    value: (0, encoding_1.toBase64)(pubkey)\n  };\n}\nexports.encodeEd25519Pubkey = encodeEd25519Pubkey;\n// As discussed in https://github.com/binance-chain/javascript-sdk/issues/163\n// Prefixes listed here: https://github.com/tendermint/tendermint/blob/d419fffe18531317c28c29a292ad7d253f6cafdf/docs/spec/blockchain/encoding.md#public-key-cryptography\n// Last bytes is varint-encoded length prefix\nconst pubkeyAminoPrefixSecp256k1 = (0, encoding_1.fromHex)(\"eb5ae987\" + \"21\" /* fixed length */);\nconst pubkeyAminoPrefixEd25519 = (0, encoding_1.fromHex)(\"1624de64\" + \"20\" /* fixed length */);\nconst pubkeyAminoPrefixSr25519 = (0, encoding_1.fromHex)(\"0dfb1005\" + \"20\" /* fixed length */);\n/** See https://github.com/tendermint/tendermint/commit/38b401657e4ad7a7eeb3c30a3cbf512037df3740 */\nconst pubkeyAminoPrefixMultisigThreshold = (0, encoding_1.fromHex)(\"22c1f7e2\" /* variable length not included */);\n/**\n * Decodes a pubkey in the Amino binary format to a type/value object.\n */\nfunction decodeAminoPubkey(data) {\n  if ((0, utils_1.arrayContentStartsWith)(data, pubkeyAminoPrefixSecp256k1)) {\n    const rest = data.slice(pubkeyAminoPrefixSecp256k1.length);\n    if (rest.length !== 33) {\n      throw new Error(\"Invalid rest data length. Expected 33 bytes (compressed secp256k1 pubkey).\");\n    }\n    return {\n      type: pubkeys_1.pubkeyType.secp256k1,\n      value: (0, encoding_1.toBase64)(rest)\n    };\n  } else if ((0, utils_1.arrayContentStartsWith)(data, pubkeyAminoPrefixEd25519)) {\n    const rest = data.slice(pubkeyAminoPrefixEd25519.length);\n    if (rest.length !== 32) {\n      throw new Error(\"Invalid rest data length. Expected 32 bytes (Ed25519 pubkey).\");\n    }\n    return {\n      type: pubkeys_1.pubkeyType.ed25519,\n      value: (0, encoding_1.toBase64)(rest)\n    };\n  } else if ((0, utils_1.arrayContentStartsWith)(data, pubkeyAminoPrefixSr25519)) {\n    const rest = data.slice(pubkeyAminoPrefixSr25519.length);\n    if (rest.length !== 32) {\n      throw new Error(\"Invalid rest data length. Expected 32 bytes (Sr25519 pubkey).\");\n    }\n    return {\n      type: pubkeys_1.pubkeyType.sr25519,\n      value: (0, encoding_1.toBase64)(rest)\n    };\n  } else if ((0, utils_1.arrayContentStartsWith)(data, pubkeyAminoPrefixMultisigThreshold)) {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return decodeMultisigPubkey(data);\n  } else {\n    throw new Error(\"Unsupported public key type. Amino data starts with: \" + (0, encoding_1.toHex)(data.slice(0, 5)));\n  }\n}\nexports.decodeAminoPubkey = decodeAminoPubkey;\n/**\n * Decodes a bech32 pubkey to Amino binary, which is then decoded to a type/value object.\n * The bech32 prefix is ignored and discareded.\n *\n * @param bechEncoded the bech32 encoded pubkey\n */\nfunction decodeBech32Pubkey(bechEncoded) {\n  const {\n    data\n  } = (0, encoding_1.fromBech32)(bechEncoded);\n  return decodeAminoPubkey(data);\n}\nexports.decodeBech32Pubkey = decodeBech32Pubkey;\n/**\n * Uvarint decoder for Amino.\n * @see https://github.com/tendermint/go-amino/blob/8e779b71f40d175/decoder.go#L64-76\n * @returns varint as number, and bytes count occupied by varaint\n */\nfunction decodeUvarint(reader) {\n  if (reader.length < 1) {\n    throw new Error(\"Can't decode varint. EOF\");\n  }\n  if (reader[0] > 127) {\n    throw new Error(\"Decoding numbers > 127 is not supported here. Please tell those lazy CosmJS maintainers to port the binary.Varint implementation from the Go standard library and write some tests.\");\n  }\n  return [reader[0], 1];\n}\n/**\n * Decodes a multisig pubkey to type object.\n * Pubkey structure [ prefix + const + threshold + loop:(const + pubkeyLength + pubkey            ) ]\n *                  [   4b   + 1b    +  varint   + loop:(1b    +    varint    + pubkeyLength bytes) ]\n * @param data encoded pubkey\n */\nfunction decodeMultisigPubkey(data) {\n  const reader = Array.from(data);\n  // remove multisig amino prefix;\n  const prefixFromReader = reader.splice(0, pubkeyAminoPrefixMultisigThreshold.length);\n  if (!(0, utils_1.arrayContentStartsWith)(prefixFromReader, pubkeyAminoPrefixMultisigThreshold)) {\n    throw new Error(\"Invalid multisig prefix.\");\n  }\n  // remove 0x08 threshold prefix;\n  if (reader.shift() != 0x08) {\n    throw new Error(\"Invalid multisig data. Expecting 0x08 prefix before threshold.\");\n  }\n  // read threshold\n  const [threshold, thresholdBytesLength] = decodeUvarint(reader);\n  reader.splice(0, thresholdBytesLength);\n  // read participants pubkeys\n  const pubkeys = [];\n  while (reader.length > 0) {\n    // remove 0x12 threshold prefix;\n    if (reader.shift() != 0x12) {\n      throw new Error(\"Invalid multisig data. Expecting 0x12 prefix before participant pubkey length.\");\n    }\n    // read pubkey length\n    const [pubkeyLength, pubkeyLengthBytesSize] = decodeUvarint(reader);\n    reader.splice(0, pubkeyLengthBytesSize);\n    // verify that we can read pubkey\n    if (reader.length < pubkeyLength) {\n      throw new Error(\"Invalid multisig data length.\");\n    }\n    // read and decode participant pubkey\n    const encodedPubkey = reader.splice(0, pubkeyLength);\n    const pubkey = decodeAminoPubkey(Uint8Array.from(encodedPubkey));\n    pubkeys.push(pubkey);\n  }\n  return {\n    type: pubkeys_1.pubkeyType.multisigThreshold,\n    value: {\n      threshold: threshold.toString(),\n      pubkeys: pubkeys\n    }\n  };\n}\n/**\n * Uvarint encoder for Amino. This is the same encoding as `binary.PutUvarint` from the Go\n * standard library.\n *\n * @see https://github.com/tendermint/go-amino/blob/8e779b71f40d175/encoder.go#L77-L85\n */\nfunction encodeUvarint(value) {\n  const checked = math_1.Uint53.fromString(value.toString()).toNumber();\n  if (checked > 127) {\n    throw new Error(\"Encoding numbers > 127 is not supported here. Please tell those lazy CosmJS maintainers to port the binary.PutUvarint implementation from the Go standard library and write some tests.\");\n  }\n  return [checked];\n}\n/**\n * Encodes a public key to binary Amino.\n */\nfunction encodeAminoPubkey(pubkey) {\n  if ((0, pubkeys_1.isMultisigThresholdPubkey)(pubkey)) {\n    const out = Array.from(pubkeyAminoPrefixMultisigThreshold);\n    out.push(0x08); // TODO: What is this?\n    out.push(...encodeUvarint(pubkey.value.threshold));\n    for (const pubkeyData of pubkey.value.pubkeys.map(p => encodeAminoPubkey(p))) {\n      out.push(0x12); // TODO: What is this?\n      out.push(...encodeUvarint(pubkeyData.length));\n      out.push(...pubkeyData);\n    }\n    return new Uint8Array(out);\n  } else if ((0, pubkeys_1.isEd25519Pubkey)(pubkey)) {\n    return new Uint8Array([...pubkeyAminoPrefixEd25519, ...(0, encoding_1.fromBase64)(pubkey.value)]);\n  } else if ((0, pubkeys_1.isSecp256k1Pubkey)(pubkey)) {\n    return new Uint8Array([...pubkeyAminoPrefixSecp256k1, ...(0, encoding_1.fromBase64)(pubkey.value)]);\n  } else {\n    throw new Error(\"Unsupported pubkey type\");\n  }\n}\nexports.encodeAminoPubkey = encodeAminoPubkey;\n/**\n * Encodes a public key to binary Amino and then to bech32.\n *\n * @param pubkey the public key to encode\n * @param prefix the bech32 prefix (human readable part)\n */\nfunction encodeBech32Pubkey(pubkey, prefix) {\n  return (0, encoding_1.toBech32)(prefix, encodeAminoPubkey(pubkey));\n}\nexports.encodeBech32Pubkey = encodeBech32Pubkey;","map":{"version":3,"mappings":"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","names":["encodeSecp256k1Pubkey","pubkey","length","Error","type","pubkeys_1","secp256k1","value","exports","encodeEd25519Pubkey","ed25519","pubkeyAminoPrefixSecp256k1","pubkeyAminoPrefixEd25519","pubkeyAminoPrefixSr25519","pubkeyAminoPrefixMultisigThreshold","decodeAminoPubkey","data","rest","slice","sr25519","decodeMultisigPubkey","decodeBech32Pubkey","bechEncoded","decodeUvarint","reader","Array","from","prefixFromReader","splice","shift","threshold","thresholdBytesLength","pubkeys","pubkeyLength","pubkeyLengthBytesSize","encodedPubkey","Uint8Array","push","multisigThreshold","toString","encodeUvarint","checked","math_1","fromString","toNumber","encodeAminoPubkey","out","pubkeyData","map","p","encodeBech32Pubkey","prefix"],"sources":["../src/encoding.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}