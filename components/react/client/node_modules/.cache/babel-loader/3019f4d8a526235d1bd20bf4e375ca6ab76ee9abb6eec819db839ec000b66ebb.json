{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IntPretty = void 0;\nconst int_1 = require(\"./int\");\nconst decimal_1 = require(\"./decimal\");\nconst dec_utils_1 = require(\"./dec-utils\");\nconst coin_utils_1 = require(\"./coin-utils\");\nclass IntPretty {\n  constructor(num) {\n    this.floatingDecimalPointRight = 0;\n    this._options = {\n      maxDecimals: 0,\n      trim: false,\n      shrink: false,\n      ready: true,\n      locale: true,\n      inequalitySymbol: false,\n      inequalitySymbolSeparator: \" \"\n    };\n    if (typeof num === \"object\" && \"toDec\" in num) {\n      num = num.toDec();\n    } else if (!(num instanceof decimal_1.Dec)) {\n      num = new decimal_1.Dec(num);\n    }\n    if (num.isZero()) {\n      this.dec = num;\n      return;\n    }\n    let dec = num;\n    let decPrecision = 0;\n    for (let i = 0; i < 18; i++) {\n      if (!dec.truncate().equals(new int_1.Int(0)) && dec.equals(new decimal_1.Dec(dec.truncate()))) {\n        break;\n      }\n      dec = dec.mul(new decimal_1.Dec(10));\n      decPrecision++;\n    }\n    this.dec = num;\n    this._options.maxDecimals = decPrecision;\n  }\n  get options() {\n    return this._options;\n  }\n  moveDecimalPointLeft(delta) {\n    const pretty = this.clone();\n    pretty.floatingDecimalPointRight += -delta;\n    return pretty;\n  }\n  moveDecimalPointRight(delta) {\n    const pretty = this.clone();\n    pretty.floatingDecimalPointRight += delta;\n    return pretty;\n  }\n  /**\n   * @deprecated Use`moveDecimalPointLeft`\n   */\n  increasePrecision(delta) {\n    return this.moveDecimalPointLeft(delta);\n  }\n  /**\n   * @deprecated Use`moveDecimalPointRight`\n   */\n  decreasePrecision(delta) {\n    return this.moveDecimalPointRight(delta);\n  }\n  maxDecimals(max) {\n    const pretty = this.clone();\n    pretty._options.maxDecimals = max;\n    return pretty;\n  }\n  inequalitySymbol(bool) {\n    const pretty = this.clone();\n    pretty._options.inequalitySymbol = bool;\n    return pretty;\n  }\n  inequalitySymbolSeparator(str) {\n    const pretty = this.clone();\n    pretty._options.inequalitySymbolSeparator = str;\n    return pretty;\n  }\n  trim(bool) {\n    const pretty = this.clone();\n    pretty._options.trim = bool;\n    return pretty;\n  }\n  shrink(bool) {\n    const pretty = this.clone();\n    pretty._options.shrink = bool;\n    return pretty;\n  }\n  locale(locale) {\n    const pretty = this.clone();\n    pretty._options.locale = locale;\n    return pretty;\n  }\n  /**\n   * Ready indicates the actual value is ready to show the users.\n   * Even if the ready option is false, it expects that the value can be shown to users (probably as 0).\n   * The method that returns prettied value may return `undefined` or `null` if the value is not ready.\n   * But, alternatively, it can return the 0 value that can be shown the users anyway, but indicates that the value is not ready.\n   * @param bool\n   */\n  ready(bool) {\n    const pretty = this.clone();\n    pretty._options.ready = bool;\n    return pretty;\n  }\n  get isReady() {\n    return this._options.ready;\n  }\n  add(target) {\n    if (!(target instanceof decimal_1.Dec)) {\n      target = target.toDec();\n    }\n    const pretty = new IntPretty(this.toDec().add(target));\n    pretty._options = Object.assign({}, this._options);\n    return pretty;\n  }\n  sub(target) {\n    if (!(target instanceof decimal_1.Dec)) {\n      target = target.toDec();\n    }\n    const pretty = new IntPretty(this.toDec().sub(target));\n    pretty._options = Object.assign({}, this._options);\n    return pretty;\n  }\n  mul(target) {\n    if (!(target instanceof decimal_1.Dec)) {\n      target = target.toDec();\n    }\n    const pretty = new IntPretty(this.toDec().mul(target));\n    pretty._options = Object.assign({}, this._options);\n    return pretty;\n  }\n  quo(target) {\n    if (!(target instanceof decimal_1.Dec)) {\n      target = target.toDec();\n    }\n    const pretty = new IntPretty(this.toDec().quo(target));\n    pretty._options = Object.assign({}, this._options);\n    return pretty;\n  }\n  toDec() {\n    if (this.floatingDecimalPointRight === 0) {\n      return this.dec;\n    } else if (this.floatingDecimalPointRight > 0) {\n      return this.dec.mulTruncate(dec_utils_1.DecUtils.getTenExponentN(this.floatingDecimalPointRight));\n    } else {\n      // Since a decimal in Dec cannot exceed 18, it cannot be computed at once.\n      let i = -this.floatingDecimalPointRight;\n      let dec = this.dec;\n      while (i > 0) {\n        if (i >= decimal_1.Dec.precision) {\n          dec = dec.mulTruncate(dec_utils_1.DecUtils.getTenExponentN(-decimal_1.Dec.precision));\n          i -= decimal_1.Dec.precision;\n        } else {\n          dec = dec.mulTruncate(dec_utils_1.DecUtils.getTenExponentN(-(i % decimal_1.Dec.precision)));\n          break;\n        }\n      }\n      return dec;\n    }\n  }\n  toString() {\n    return this.toStringWithSymbols(\"\", \"\");\n  }\n  toStringWithSymbols(prefix, suffix) {\n    const dec = this.toDec();\n    if (this._options.inequalitySymbol && !dec.isZero() && dec.abs().lt(dec_utils_1.DecUtils.getTenExponentN(-this._options.maxDecimals))) {\n      const isNeg = dec.isNegative();\n      return `${isNeg ? \">\" : \"<\"}${this._options.inequalitySymbolSeparator}${isNeg ? \"-\" : \"\"}${prefix}${dec_utils_1.DecUtils.getTenExponentN(-this._options.maxDecimals).toString(this._options.maxDecimals, this._options.locale)}${suffix}`;\n    }\n    let result;\n    if (!this._options.shrink) {\n      result = dec.toString(this._options.maxDecimals, this._options.locale);\n    } else {\n      result = coin_utils_1.CoinUtils.shrinkDecimals(dec, 0, this._options.maxDecimals, this._options.locale);\n    }\n    if (this._options.trim) {\n      result = dec_utils_1.DecUtils.trim(result);\n    }\n    const isNeg = result.charAt(0) === \"-\";\n    if (isNeg) {\n      result = result.slice(1);\n    }\n    return `${isNeg ? \"-\" : \"\"}${prefix}${result}${suffix}`;\n  }\n  clone() {\n    const pretty = new IntPretty(this.dec);\n    pretty.dec = this.dec;\n    pretty.floatingDecimalPointRight = this.floatingDecimalPointRight;\n    pretty._options = Object.assign({}, this._options);\n    return pretty;\n  }\n}\nexports.IntPretty = IntPretty;","map":{"version":3,"mappings":"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","names":["IntPretty","constructor","num","maxDecimals","trim","shrink","ready","locale","inequalitySymbol","inequalitySymbolSeparator","toDec","decimal_1","isZero","dec","decPrecision","i","truncate","equals","int_1","mul","_options","options","moveDecimalPointLeft","delta","pretty","clone","floatingDecimalPointRight","moveDecimalPointRight","increasePrecision","decreasePrecision","max","bool","str","isReady","add","target","sub","quo","mulTruncate","dec_utils_1","getTenExponentN","precision","toString","toStringWithSymbols","prefix","suffix","abs","lt","isNeg","isNegative","result","coin_utils_1","shrinkDecimals","charAt","slice","exports"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/@keplr-wallet/unit/src/int-pretty.ts"],"sourcesContent":["import { Int } from \"./int\";\nimport { Dec } from \"./decimal\";\nimport { DecUtils } from \"./dec-utils\";\nimport { CoinUtils } from \"./coin-utils\";\nimport { DeepReadonly } from \"utility-types\";\nimport bigInteger from \"big-integer\";\n\nexport type IntPrettyOptions = {\n  maxDecimals: number;\n  trim: boolean;\n  shrink: boolean;\n  ready: boolean;\n  locale: boolean;\n  // If this is true, toString() will return the string with prefix like < 0.001 if a value cannot be expressed with a max decimals.\n  inequalitySymbol: boolean;\n  inequalitySymbolSeparator: string;\n};\n\nexport class IntPretty {\n  protected dec: Dec;\n  protected floatingDecimalPointRight = 0;\n\n  protected _options: IntPrettyOptions = {\n    maxDecimals: 0,\n    trim: false,\n    shrink: false,\n    ready: true,\n    locale: true,\n    inequalitySymbol: false,\n    inequalitySymbolSeparator: \" \",\n  };\n\n  constructor(num: Dec | { toDec(): Dec } | bigInteger.BigNumber) {\n    if (typeof num === \"object\" && \"toDec\" in num) {\n      num = num.toDec();\n    } else if (!(num instanceof Dec)) {\n      num = new Dec(num);\n    }\n\n    if (num.isZero()) {\n      this.dec = num;\n      return;\n    }\n\n    let dec = num;\n    let decPrecision = 0;\n    for (let i = 0; i < 18; i++) {\n      if (\n        !dec.truncate().equals(new Int(0)) &&\n        dec.equals(new Dec(dec.truncate()))\n      ) {\n        break;\n      }\n      dec = dec.mul(new Dec(10));\n      decPrecision++;\n    }\n\n    this.dec = num;\n    this._options.maxDecimals = decPrecision;\n  }\n\n  get options(): DeepReadonly<IntPrettyOptions> {\n    return this._options;\n  }\n\n  moveDecimalPointLeft(delta: number): IntPretty {\n    const pretty = this.clone();\n    pretty.floatingDecimalPointRight += -delta;\n    return pretty;\n  }\n\n  moveDecimalPointRight(delta: number): IntPretty {\n    const pretty = this.clone();\n    pretty.floatingDecimalPointRight += delta;\n    return pretty;\n  }\n\n  /**\n   * @deprecated Use`moveDecimalPointLeft`\n   */\n  increasePrecision(delta: number): IntPretty {\n    return this.moveDecimalPointLeft(delta);\n  }\n\n  /**\n   * @deprecated Use`moveDecimalPointRight`\n   */\n  decreasePrecision(delta: number): IntPretty {\n    return this.moveDecimalPointRight(delta);\n  }\n\n  maxDecimals(max: number): IntPretty {\n    const pretty = this.clone();\n    pretty._options.maxDecimals = max;\n    return pretty;\n  }\n\n  inequalitySymbol(bool: boolean): IntPretty {\n    const pretty = this.clone();\n    pretty._options.inequalitySymbol = bool;\n    return pretty;\n  }\n\n  inequalitySymbolSeparator(str: string): IntPretty {\n    const pretty = this.clone();\n    pretty._options.inequalitySymbolSeparator = str;\n    return pretty;\n  }\n\n  trim(bool: boolean): IntPretty {\n    const pretty = this.clone();\n    pretty._options.trim = bool;\n    return pretty;\n  }\n\n  shrink(bool: boolean): IntPretty {\n    const pretty = this.clone();\n    pretty._options.shrink = bool;\n    return pretty;\n  }\n\n  locale(locale: boolean): IntPretty {\n    const pretty = this.clone();\n    pretty._options.locale = locale;\n    return pretty;\n  }\n\n  /**\n   * Ready indicates the actual value is ready to show the users.\n   * Even if the ready option is false, it expects that the value can be shown to users (probably as 0).\n   * The method that returns prettied value may return `undefined` or `null` if the value is not ready.\n   * But, alternatively, it can return the 0 value that can be shown the users anyway, but indicates that the value is not ready.\n   * @param bool\n   */\n  ready(bool: boolean): IntPretty {\n    const pretty = this.clone();\n    pretty._options.ready = bool;\n    return pretty;\n  }\n\n  get isReady(): boolean {\n    return this._options.ready;\n  }\n\n  add(target: Dec | { toDec(): Dec }): IntPretty {\n    if (!(target instanceof Dec)) {\n      target = target.toDec();\n    }\n\n    const pretty = new IntPretty(this.toDec().add(target));\n    pretty._options = {\n      ...this._options,\n    };\n    return pretty;\n  }\n\n  sub(target: Dec | { toDec(): Dec }): IntPretty {\n    if (!(target instanceof Dec)) {\n      target = target.toDec();\n    }\n\n    const pretty = new IntPretty(this.toDec().sub(target));\n    pretty._options = {\n      ...this._options,\n    };\n    return pretty;\n  }\n\n  mul(target: Dec | { toDec(): Dec }): IntPretty {\n    if (!(target instanceof Dec)) {\n      target = target.toDec();\n    }\n\n    const pretty = new IntPretty(this.toDec().mul(target));\n    pretty._options = {\n      ...this._options,\n    };\n    return pretty;\n  }\n\n  quo(target: Dec | { toDec(): Dec }): IntPretty {\n    if (!(target instanceof Dec)) {\n      target = target.toDec();\n    }\n\n    const pretty = new IntPretty(this.toDec().quo(target));\n    pretty._options = {\n      ...this._options,\n    };\n    return pretty;\n  }\n\n  toDec(): Dec {\n    if (this.floatingDecimalPointRight === 0) {\n      return this.dec;\n    } else if (this.floatingDecimalPointRight > 0) {\n      return this.dec.mulTruncate(\n        DecUtils.getTenExponentN(this.floatingDecimalPointRight)\n      );\n    } else {\n      // Since a decimal in Dec cannot exceed 18, it cannot be computed at once.\n      let i = -this.floatingDecimalPointRight;\n      let dec = this.dec;\n      while (i > 0) {\n        if (i >= Dec.precision) {\n          dec = dec.mulTruncate(DecUtils.getTenExponentN(-Dec.precision));\n          i -= Dec.precision;\n        } else {\n          dec = dec.mulTruncate(DecUtils.getTenExponentN(-(i % Dec.precision)));\n          break;\n        }\n      }\n      return dec;\n    }\n  }\n\n  toString(): string {\n    return this.toStringWithSymbols(\"\", \"\");\n  }\n\n  toStringWithSymbols(prefix: string, suffix: string): string {\n    const dec = this.toDec();\n\n    if (\n      this._options.inequalitySymbol &&\n      !dec.isZero() &&\n      dec.abs().lt(DecUtils.getTenExponentN(-this._options.maxDecimals))\n    ) {\n      const isNeg = dec.isNegative();\n\n      return `${isNeg ? \">\" : \"<\"}${this._options.inequalitySymbolSeparator}${\n        isNeg ? \"-\" : \"\"\n      }${prefix}${DecUtils.getTenExponentN(-this._options.maxDecimals).toString(\n        this._options.maxDecimals,\n        this._options.locale\n      )}${suffix}`;\n    }\n\n    let result: string;\n    if (!this._options.shrink) {\n      result = dec.toString(this._options.maxDecimals, this._options.locale);\n    } else {\n      result = CoinUtils.shrinkDecimals(\n        dec,\n        0,\n        this._options.maxDecimals,\n        this._options.locale\n      );\n    }\n    if (this._options.trim) {\n      result = DecUtils.trim(result);\n    }\n\n    const isNeg = result.charAt(0) === \"-\";\n    if (isNeg) {\n      result = result.slice(1);\n    }\n\n    return `${isNeg ? \"-\" : \"\"}${prefix}${result}${suffix}`;\n  }\n\n  clone(): IntPretty {\n    const pretty = new IntPretty(this.dec);\n    pretty.dec = this.dec;\n    pretty.floatingDecimalPointRight = this.floatingDecimalPointRight;\n    pretty._options = {\n      ...this._options,\n    };\n    return pretty;\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}