{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.encodeBech32Pubkey = exports.encodeAminoPubkey = exports.decodeBech32Pubkey = exports.decodeAminoPubkey = exports.encodeSecp256k1Pubkey = void 0;\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst utils_1 = require(\"@cosmjs/utils\");\nconst types_1 = require(\"./types\");\nfunction encodeSecp256k1Pubkey(pubkey) {\n  if (pubkey.length !== 33 || pubkey[0] !== 0x02 && pubkey[0] !== 0x03) {\n    throw new Error(\"Public key must be compressed secp256k1, i.e. 33 bytes starting with 0x02 or 0x03\");\n  }\n  return {\n    type: types_1.pubkeyType.secp256k1,\n    value: encoding_1.toBase64(pubkey)\n  };\n}\nexports.encodeSecp256k1Pubkey = encodeSecp256k1Pubkey;\n// As discussed in https://github.com/binance-chain/javascript-sdk/issues/163\n// Prefixes listed here: https://github.com/tendermint/tendermint/blob/d419fffe18531317c28c29a292ad7d253f6cafdf/docs/spec/blockchain/encoding.md#public-key-cryptography\n// Last bytes is varint-encoded length prefix\nconst pubkeyAminoPrefixSecp256k1 = encoding_1.fromHex(\"eb5ae98721\");\nconst pubkeyAminoPrefixEd25519 = encoding_1.fromHex(\"1624de6420\");\nconst pubkeyAminoPrefixSr25519 = encoding_1.fromHex(\"0dfb1005\");\nconst pubkeyAminoPrefixLength = pubkeyAminoPrefixSecp256k1.length;\n/**\n * Decodes a pubkey in the Amino binary format to a type/value object.\n */\nfunction decodeAminoPubkey(data) {\n  const aminoPrefix = data.slice(0, pubkeyAminoPrefixLength);\n  const rest = data.slice(pubkeyAminoPrefixLength);\n  if (utils_1.arrayContentEquals(aminoPrefix, pubkeyAminoPrefixSecp256k1)) {\n    if (rest.length !== 33) {\n      throw new Error(\"Invalid rest data length. Expected 33 bytes (compressed secp256k1 pubkey).\");\n    }\n    return {\n      type: types_1.pubkeyType.secp256k1,\n      value: encoding_1.toBase64(rest)\n    };\n  } else if (utils_1.arrayContentEquals(aminoPrefix, pubkeyAminoPrefixEd25519)) {\n    if (rest.length !== 32) {\n      throw new Error(\"Invalid rest data length. Expected 32 bytes (Ed25519 pubkey).\");\n    }\n    return {\n      type: types_1.pubkeyType.ed25519,\n      value: encoding_1.toBase64(rest)\n    };\n  } else if (utils_1.arrayContentEquals(aminoPrefix, pubkeyAminoPrefixSr25519)) {\n    if (rest.length !== 32) {\n      throw new Error(\"Invalid rest data length. Expected 32 bytes (Sr25519 pubkey).\");\n    }\n    return {\n      type: types_1.pubkeyType.sr25519,\n      value: encoding_1.toBase64(rest)\n    };\n  } else {\n    throw new Error(\"Unsupported Pubkey type. Amino prefix: \" + encoding_1.toHex(aminoPrefix));\n  }\n}\nexports.decodeAminoPubkey = decodeAminoPubkey;\n/**\n * Decodes a bech32 pubkey to Amino binary, which is then decoded to a type/value object.\n * The bech32 prefix is ignored and discareded.\n *\n * @param bechEncoded the bech32 encoded pubkey\n */\nfunction decodeBech32Pubkey(bechEncoded) {\n  const {\n    data\n  } = encoding_1.Bech32.decode(bechEncoded);\n  return decodeAminoPubkey(data);\n}\nexports.decodeBech32Pubkey = decodeBech32Pubkey;\n/**\n * Encodes a public key to binary Amino.\n */\nfunction encodeAminoPubkey(pubkey) {\n  let aminoPrefix;\n  switch (pubkey.type) {\n    // Note: please don't add cases here without writing additional unit tests\n    case types_1.pubkeyType.secp256k1:\n      aminoPrefix = pubkeyAminoPrefixSecp256k1;\n      break;\n    case types_1.pubkeyType.ed25519:\n      aminoPrefix = pubkeyAminoPrefixEd25519;\n      break;\n    default:\n      throw new Error(\"Unsupported pubkey type\");\n  }\n  return new Uint8Array([...aminoPrefix, ...encoding_1.fromBase64(pubkey.value)]);\n}\nexports.encodeAminoPubkey = encodeAminoPubkey;\n/**\n * Encodes a public key to binary Amino and then to bech32.\n *\n * @param pubkey the public key to encode\n * @param prefix the bech32 prefix (human readable part)\n */\nfunction encodeBech32Pubkey(pubkey, prefix) {\n  return encoding_1.Bech32.encode(prefix, encodeAminoPubkey(pubkey));\n}\nexports.encodeBech32Pubkey = encodeBech32Pubkey;","map":{"version":3,"mappings":"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","names":["encodeSecp256k1Pubkey","pubkey","length","Error","type","types_1","secp256k1","value","encoding_1","exports","pubkeyAminoPrefixSecp256k1","pubkeyAminoPrefixEd25519","pubkeyAminoPrefixSr25519","pubkeyAminoPrefixLength","decodeAminoPubkey","data","aminoPrefix","slice","rest","utils_1","ed25519","sr25519","decodeBech32Pubkey","bechEncoded","decode","encodeAminoPubkey","Uint8Array","encodeBech32Pubkey","prefix","encode"],"sources":["../src/pubkey.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}