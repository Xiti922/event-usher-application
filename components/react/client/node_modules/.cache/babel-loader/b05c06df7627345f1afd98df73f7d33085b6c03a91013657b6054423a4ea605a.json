{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DecUtils = void 0;\nconst decimal_1 = require(\"./decimal\");\nconst int_1 = require(\"./int\");\nclass DecUtils {\n  static trim(dec) {\n    let decStr = typeof dec === \"string\" ? dec : dec.toString();\n    if (decStr.indexOf(\".\") < 0) {\n      return decStr;\n    }\n    for (let i = decStr.length - 1; i >= 0; i--) {\n      if (decStr[i] === \"0\") {\n        decStr = decStr.slice(0, i);\n      } else {\n        break;\n      }\n    }\n    if (decStr.length > 0) {\n      if (decStr[decStr.length - 1] === \".\") {\n        decStr = decStr.slice(0, decStr.length - 1);\n      }\n    }\n    return decStr;\n  }\n  static getTenExponentN(n) {\n    if (n < -decimal_1.Dec.precision) {\n      // Dec can only handle up to precision 18.\n      // Anything less than 18 precision is 0, so there is a high probability of an error.\n      throw new Error(\"Too little precision\");\n    }\n    if (DecUtils.tenExponentNs[n.toString()]) {\n      return DecUtils.tenExponentNs[n.toString()];\n    }\n    const dec = new decimal_1.Dec(10).pow(new int_1.Int(n));\n    DecUtils.tenExponentNs[n.toString()] = dec;\n    return dec;\n  }\n  static getTenExponentNInPrecisionRange(n) {\n    if (n > decimal_1.Dec.precision) {\n      throw new Error(\"Too much precision\");\n    }\n    return DecUtils.getTenExponentN(n);\n  }\n  /**\n   * @deprecated Use`getTenExponentNInPrecisionRange`\n   */\n  static getPrecisionDec(precision) {\n    return DecUtils.getTenExponentNInPrecisionRange(precision);\n  }\n}\nexports.DecUtils = DecUtils;\nDecUtils.tenExponentNs = {};","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AAEA,MAAaA,QAAQ;EACZ,OAAOC,IAAI,CAACC,GAAiB;IAClC,IAAIC,MAAM,GAAG,OAAOD,GAAG,KAAK,QAAQ,GAAGA,GAAG,GAAGA,GAAG,CAACE,QAAQ,EAAE;IAE3D,IAAID,MAAM,CAACE,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;MAC3B,OAAOF,MAAM;;IAGf,KAAK,IAAIG,CAAC,GAAGH,MAAM,CAACI,MAAM,GAAG,CAAC,EAAED,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC3C,IAAIH,MAAM,CAACG,CAAC,CAAC,KAAK,GAAG,EAAE;QACrBH,MAAM,GAAGA,MAAM,CAACK,KAAK,CAAC,CAAC,EAAEF,CAAC,CAAC;OAC5B,MAAM;QACL;;;IAIJ,IAAIH,MAAM,CAACI,MAAM,GAAG,CAAC,EAAE;MACrB,IAAIJ,MAAM,CAACA,MAAM,CAACI,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,EAAE;QACrCJ,MAAM,GAAGA,MAAM,CAACK,KAAK,CAAC,CAAC,EAAEL,MAAM,CAACI,MAAM,GAAG,CAAC,CAAC;;;IAI/C,OAAOJ,MAAM;EACf;EAIO,OAAOM,eAAe,CAACC,CAAS;IACrC,IAAIA,CAAC,GAAG,CAACC,aAAG,CAACC,SAAS,EAAE;MACtB;MACA;MACA,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;;IAGzC,IAAIb,QAAQ,CAACc,aAAa,CAACJ,CAAC,CAACN,QAAQ,EAAE,CAAC,EAAE;MACxC,OAAOJ,QAAQ,CAACc,aAAa,CAACJ,CAAC,CAACN,QAAQ,EAAE,CAAC;;IAG7C,MAAMF,GAAG,GAAG,IAAIS,aAAG,CAAC,EAAE,CAAC,CAACI,GAAG,CAAC,IAAIC,SAAG,CAACN,CAAC,CAAC,CAAC;IACvCV,QAAQ,CAACc,aAAa,CAACJ,CAAC,CAACN,QAAQ,EAAE,CAAC,GAAGF,GAAG;IAE1C,OAAOA,GAAG;EACZ;EAEO,OAAOe,+BAA+B,CAACP,CAAS;IACrD,IAAIA,CAAC,GAAGC,aAAG,CAACC,SAAS,EAAE;MACrB,MAAM,IAAIC,KAAK,CAAC,oBAAoB,CAAC;;IAGvC,OAAOb,QAAQ,CAACS,eAAe,CAACC,CAAC,CAAC;EACpC;EAEA;;;EAGO,OAAOQ,eAAe,CAACN,SAAiB;IAC7C,OAAOZ,QAAQ,CAACiB,+BAA+B,CAACL,SAAS,CAAC;EAC5D;;AAzDFO;AAyBmBnB,sBAAa,GAAyB,EAAE","names":["DecUtils","trim","dec","decStr","toString","indexOf","i","length","slice","getTenExponentN","n","decimal_1","precision","Error","tenExponentNs","pow","int_1","getTenExponentNInPrecisionRange","getPrecisionDec","exports"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/@keplr-wallet/unit/src/dec-utils.ts"],"sourcesContent":["import { Dec } from \"./decimal\";\nimport { Int } from \"./int\";\n\nexport class DecUtils {\n  public static trim(dec: Dec | string): string {\n    let decStr = typeof dec === \"string\" ? dec : dec.toString();\n\n    if (decStr.indexOf(\".\") < 0) {\n      return decStr;\n    }\n\n    for (let i = decStr.length - 1; i >= 0; i--) {\n      if (decStr[i] === \"0\") {\n        decStr = decStr.slice(0, i);\n      } else {\n        break;\n      }\n    }\n\n    if (decStr.length > 0) {\n      if (decStr[decStr.length - 1] === \".\") {\n        decStr = decStr.slice(0, decStr.length - 1);\n      }\n    }\n\n    return decStr;\n  }\n\n  protected static tenExponentNs: { [n: string]: Dec } = {};\n\n  public static getTenExponentN(n: number): Dec {\n    if (n < -Dec.precision) {\n      // Dec can only handle up to precision 18.\n      // Anything less than 18 precision is 0, so there is a high probability of an error.\n      throw new Error(\"Too little precision\");\n    }\n\n    if (DecUtils.tenExponentNs[n.toString()]) {\n      return DecUtils.tenExponentNs[n.toString()];\n    }\n\n    const dec = new Dec(10).pow(new Int(n));\n    DecUtils.tenExponentNs[n.toString()] = dec;\n\n    return dec;\n  }\n\n  public static getTenExponentNInPrecisionRange(n: number): Dec {\n    if (n > Dec.precision) {\n      throw new Error(\"Too much precision\");\n    }\n\n    return DecUtils.getTenExponentN(n);\n  }\n\n  /**\n   * @deprecated Use`getTenExponentNInPrecisionRange`\n   */\n  public static getPrecisionDec(precision: number): Dec {\n    return DecUtils.getTenExponentNInPrecisionRange(precision);\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}