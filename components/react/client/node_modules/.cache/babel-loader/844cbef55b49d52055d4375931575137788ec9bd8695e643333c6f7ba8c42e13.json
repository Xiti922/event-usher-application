{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ObservableQueryDelegations = exports.ObservableQueryDelegationsInner = void 0;\nconst chain_query_1 = require(\"../../chain-query\");\nconst unit_1 = require(\"@keplr-wallet/unit\");\nconst mobx_1 = require(\"mobx\");\nconst mobx_utils_1 = require(\"mobx-utils\");\nclass ObservableQueryDelegationsInner extends chain_query_1.ObservableChainQuery {\n  constructor(kvStore, chainId, chainGetter, bech32Address) {\n    super(kvStore, chainId, chainGetter, `/cosmos/staking/v1beta1/delegations/${bech32Address}?pagination.limit=1000`);\n    this.getDelegationTo = mobx_utils_1.computedFn(validatorAddress => {\n      const delegations = this.delegations;\n      const stakeCurrency = this.chainGetter.getChain(this.chainId).stakeCurrency;\n      if (!this.response) {\n        return new unit_1.CoinPretty(stakeCurrency, new unit_1.Int(0)).ready(false);\n      }\n      for (const delegation of delegations) {\n        if (delegation.delegation.validator_address === validatorAddress) {\n          return new unit_1.CoinPretty(stakeCurrency, new unit_1.Int(delegation.balance.amount));\n        }\n      }\n      return new unit_1.CoinPretty(stakeCurrency, new unit_1.Int(0));\n    });\n    mobx_1.makeObservable(this);\n    this.bech32Address = bech32Address;\n  }\n  canFetch() {\n    // If bech32 address is empty, it will always fail, so don't need to fetch it.\n    return this.bech32Address.length > 0;\n  }\n  get total() {\n    const stakeCurrency = this.chainGetter.getChain(this.chainId).stakeCurrency;\n    if (!this.response) {\n      return new unit_1.CoinPretty(stakeCurrency, new unit_1.Int(0)).ready(false);\n    }\n    let totalBalance = new unit_1.Int(0);\n    for (const delegation of this.response.data.delegation_responses) {\n      totalBalance = totalBalance.add(new unit_1.Int(delegation.balance.amount));\n    }\n    return new unit_1.CoinPretty(stakeCurrency, totalBalance);\n  }\n  get delegationBalances() {\n    if (!this.response) {\n      return [];\n    }\n    const stakeCurrency = this.chainGetter.getChain(this.chainId).stakeCurrency;\n    const result = [];\n    for (const delegation of this.response.data.delegation_responses) {\n      result.push({\n        validatorAddress: delegation.delegation.validator_address,\n        balance: new unit_1.CoinPretty(stakeCurrency, new unit_1.Int(delegation.balance.amount))\n      });\n    }\n    return result;\n  }\n  get delegations() {\n    if (!this.response) {\n      return [];\n    }\n    return this.response.data.delegation_responses;\n  }\n}\n__decorate([mobx_1.computed], ObservableQueryDelegationsInner.prototype, \"total\", null);\n__decorate([mobx_1.computed], ObservableQueryDelegationsInner.prototype, \"delegationBalances\", null);\n__decorate([mobx_1.computed], ObservableQueryDelegationsInner.prototype, \"delegations\", null);\nexports.ObservableQueryDelegationsInner = ObservableQueryDelegationsInner;\nclass ObservableQueryDelegations extends chain_query_1.ObservableChainQueryMap {\n  constructor(kvStore, chainId, chainGetter) {\n    super(kvStore, chainId, chainGetter, bech32Address => {\n      return new ObservableQueryDelegationsInner(this.kvStore, this.chainId, this.chainGetter, bech32Address);\n    });\n    this.kvStore = kvStore;\n    this.chainId = chainId;\n    this.chainGetter = chainGetter;\n  }\n  getQueryBech32Address(bech32Address) {\n    return this.get(bech32Address);\n  }\n}\nexports.ObservableQueryDelegations = ObservableQueryDelegations;","map":{"version":3,"mappings":"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","names":["ObservableQueryDelegationsInner","chain_query_1","constructor","kvStore","chainId","chainGetter","bech32Address","mobx_utils_1","validatorAddress","delegations","stakeCurrency","getChain","response","unit_1","ready","delegation","validator_address","balance","amount","mobx_1","canFetch","length","total","totalBalance","data","delegation_responses","add","delegationBalances","result","push","__decorate","exports","ObservableQueryDelegations","getQueryBech32Address","get"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/@keplr-wallet/stores/src/query/cosmos/staking/delegations.ts"],"sourcesContent":["import {\n  ObservableChainQuery,\n  ObservableChainQueryMap,\n} from \"../../chain-query\";\nimport { Delegation, Delegations } from \"./types\";\nimport { KVStore } from \"@keplr-wallet/common\";\nimport { ChainGetter } from \"../../../common\";\nimport { CoinPretty, Int } from \"@keplr-wallet/unit\";\nimport { computed, makeObservable } from \"mobx\";\nimport { computedFn } from \"mobx-utils\";\n\nexport class ObservableQueryDelegationsInner extends ObservableChainQuery<Delegations> {\n  protected bech32Address: string;\n\n  constructor(\n    kvStore: KVStore,\n    chainId: string,\n    chainGetter: ChainGetter,\n    bech32Address: string\n  ) {\n    super(\n      kvStore,\n      chainId,\n      chainGetter,\n      `/cosmos/staking/v1beta1/delegations/${bech32Address}?pagination.limit=1000`\n    );\n    makeObservable(this);\n\n    this.bech32Address = bech32Address;\n  }\n\n  protected canFetch(): boolean {\n    // If bech32 address is empty, it will always fail, so don't need to fetch it.\n    return this.bech32Address.length > 0;\n  }\n\n  @computed\n  get total(): CoinPretty {\n    const stakeCurrency = this.chainGetter.getChain(this.chainId).stakeCurrency;\n\n    if (!this.response) {\n      return new CoinPretty(stakeCurrency, new Int(0)).ready(false);\n    }\n\n    let totalBalance = new Int(0);\n    for (const delegation of this.response.data.delegation_responses) {\n      totalBalance = totalBalance.add(new Int(delegation.balance.amount));\n    }\n\n    return new CoinPretty(stakeCurrency, totalBalance);\n  }\n\n  @computed\n  get delegationBalances(): {\n    validatorAddress: string;\n    balance: CoinPretty;\n  }[] {\n    if (!this.response) {\n      return [];\n    }\n\n    const stakeCurrency = this.chainGetter.getChain(this.chainId).stakeCurrency;\n\n    const result = [];\n\n    for (const delegation of this.response.data.delegation_responses) {\n      result.push({\n        validatorAddress: delegation.delegation.validator_address,\n        balance: new CoinPretty(\n          stakeCurrency,\n          new Int(delegation.balance.amount)\n        ),\n      });\n    }\n\n    return result;\n  }\n\n  @computed\n  get delegations(): Delegation[] {\n    if (!this.response) {\n      return [];\n    }\n\n    return this.response.data.delegation_responses;\n  }\n\n  readonly getDelegationTo = computedFn(\n    (validatorAddress: string): CoinPretty => {\n      const delegations = this.delegations;\n\n      const stakeCurrency = this.chainGetter.getChain(this.chainId)\n        .stakeCurrency;\n\n      if (!this.response) {\n        return new CoinPretty(stakeCurrency, new Int(0)).ready(false);\n      }\n\n      for (const delegation of delegations) {\n        if (delegation.delegation.validator_address === validatorAddress) {\n          return new CoinPretty(\n            stakeCurrency,\n            new Int(delegation.balance.amount)\n          );\n        }\n      }\n\n      return new CoinPretty(stakeCurrency, new Int(0));\n    }\n  );\n}\n\nexport class ObservableQueryDelegations extends ObservableChainQueryMap<Delegations> {\n  constructor(\n    protected readonly kvStore: KVStore,\n    protected readonly chainId: string,\n    protected readonly chainGetter: ChainGetter\n  ) {\n    super(kvStore, chainId, chainGetter, (bech32Address: string) => {\n      return new ObservableQueryDelegationsInner(\n        this.kvStore,\n        this.chainId,\n        this.chainGetter,\n        bech32Address\n      );\n    });\n  }\n\n  getQueryBech32Address(\n    bech32Address: string\n  ): ObservableQueryDelegationsInner {\n    return this.get(bech32Address) as ObservableQueryDelegationsInner;\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}