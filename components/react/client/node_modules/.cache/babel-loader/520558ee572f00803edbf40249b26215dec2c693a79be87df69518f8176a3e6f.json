{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getHandler = void 0;\nconst router_1 = require(\"@keplr-wallet/router\");\nconst messages_1 = require(\"./messages\");\nconst getHandler = service => {\n  return (env, msg) => {\n    switch (msg.constructor) {\n      case messages_1.TryUpdateChainMsg:\n        return handleTryUpdateChainMsg(service)(env, msg);\n      case messages_1.SetChainEndpointsMsg:\n        return handleSetChainEndpointsMsg(service)(env, msg);\n      case messages_1.ResetChainEndpointsMsg:\n        return handleResetChainEndpointsMsg(service)(env, msg);\n      default:\n        throw new router_1.KeplrError(\"updater\", 110, \"Unknown msg type\");\n    }\n  };\n};\nexports.getHandler = getHandler;\nconst handleTryUpdateChainMsg = service => {\n  return (_, msg) => __awaiter(void 0, void 0, void 0, function* () {\n    yield service.tryUpdateChain(msg.chainId);\n  });\n};\nconst handleSetChainEndpointsMsg = service => {\n  return (_, msg) => __awaiter(void 0, void 0, void 0, function* () {\n    return yield service.setChainEndpoints(msg.chainId, msg.rpc, msg.rest);\n  });\n};\nconst handleResetChainEndpointsMsg = service => {\n  return (_, msg) => __awaiter(void 0, void 0, void 0, function* () {\n    return yield service.resetChainEndpoints(msg.chainId);\n  });\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAQA;AAMO,MAAMA,UAAU,GACrBC,OAAO,IACL;EACF,OAAO,CAACC,GAAQ,EAAEC,GAAqB,KAAI;IACzC,QAAQA,GAAG,CAACC,WAAW;MACrB,KAAKC,4BAAiB;QACpB,OAAOC,uBAAuB,CAACL,OAAO,CAAC,CAACC,GAAG,EAAEC,GAAwB,CAAC;MACxE,KAAKE,+BAAoB;QACvB,OAAOE,0BAA0B,CAACN,OAAO,CAAC,CACxCC,GAAG,EACHC,GAA2B,CAC5B;MACH,KAAKE,iCAAsB;QACzB,OAAOG,4BAA4B,CAACP,OAAO,CAAC,CAC1CC,GAAG,EACHC,GAA6B,CAC9B;MACH;QACE,MAAM,IAAIM,mBAAU,CAAC,SAAS,EAAE,GAAG,EAAE,kBAAkB,CAAC;IAAC;EAE/D,CAAC;AACH,CAAC;AArBYC,kBAAU;AAuBvB,MAAMJ,uBAAuB,GAEcL,OAAO,IAAI;EACpD,OAAO,CAAOU,CAAC,EAAER,GAAG,KAAIS;IACtB,MAAMX,OAAO,CAACY,cAAc,CAACV,GAAG,CAACW,OAAO,CAAC;EAC3C,CAAC;AACH,CAAC;AAED,MAAMP,0BAA0B,GAEcN,OAAO,IAAI;EACvD,OAAO,CAAOU,CAAC,EAAER,GAAG,KAAIS;IACtB,OAAO,MAAMX,OAAO,CAACc,iBAAiB,CAACZ,GAAG,CAACW,OAAO,EAAEX,GAAG,CAACa,GAAG,EAAEb,GAAG,CAACc,IAAI,CAAC;EACxE,CAAC;AACH,CAAC;AAED,MAAMT,4BAA4B,GAEcP,OAAO,IAAI;EACzD,OAAO,CAAOU,CAAC,EAAER,GAAG,KAAIS;IACtB,OAAO,MAAMX,OAAO,CAACiB,mBAAmB,CAACf,GAAG,CAACW,OAAO,CAAC;EACvD,CAAC;AACH,CAAC","names":["getHandler","service","env","msg","constructor","messages_1","handleTryUpdateChainMsg","handleSetChainEndpointsMsg","handleResetChainEndpointsMsg","router_1","exports","_","__awaiter","tryUpdateChain","chainId","setChainEndpoints","rpc","rest","resetChainEndpoints"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/@keplr-wallet/background/src/updater/handler.ts"],"sourcesContent":["import {\n  Env,\n  Handler,\n  InternalHandler,\n  KeplrError,\n  Message,\n} from \"@keplr-wallet/router\";\nimport { ChainUpdaterService } from \"./service\";\nimport {\n  ResetChainEndpointsMsg,\n  SetChainEndpointsMsg,\n  TryUpdateChainMsg,\n} from \"./messages\";\n\nexport const getHandler: (service: ChainUpdaterService) => Handler = (\n  service\n) => {\n  return (env: Env, msg: Message<unknown>) => {\n    switch (msg.constructor) {\n      case TryUpdateChainMsg:\n        return handleTryUpdateChainMsg(service)(env, msg as TryUpdateChainMsg);\n      case SetChainEndpointsMsg:\n        return handleSetChainEndpointsMsg(service)(\n          env,\n          msg as SetChainEndpointsMsg\n        );\n      case ResetChainEndpointsMsg:\n        return handleResetChainEndpointsMsg(service)(\n          env,\n          msg as ResetChainEndpointsMsg\n        );\n      default:\n        throw new KeplrError(\"updater\", 110, \"Unknown msg type\");\n    }\n  };\n};\n\nconst handleTryUpdateChainMsg: (\n  service: ChainUpdaterService\n) => InternalHandler<TryUpdateChainMsg> = (service) => {\n  return async (_, msg) => {\n    await service.tryUpdateChain(msg.chainId);\n  };\n};\n\nconst handleSetChainEndpointsMsg: (\n  service: ChainUpdaterService\n) => InternalHandler<SetChainEndpointsMsg> = (service) => {\n  return async (_, msg) => {\n    return await service.setChainEndpoints(msg.chainId, msg.rpc, msg.rest);\n  };\n};\n\nconst handleResetChainEndpointsMsg: (\n  service: ChainUpdaterService\n) => InternalHandler<ResetChainEndpointsMsg> = (service) => {\n  return async (_, msg) => {\n    return await service.resetChainEndpoints(msg.chainId);\n  };\n};\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}