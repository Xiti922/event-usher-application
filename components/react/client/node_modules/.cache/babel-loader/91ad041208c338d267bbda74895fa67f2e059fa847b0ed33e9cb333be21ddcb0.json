{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.exponentDecStringToDecString = exports.isExponentDecString = exports.isValidDecimalString = exports.isValidIntegerString = void 0;\nconst regexIntString = /^-?\\d+$/;\nconst regexDecString = /^-?\\d+.?\\d*$/;\nconst regexExponentDecString = /^(-?)([\\d.]+)e([-+])([\\d]+)$/;\nfunction isValidIntegerString(str) {\n  return regexIntString.test(str);\n}\nexports.isValidIntegerString = isValidIntegerString;\nfunction isValidDecimalString(str) {\n  return regexDecString.test(str);\n}\nexports.isValidDecimalString = isValidDecimalString;\nfunction isExponentDecString(str) {\n  return regexExponentDecString.test(str);\n}\nexports.isExponentDecString = isExponentDecString;\nfunction makeZerosStr(len) {\n  let r = \"\";\n  for (let i = 0; i < len; i++) {\n    r += \"0\";\n  }\n  return r;\n}\nfunction removeHeadZeros(str) {\n  while (str.length > 0 && str[0] === \"0\") {\n    str = str.slice(1);\n  }\n  if (str.length === 0 || str[0] === \".\") {\n    return \"0\" + str;\n  }\n  return str;\n}\nfunction exponentDecStringToDecString(str) {\n  const split = str.split(regexExponentDecString);\n  if (split.length !== 6) {\n    return str;\n  }\n  const isNeg = split[1] === \"-\";\n  let numStr = split[2];\n  const numStrFractionIndex = numStr.indexOf(\".\");\n  const exponentStr = split[4];\n  let exponent = parseInt(exponentStr) * (split[3] === \"-\" ? -1 : 1);\n  if (numStrFractionIndex >= 0) {\n    const fractionLen = numStr.length - numStrFractionIndex - 1;\n    exponent = exponent - fractionLen;\n    numStr = removeHeadZeros(numStr.replace(\".\", \"\"));\n  }\n  const prefix = isNeg ? \"-\" : \"\";\n  if (exponent < 0) {\n    if (numStr.length > -exponent) {\n      const fractionPosition = numStr.length + exponent;\n      return prefix + (numStr.slice(0, fractionPosition) + \".\" + numStr.slice(fractionPosition));\n    }\n    return prefix + \"0.\" + makeZerosStr(-(numStr.length + exponent)) + numStr;\n  } else {\n    return prefix + numStr + makeZerosStr(exponent);\n  }\n}\nexports.exponentDecStringToDecString = exponentDecStringToDecString;","map":{"version":3,"mappings":";;;;;;AAAA,MAAMA,cAAc,GAAG,SAAS;AAChC,MAAMC,cAAc,GAAG,cAAc;AACrC,MAAMC,sBAAsB,GAAG,8BAA8B;AAE7D,SAAgBC,oBAAoB,CAACC,GAAW;EAC9C,OAAOJ,cAAc,CAACK,IAAI,CAACD,GAAG,CAAC;AACjC;AAFAE;AAIA,SAAgBC,oBAAoB,CAACH,GAAW;EAC9C,OAAOH,cAAc,CAACI,IAAI,CAACD,GAAG,CAAC;AACjC;AAFAE;AAIA,SAAgBE,mBAAmB,CAACJ,GAAW;EAC7C,OAAOF,sBAAsB,CAACG,IAAI,CAACD,GAAG,CAAC;AACzC;AAFAE;AAIA,SAASG,YAAY,CAACC,GAAW;EAC/B,IAAIC,CAAC,GAAG,EAAE;EACV,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,GAAG,EAAEE,CAAC,EAAE,EAAE;IAC5BD,CAAC,IAAI,GAAG;;EAEV,OAAOA,CAAC;AACV;AAEA,SAASE,eAAe,CAACT,GAAW;EAClC,OAAOA,GAAG,CAACU,MAAM,GAAG,CAAC,IAAIV,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IACvCA,GAAG,GAAGA,GAAG,CAACW,KAAK,CAAC,CAAC,CAAC;;EAEpB,IAAIX,GAAG,CAACU,MAAM,KAAK,CAAC,IAAIV,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IACtC,OAAO,GAAG,GAAGA,GAAG;;EAElB,OAAOA,GAAG;AACZ;AAEA,SAAgBY,4BAA4B,CAACZ,GAAW;EACtD,MAAMa,KAAK,GAAGb,GAAG,CAACa,KAAK,CAACf,sBAAsB,CAAC;EAC/C,IAAIe,KAAK,CAACH,MAAM,KAAK,CAAC,EAAE;IACtB,OAAOV,GAAG;;EAGZ,MAAMc,KAAK,GAAGD,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG;EAC9B,IAAIE,MAAM,GAAGF,KAAK,CAAC,CAAC,CAAC;EACrB,MAAMG,mBAAmB,GAAGD,MAAM,CAACE,OAAO,CAAC,GAAG,CAAC;EAE/C,MAAMC,WAAW,GAAGL,KAAK,CAAC,CAAC,CAAC;EAC5B,IAAIM,QAAQ,GAAGC,QAAQ,CAACF,WAAW,CAAC,IAAIL,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;EAElE,IAAIG,mBAAmB,IAAI,CAAC,EAAE;IAC5B,MAAMK,WAAW,GAAGN,MAAM,CAACL,MAAM,GAAGM,mBAAmB,GAAG,CAAC;IAC3DG,QAAQ,GAAGA,QAAQ,GAAGE,WAAW;IAEjCN,MAAM,GAAGN,eAAe,CAACM,MAAM,CAACO,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;;EAGnD,MAAMC,MAAM,GAAGT,KAAK,GAAG,GAAG,GAAG,EAAE;EAE/B,IAAIK,QAAQ,GAAG,CAAC,EAAE;IAChB,IAAIJ,MAAM,CAACL,MAAM,GAAG,CAACS,QAAQ,EAAE;MAC7B,MAAMK,gBAAgB,GAAGT,MAAM,CAACL,MAAM,GAAGS,QAAQ;MAEjD,OACEI,MAAM,IACLR,MAAM,CAACJ,KAAK,CAAC,CAAC,EAAEa,gBAAgB,CAAC,GAChC,GAAG,GACHT,MAAM,CAACJ,KAAK,CAACa,gBAAgB,CAAC,CAAC;;IAIrC,OAAOD,MAAM,GAAG,IAAI,GAAGlB,YAAY,CAAC,EAAEU,MAAM,CAACL,MAAM,GAAGS,QAAQ,CAAC,CAAC,GAAGJ,MAAM;GAC1E,MAAM;IACL,OAAOQ,MAAM,GAAGR,MAAM,GAAGV,YAAY,CAACc,QAAQ,CAAC;;AAEnD;AAtCAjB","names":["regexIntString","regexDecString","regexExponentDecString","isValidIntegerString","str","test","exports","isValidDecimalString","isExponentDecString","makeZerosStr","len","r","i","removeHeadZeros","length","slice","exponentDecStringToDecString","split","isNeg","numStr","numStrFractionIndex","indexOf","exponentStr","exponent","parseInt","fractionLen","replace","prefix","fractionPosition"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/@keplr-wallet/stores/node_modules/@keplr-wallet/unit/src/etc.ts"],"sourcesContent":["const regexIntString = /^-?\\d+$/;\nconst regexDecString = /^-?\\d+.?\\d*$/;\nconst regexExponentDecString = /^(-?)([\\d.]+)e([-+])([\\d]+)$/;\n\nexport function isValidIntegerString(str: string): boolean {\n  return regexIntString.test(str);\n}\n\nexport function isValidDecimalString(str: string): boolean {\n  return regexDecString.test(str);\n}\n\nexport function isExponentDecString(str: string): boolean {\n  return regexExponentDecString.test(str);\n}\n\nfunction makeZerosStr(len: number): string {\n  let r = \"\";\n  for (let i = 0; i < len; i++) {\n    r += \"0\";\n  }\n  return r;\n}\n\nfunction removeHeadZeros(str: string): string {\n  while (str.length > 0 && str[0] === \"0\") {\n    str = str.slice(1);\n  }\n  if (str.length === 0 || str[0] === \".\") {\n    return \"0\" + str;\n  }\n  return str;\n}\n\nexport function exponentDecStringToDecString(str: string): string {\n  const split = str.split(regexExponentDecString);\n  if (split.length !== 6) {\n    return str;\n  }\n\n  const isNeg = split[1] === \"-\";\n  let numStr = split[2];\n  const numStrFractionIndex = numStr.indexOf(\".\");\n\n  const exponentStr = split[4];\n  let exponent = parseInt(exponentStr) * (split[3] === \"-\" ? -1 : 1);\n\n  if (numStrFractionIndex >= 0) {\n    const fractionLen = numStr.length - numStrFractionIndex - 1;\n    exponent = exponent - fractionLen;\n\n    numStr = removeHeadZeros(numStr.replace(\".\", \"\"));\n  }\n\n  const prefix = isNeg ? \"-\" : \"\";\n\n  if (exponent < 0) {\n    if (numStr.length > -exponent) {\n      const fractionPosition = numStr.length + exponent;\n\n      return (\n        prefix +\n        (numStr.slice(0, fractionPosition) +\n          \".\" +\n          numStr.slice(fractionPosition))\n      );\n    }\n\n    return prefix + \"0.\" + makeZerosStr(-(numStr.length + exponent)) + numStr;\n  } else {\n    return prefix + numStr + makeZerosStr(exponent);\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}