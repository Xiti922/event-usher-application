{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getConnectedWalletInfo = void 0;\nconst tslib_1 = require(\"tslib\");\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst types_1 = require(\"../types\");\nconst getConnectedWalletInfo = (wallet, client, chainInfo, signingCosmWasmClientOptions, signingStargateClientOptions) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {\n  // Only Keplr browser extension supports suggesting chain.\n  // Not WalletConnect nor embedded Keplr Mobile web.\n  if (wallet.type === types_1.WalletType.Keplr && client.mode !== \"mobile-web\") {\n    yield client.experimentalSuggestChain(chainInfo);\n  }\n  yield client.enable(chainInfo.chainId);\n  // Parallelize for efficiency.\n  const [{\n    name,\n    bech32Address: address,\n    pubKey\n  }, offlineSigner] = yield Promise.all([\n  // Get name, address, and public key.\n  client.getKey(chainInfo.chainId),\n  // Get offline signer.\n  wallet.getOfflineSignerFunction(client)(chainInfo.chainId)]);\n  const [signingCosmWasmClient, signingStargateClient] = yield Promise.all([\n  // Get CosmWasm client.\n  yield (yield Promise.resolve().then(() => tslib_1.__importStar(require(\"@cosmjs/cosmwasm-stargate\")))).SigningCosmWasmClient.connectWithSigner(chainInfo.rpc, offlineSigner, signingCosmWasmClientOptions),\n  // Get Stargate client.\n  yield (yield Promise.resolve().then(() => tslib_1.__importStar(require(\"@cosmjs/stargate\")))).SigningStargateClient.connectWithSigner(chainInfo.rpc, offlineSigner, signingStargateClientOptions)]);\n  if (address === undefined) {\n    throw new Error(\"Failed to retrieve wallet address.\");\n  }\n  return {\n    wallet,\n    walletClient: client,\n    chainInfo,\n    offlineSigner,\n    name,\n    address,\n    publicKey: {\n      data: pubKey,\n      hex: (0, encoding_1.toHex)(pubKey)\n    },\n    signingCosmWasmClient,\n    signingStargateClient\n  };\n});\nexports.getConnectedWalletInfo = getConnectedWalletInfo;","map":{"version":3,"mappings":";;;;;;;AACA;AAIA;AAEO,MAAMA,sBAAsB,GAAG,CACpCC,MAAc,EACdC,MAAoB,EACpBC,SAAoB,EACpBC,4BAA2D,EAC3DC,4BAA2D,KAC/BC;EAC5B;EACA;EACA,IAAIL,MAAM,CAACM,IAAI,KAAKC,kBAAU,CAACC,KAAK,IAAIP,MAAM,CAACQ,IAAI,KAAK,YAAY,EAAE;IACpE,MAAMR,MAAM,CAACS,wBAAwB,CAACR,SAAS,CAAC;;EAGlD,MAAMD,MAAM,CAACU,MAAM,CAACT,SAAS,CAACU,OAAO,CAAC;EAEtC;EACA,MAAM,CAAC;IAAEC,IAAI;IAAEC,aAAa,EAAEC,OAAO;IAAEC;EAAM,CAAE,EAAEC,aAAa,CAAC,GAC7D,MAAMC,OAAO,CAACC,GAAG,CAAC;EAChB;EACAlB,MAAM,CAACmB,MAAM,CAAClB,SAAS,CAACU,OAAO,CAAC;EAChC;EACAZ,MAAM,CAACqB,wBAAwB,CAACpB,MAAM,CAAC,CAACC,SAAS,CAACU,OAAO,CAAC,CAC3D,CAAC;EAEJ,MAAM,CAACU,qBAAqB,EAAEC,qBAAqB,CAAC,GAAG,MAAML,OAAO,CAACC,GAAG,CAAC;EACvE;EACA,MAAM,CACJ,gEAAa,2BAA2B,GAAC,EACzCK,qBAAqB,CAACC,iBAAiB,CACvCvB,SAAS,CAACwB,GAAG,EACbT,aAAa,EACbd,4BAA4B,CAC7B;EACD;EACA,MAAM,CACJ,gEAAa,kBAAkB,GAAC,EAChCwB,qBAAqB,CAACF,iBAAiB,CACvCvB,SAAS,CAACwB,GAAG,EACbT,aAAa,EACbb,4BAA4B,CAC7B,CACF,CAAC;EAEF,IAAIW,OAAO,KAAKa,SAAS,EAAE;IACzB,MAAM,IAAIC,KAAK,CAAC,oCAAoC,CAAC;;EAGvD,OAAO;IACL7B,MAAM;IACN8B,YAAY,EAAE7B,MAAM;IACpBC,SAAS;IACTe,aAAa;IACbJ,IAAI;IACJE,OAAO;IACPgB,SAAS,EAAE;MACTC,IAAI,EAAEhB,MAAM;MACZiB,GAAG,EAAE,oBAAK,EAACjB,MAAM;KAClB;IACDM,qBAAqB;IACrBC;GACD;AACH,CAAC;AA7DYW,8BAAsB","names":["getConnectedWalletInfo","wallet","client","chainInfo","signingCosmWasmClientOptions","signingStargateClientOptions","tslib_1","type","types_1","Keplr","mode","experimentalSuggestChain","enable","chainId","name","bech32Address","address","pubKey","offlineSigner","Promise","all","getKey","getOfflineSignerFunction","signingCosmWasmClient","signingStargateClient","SigningCosmWasmClient","connectWithSigner","rpc","SigningStargateClient","undefined","Error","walletClient","publicKey","data","hex","exports"],"sources":["../../src/utils/getConnectedWalletInfo.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}