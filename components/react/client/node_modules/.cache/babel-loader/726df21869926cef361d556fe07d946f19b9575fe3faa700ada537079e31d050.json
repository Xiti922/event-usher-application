{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setupBankExtension = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nconst utils_1 = require(\"@cosmjs/utils\");\nconst query_1 = require(\"cosmjs-types/cosmos/bank/v1beta1/query\");\nconst queryclient_1 = require(\"../../queryclient\");\nfunction setupBankExtension(base) {\n  const rpc = (0, queryclient_1.createProtobufRpcClient)(base);\n  // Use this service to get easy typed access to query methods\n  // This cannot be used for proof verification\n  const queryService = new query_1.QueryClientImpl(rpc);\n  return {\n    bank: {\n      balance: async (address, denom) => {\n        const {\n          balance\n        } = await queryService.Balance({\n          address: address,\n          denom: denom\n        });\n        (0, utils_1.assert)(balance);\n        return balance;\n      },\n      allBalances: async address => {\n        const {\n          balances\n        } = await queryService.AllBalances({\n          address: address\n        });\n        return balances;\n      },\n      totalSupply: async paginationKey => {\n        const response = await queryService.TotalSupply({\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        });\n        return response;\n      },\n      supplyOf: async denom => {\n        const {\n          amount\n        } = await queryService.SupplyOf({\n          denom: denom\n        });\n        (0, utils_1.assert)(amount);\n        return amount;\n      },\n      denomMetadata: async denom => {\n        const {\n          metadata\n        } = await queryService.DenomMetadata({\n          denom\n        });\n        (0, utils_1.assert)(metadata);\n        return metadata;\n      },\n      denomsMetadata: async () => {\n        const {\n          metadatas\n        } = await queryService.DenomsMetadata({\n          pagination: undefined // Not implemented\n        });\n\n        return metadatas;\n      }\n    }\n  };\n}\nexports.setupBankExtension = setupBankExtension;","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AAEA;AAGA;AAaA,SAAgBA,kBAAkB,CAACC,IAAiB;EAClD,MAAMC,GAAG,GAAG,yCAAuB,EAACD,IAAI,CAAC;EACzC;EACA;EACA,MAAME,YAAY,GAAG,IAAIC,uBAAe,CAACF,GAAG,CAAC;EAE7C,OAAO;IACLG,IAAI,EAAE;MACJC,OAAO,EAAE,OAAOC,OAAe,EAAEC,KAAa,KAAI;QAChD,MAAM;UAAEF;QAAO,CAAE,GAAG,MAAMH,YAAY,CAACM,OAAO,CAAC;UAAEF,OAAO,EAAEA,OAAO;UAAEC,KAAK,EAAEA;QAAK,CAAE,CAAC;QAClF,kBAAM,EAACF,OAAO,CAAC;QACf,OAAOA,OAAO;MAChB,CAAC;MACDI,WAAW,EAAE,MAAOH,OAAe,IAAI;QACrC,MAAM;UAAEI;QAAQ,CAAE,GAAG,MAAMR,YAAY,CAACS,WAAW,CAAC;UAAEL,OAAO,EAAEA;QAAO,CAAE,CAAC;QACzE,OAAOI,QAAQ;MACjB,CAAC;MACDE,WAAW,EAAE,MAAOC,aAA0B,IAAI;QAChD,MAAMC,QAAQ,GAAG,MAAMZ,YAAY,CAACa,WAAW,CAAC;UAC9CC,UAAU,EAAE,kCAAgB,EAACH,aAAa;SAC3C,CAAC;QACF,OAAOC,QAAQ;MACjB,CAAC;MACDG,QAAQ,EAAE,MAAOV,KAAa,IAAI;QAChC,MAAM;UAAEW;QAAM,CAAE,GAAG,MAAMhB,YAAY,CAACiB,QAAQ,CAAC;UAAEZ,KAAK,EAAEA;QAAK,CAAE,CAAC;QAChE,kBAAM,EAACW,MAAM,CAAC;QACd,OAAOA,MAAM;MACf,CAAC;MACDE,aAAa,EAAE,MAAOb,KAAa,IAAI;QACrC,MAAM;UAAEc;QAAQ,CAAE,GAAG,MAAMnB,YAAY,CAACoB,aAAa,CAAC;UAAEf;QAAK,CAAE,CAAC;QAChE,kBAAM,EAACc,QAAQ,CAAC;QAChB,OAAOA,QAAQ;MACjB,CAAC;MACDE,cAAc,EAAE,YAAW;QACzB,MAAM;UAAEC;QAAS,CAAE,GAAG,MAAMtB,YAAY,CAACuB,cAAc,CAAC;UACtDT,UAAU,EAAEU,SAAS,CAAE;SACxB,CAAC;;QACF,OAAOF,SAAS;MAClB;;GAEH;AACH;AAzCAG","names":["setupBankExtension","base","rpc","queryService","query_1","bank","balance","address","denom","Balance","allBalances","balances","AllBalances","totalSupply","paginationKey","response","TotalSupply","pagination","supplyOf","amount","SupplyOf","denomMetadata","metadata","DenomMetadata","denomsMetadata","metadatas","DenomsMetadata","undefined","exports"],"sources":["../../../src/modules/bank/queries.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}