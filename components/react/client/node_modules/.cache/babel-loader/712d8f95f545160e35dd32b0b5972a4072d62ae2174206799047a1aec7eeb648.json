{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getHandler = void 0;\nconst messages_1 = require(\"./messages\");\nconst getHandler = service => {\n  return (env, msg) => {\n    switch (msg.constructor) {\n      case messages_1.CheckURLIsPhishingMsg:\n        return handleCheckURLIsPhishingMsg(service)(env, msg);\n      default:\n        throw new Error(\"Unknown msg type\");\n    }\n  };\n};\nexports.getHandler = getHandler;\nconst handleCheckURLIsPhishingMsg = service => (_, msg) => {\n  return service.checkURLIsPhishing(msg.origin);\n};","map":{"version":3,"mappings":";;;;;;AAEA;AAEO,MAAMA,UAAU,GACrBC,OAA4B,IAC1B;EACF,OAAO,CAACC,GAAQ,EAAEC,GAAqB,KAAI;IACzC,QAAQA,GAAG,CAACC,WAAW;MACrB,KAAKC,gCAAqB;QACxB,OAAOC,2BAA2B,CAACL,OAAO,CAAC,CACzCC,GAAG,EACHC,GAA4B,CAC7B;MACH;QACE,MAAM,IAAII,KAAK,CAAC,kBAAkB,CAAC;IAAC;EAE1C,CAAC;AACH,CAAC;AAdYC,kBAAU;AAgBvB,MAAMF,2BAA2B,GAG/BL,OAA4B,IACzB,CAACQ,CAAC,EAAEN,GAAG,KAAI;EACd,OAAOF,OAAO,CAACS,kBAAkB,CAACP,GAAG,CAACQ,MAAM,CAAC;AAC/C,CAAC","names":["getHandler","service","env","msg","constructor","messages_1","handleCheckURLIsPhishingMsg","Error","exports","_","checkURLIsPhishing","origin"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/@keplr-wallet/background/src/phishing-list/handler.ts"],"sourcesContent":["import { Env, Handler, InternalHandler, Message } from \"@keplr-wallet/router\";\nimport { PhishingListService } from \"./service\";\nimport { CheckURLIsPhishingMsg } from \"./messages\";\n\nexport const getHandler: (service: PhishingListService) => Handler = (\n  service: PhishingListService\n) => {\n  return (env: Env, msg: Message<unknown>) => {\n    switch (msg.constructor) {\n      case CheckURLIsPhishingMsg:\n        return handleCheckURLIsPhishingMsg(service)(\n          env,\n          msg as CheckURLIsPhishingMsg\n        );\n      default:\n        throw new Error(\"Unknown msg type\");\n    }\n  };\n};\n\nconst handleCheckURLIsPhishingMsg: (\n  service: PhishingListService\n) => InternalHandler<CheckURLIsPhishingMsg> = (\n  service: PhishingListService\n) => (_, msg) => {\n  return service.checkURLIsPhishing(msg.origin);\n};\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}