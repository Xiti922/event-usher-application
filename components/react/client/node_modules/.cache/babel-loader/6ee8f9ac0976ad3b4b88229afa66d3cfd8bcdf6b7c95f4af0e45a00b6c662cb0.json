{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst crypto_1 = require(\"@iov/crypto\");\nconst encoding_1 = require(\"@iov/encoding\");\nconst pako_1 = __importDefault(require(\"pako\"));\nconst builder_1 = require(\"./builder\");\nconst cosmwasmclient_1 = require(\"./cosmwasmclient\");\nconst encoding_2 = require(\"./encoding\");\nconst logs_1 = require(\"./logs\");\nconst restclient_1 = require(\"./restclient\");\nconst v1_4_protos_1 = require(\"./v1.4_protos\");\nfunction singleAmount(amount, denom) {\n  return [{\n    amount: amount.toString(),\n    denom: denom\n  }];\n}\nfunction prepareBuilder(buider) {\n  if (buider === undefined) {\n    return undefined; // normalization needed by backend\n  } else {\n    if (!builder_1.isValidBuilder(buider)) throw new Error(\"The builder (Docker Hub image with tag) is not valid\");\n    return buider;\n  }\n}\nconst defaultFees = {\n  upload: {\n    amount: singleAmount(250000, \"uscrt\"),\n    gas: String(1000000)\n  },\n  init: {\n    amount: singleAmount(125000, \"uscrt\"),\n    gas: String(500000)\n  },\n  exec: {\n    amount: singleAmount(50000, \"uscrt\"),\n    gas: String(200000)\n  },\n  send: {\n    amount: singleAmount(20000, \"uscrt\"),\n    gas: String(80000)\n  }\n};\nclass SigningCosmWasmClient extends cosmwasmclient_1.CosmWasmClient {\n  /**\n   * Creates a new client with signing capability to interact with a CosmWasm blockchain. This is the bigger brother of CosmWasmClient.\n   *\n   * This instance does a lot of caching. In order to benefit from that you should try to use one instance\n   * for the lifetime of your application. When switching backends, a new instance must be created.\n   *\n   * @param apiUrl The URL of a Cosmos SDK light client daemon API (sometimes called REST server or REST API)\n   * @param senderAddress The address that will sign and send transactions using this instance\n   * @param signer An asynchronous callback to create a signature for a given transaction. This can be implemented using secure key stores that require user interaction. Or a newer OfflineSigner type that handles that stuff\n   * @param seedOrEnigmaUtils\n   * @param customFees The fees that are paid for transactions\n   * @param broadcastMode Defines at which point of the transaction processing the postTx method (i.e. transaction broadcasting) returns\n   */\n  constructor(apiUrl, senderAddress, signer, seedOrEnigmaUtils, customFees) {\n    let broadcastMode = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : restclient_1.BroadcastMode.Block;\n    if (seedOrEnigmaUtils instanceof Uint8Array) {\n      super(apiUrl, seedOrEnigmaUtils, broadcastMode);\n    } else {\n      super(apiUrl, undefined, broadcastMode);\n    }\n    this.anyValidAddress = senderAddress;\n    this.senderAddress = senderAddress;\n    //this.signCallback = signCallback ? signCallback : undefined;\n    this.signer = signer;\n    if (seedOrEnigmaUtils && !(seedOrEnigmaUtils instanceof Uint8Array)) {\n      this.restClient.enigmautils = seedOrEnigmaUtils;\n    }\n    this.fees = Object.assign(Object.assign({}, defaultFees), customFees || {});\n    // // Setup contract->hash cache\n    // // This is only needed here and not in CosmWasmClient because we\n    // // need code hashes before sending txs\n    // this.restClient.listCodeInfo().then(async (codes) => {\n    //   for (const code of codes) {\n    //     this.restClient.codeHashCache.set(code.id, code.data_hash);\n    //     const contracts = await this.restClient.listContractsByCodeId(code.id);\n    //     for (const contract of contracts) {\n    //       this.restClient.codeHashCache.set(contract.address, code.data_hash);\n    //     }\n    //   }\n    // });\n  }\n\n  async getNonce(address) {\n    return super.getNonce(address || this.senderAddress);\n  }\n  async getAccount(address) {\n    return super.getAccount(address || this.senderAddress);\n  }\n  async signAdapter(msgs, fee, chainId, memo, accountNumber, sequence) {\n    // offline signer interface\n    if (\"sign\" in this.signer) {\n      const signResponse = await this.signer.sign(this.senderAddress, {\n        chain_id: chainId,\n        account_number: String(accountNumber),\n        sequence: String(sequence),\n        fee: fee,\n        msgs: msgs,\n        memo: memo\n      });\n      return {\n        msg: msgs,\n        fee: signResponse.signed.fee,\n        memo: signResponse.signed.memo,\n        signatures: [signResponse.signature]\n      };\n    } else {\n      // legacy interface\n      const signBytes = encoding_2.makeSignBytes(msgs, fee, chainId, memo, accountNumber, sequence);\n      const signature = await this.signer(signBytes);\n      return {\n        msg: msgs,\n        fee: fee,\n        memo: memo,\n        signatures: [signature]\n      };\n    }\n  }\n  /** Uploads code and returns a receipt, including the code ID */\n  async upload(wasmCode) {\n    let meta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let memo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n    let fee = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.fees.upload;\n    if (!memo) {\n      memo = \"\";\n    }\n    if (!meta) {\n      meta = {};\n    }\n    const source = meta.source || undefined;\n    const builder = prepareBuilder(meta.builder);\n    const compressed = pako_1.default.gzip(wasmCode, {\n      level: 9\n    });\n    const storeCodeMsg = {\n      type: \"wasm/MsgStoreCode\",\n      value: {\n        sender: this.senderAddress,\n        // eslint-disable-next-line @typescript-eslint/camelcase\n        wasm_byte_code: encoding_1.Encoding.toBase64(compressed)\n      }\n    };\n    if (source && source.length > 0) {\n      storeCodeMsg.value.source = source;\n    }\n    if (builder && builder.length > 0) {\n      storeCodeMsg.value.builder = builder;\n    }\n    const {\n      accountNumber,\n      sequence\n    } = await this.getNonce();\n    const chainId = await this.getChainId();\n    const signedTx = await this.signAdapter([storeCodeMsg], fee, chainId, memo, accountNumber, sequence);\n    const result = await this.postTx(signedTx);\n    let codeIdAttr;\n    if (this.restClient.broadcastMode == restclient_1.BroadcastMode.Block) {\n      codeIdAttr = logs_1.findAttribute(result.logs, \"message\", \"code_id\");\n    }\n    return {\n      originalSize: wasmCode.length,\n      originalChecksum: encoding_1.Encoding.toHex(new crypto_1.Sha256(wasmCode).digest()),\n      compressedSize: compressed.length,\n      compressedChecksum: encoding_1.Encoding.toHex(new crypto_1.Sha256(compressed).digest()),\n      codeId: this.restClient.broadcastMode == restclient_1.BroadcastMode.Block ? Number.parseInt(codeIdAttr.value, 10) : -1,\n      logs: result.logs,\n      transactionHash: result.transactionHash\n    };\n  }\n  async instantiate(codeId, initMsg, label) {\n    let memo = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"\";\n    let transferAmount = arguments.length > 4 ? arguments[4] : undefined;\n    let fee = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : this.fees.init;\n    let contractCodeHash = arguments.length > 6 ? arguments[6] : undefined;\n    var _a;\n    if (!contractCodeHash) {\n      contractCodeHash = await this.restClient.getCodeHashByCodeId(codeId);\n    } else {\n      this.restClient.codeHashCache.set(codeId, contractCodeHash);\n    }\n    if (!memo) {\n      memo = \"\";\n    }\n    const instantiateMsg = {\n      type: \"wasm/MsgInstantiateContract\",\n      value: {\n        sender: this.senderAddress,\n        code_id: String(codeId),\n        label: label,\n        init_msg: encoding_1.Encoding.toBase64(await this.restClient.enigmautils.encrypt(contractCodeHash, initMsg)),\n        init_funds: transferAmount !== null && transferAmount !== void 0 ? transferAmount : []\n      }\n    };\n    const {\n      accountNumber,\n      sequence\n    } = await this.getNonce();\n    const chainId = await this.getChainId();\n    const signedTx = await this.signAdapter([instantiateMsg], fee, chainId, memo, accountNumber, sequence);\n    const nonce = encoding_1.Encoding.fromBase64(instantiateMsg.value.init_msg).slice(0, 32);\n    let result;\n    try {\n      result = await this.postTx(signedTx);\n    } catch (err) {\n      try {\n        const errorMessageRgx = /failed to execute message; message index: 0:(?: dispatch: submessages:)* encrypted: (.+?): (?:instantiate|execute|query|reply to) contract failed/g;\n        // @ts-ignore\n        const rgxMatches = errorMessageRgx.exec(err.message);\n        if (rgxMatches == null || rgxMatches.length != 2) {\n          throw err;\n        }\n        const errorCipherB64 = rgxMatches[1];\n        const errorCipherBz = encoding_1.Encoding.fromBase64(errorCipherB64);\n        const errorPlainBz = await this.restClient.enigmautils.decrypt(errorCipherBz, nonce);\n        // @ts-ignore\n        err.message = err.message.replace(errorCipherB64, encoding_1.Encoding.fromUtf8(errorPlainBz));\n      } catch (decryptionError) {\n        throw new Error(\n        // @ts-ignore\n        `Failed to decrypt the following error message: ${err.message}. Decryption error of the error message: ${decryptionError.message}`);\n      }\n      throw err;\n    }\n    let contractAddress = \"\";\n    if (this.restClient.broadcastMode == restclient_1.BroadcastMode.Block) {\n      contractAddress = (_a = logs_1.findAttribute(result.logs, \"message\", \"contract_address\")) === null || _a === void 0 ? void 0 : _a.value;\n    }\n    const logs = this.restClient.broadcastMode == restclient_1.BroadcastMode.Block ? await this.restClient.decryptLogs(result.logs, [nonce]) : [];\n    const txDatas = v1_4_protos_1.TxMsgData.decode(encoding_1.Encoding.fromHex(result.data));\n    const decoded = v1_4_protos_1.MsgInstantiateContractResponse.decode(txDatas.data[0].data);\n    const decrypted = await this.restClient.decryptDataField(encoding_1.Encoding.toHex(decoded.data), [nonce]);\n    return {\n      contractAddress,\n      logs: logs,\n      transactionHash: result.transactionHash,\n      data: decrypted\n    };\n  }\n  async multiExecute(inputMsgs) {\n    let memo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    let totalFee = arguments.length > 2 ? arguments[2] : undefined;\n    var _a, _b, _c, _d;\n    if (!memo) {\n      memo = \"\";\n    }\n    const msgs = [];\n    for (const inputMsg of inputMsgs) {\n      let {\n        contractCodeHash\n      } = inputMsg;\n      if (!contractCodeHash) {\n        contractCodeHash = await this.restClient.getCodeHashByContractAddr(inputMsg.contractAddress);\n      } else {\n        this.restClient.codeHashCache.set(inputMsg.contractAddress, contractCodeHash);\n      }\n      const msg = {\n        type: \"wasm/MsgExecuteContract\",\n        value: {\n          sender: this.senderAddress,\n          contract: inputMsg.contractAddress,\n          //callback_code_hash: \"\",\n          msg: encoding_1.Encoding.toBase64(await this.restClient.enigmautils.encrypt(contractCodeHash, inputMsg.handleMsg)),\n          sent_funds: (_a = inputMsg.transferAmount, _a !== null && _a !== void 0 ? _a : [])\n        }\n      };\n      msgs.push(msg);\n    }\n    const {\n      accountNumber,\n      sequence\n    } = await this.getNonce();\n    const fee = totalFee !== null && totalFee !== void 0 ? totalFee : {\n      gas: String(Number(this.fees.exec.gas) * inputMsgs.length),\n      amount: this.fees.exec.amount\n    };\n    const chainId = await this.getChainId();\n    const signedTx = await this.signAdapter(msgs, fee, chainId, memo, accountNumber, sequence);\n    let result;\n    try {\n      result = await this.postTx(signedTx);\n    } catch (err) {\n      try {\n        const errorMessageRgx = /failed to execute message; message index: (\\d+):(?: dispatch: submessages:)* encrypted: (.+?): (?:instantiate|execute|query|reply to) contract failed/g;\n        // @ts-ignore\n        const rgxMatches = errorMessageRgx.exec(err.message);\n        if (rgxMatches == null || rgxMatches.length != 3) {\n          throw err;\n        }\n        const errorCipherB64 = rgxMatches[1];\n        const errorCipherBz = encoding_1.Encoding.fromBase64(errorCipherB64);\n        const msgIndex = Number(rgxMatches[2]);\n        const nonce = encoding_1.Encoding.fromBase64(msgs[msgIndex].value.msg).slice(0, 32);\n        const errorPlainBz = await this.restClient.enigmautils.decrypt(errorCipherBz, nonce);\n        // @ts-ignore\n        err.message = err.message.replace(errorCipherB64, encoding_1.Encoding.fromUtf8(errorPlainBz));\n      } catch (decryptionError) {\n        throw new Error(\n        // @ts-ignore\n        `Failed to decrypt the following error message: ${err.message}. Decryption error of the error message: ${decryptionError.message}`);\n      }\n      throw err;\n    }\n    const nonces = msgs.map(msg => encoding_1.Encoding.fromBase64(msg.value.msg).slice(0, 32));\n    // //const data = await this.restClient.decryptDataField(result.data, nonces);\n    // const dataFields: MsgData[] = decodeTxData(Encoding.fromHex(result.data));\n    //\n    // let data = Uint8Array.from([]);\n    // if (dataFields[0].data) {\n    //   // dataFields[0].data = JSON.parse(decryptedData.toString());\n    //   // @ts-ignore\n    //   data = await this.restClient.decryptDataField(Encoding.toHex(Encoding.fromBase64(dataFields[0].data)), nonces);\n    // }\n    //\n    // const logs = await this.restClient.decryptLogs(result.logs, nonces);\n    let data = Uint8Array.from([]);\n    if (this.restClient.broadcastMode == restclient_1.BroadcastMode.Block) {\n      const txDatas = v1_4_protos_1.TxMsgData.decode(encoding_1.Encoding.fromHex(result.data));\n      if ((_d = (_c = (_b = txDatas) === null || _b === void 0 ? void 0 : _b.data) === null || _c === void 0 ? void 0 : _c[0]) === null || _d === void 0 ? void 0 : _d.data) {\n        const decoded = v1_4_protos_1.MsgExecuteContractResponse.decode(txDatas.data[0].data);\n        data = await this.restClient.decryptDataField(encoding_1.Encoding.toHex(decoded.data), nonces);\n      }\n    }\n    const logs = this.restClient.broadcastMode == restclient_1.BroadcastMode.Block ? await this.restClient.decryptLogs(result.logs, nonces) : [];\n    return {\n      logs: logs,\n      transactionHash: result.transactionHash,\n      // @ts-ignore\n      data: data\n    };\n  }\n  async execute(contractAddress, handleMsg) {\n    let memo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n    let transferAmount = arguments.length > 3 ? arguments[3] : undefined;\n    let fee = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : this.fees.exec;\n    let contractCodeHash = arguments.length > 5 ? arguments[5] : undefined;\n    var _a, _b, _c;\n    if (!contractCodeHash) {\n      contractCodeHash = await this.restClient.getCodeHashByContractAddr(contractAddress);\n    } else {\n      this.restClient.codeHashCache.set(contractAddress, contractCodeHash);\n    }\n    if (!memo) {\n      memo = \"\";\n    }\n    const executeMsg = {\n      type: \"wasm/MsgExecuteContract\",\n      value: {\n        sender: this.senderAddress,\n        contract: contractAddress,\n        msg: encoding_1.Encoding.toBase64(await this.restClient.enigmautils.encrypt(contractCodeHash, handleMsg)),\n        sent_funds: transferAmount !== null && transferAmount !== void 0 ? transferAmount : []\n      }\n    };\n    const {\n      accountNumber,\n      sequence\n    } = await this.getNonce();\n    const chainId = await this.getChainId();\n    const signedTx = await this.signAdapter([executeMsg], fee, chainId, memo, accountNumber, sequence);\n    const encryptionNonce = encoding_1.Encoding.fromBase64(executeMsg.value.msg).slice(0, 32);\n    let result;\n    try {\n      result = await this.postTx(signedTx);\n    } catch (err) {\n      try {\n        const errorMessageRgx = /failed to execute message; message index: 0:(?: dispatch: submessages:)* encrypted: (.+?): (?:instantiate|execute|query|reply to) contract failed/g;\n        // console.log(`Got error message: ${err.message}`);\n        // @ts-ignore\n        const rgxMatches = errorMessageRgx.exec(err.message);\n        if (rgxMatches == null || rgxMatches.length != 2) {\n          throw err;\n        }\n        const errorCipherB64 = rgxMatches[1];\n        // console.log(`Got error message: ${errorCipherB64}`);\n        const errorCipherBz = encoding_1.Encoding.fromBase64(errorCipherB64);\n        const errorPlainBz = await this.restClient.enigmautils.decrypt(errorCipherBz, encryptionNonce);\n        // @ts-ignore\n        err.message = err.message.replace(errorCipherB64, encoding_1.Encoding.fromUtf8(errorPlainBz));\n      } catch (decryptionError) {\n        throw new Error(\n        // @ts-ignore\n        `Failed to decrypt the following error message: ${err.message}. Decryption error of the error message: ${decryptionError.message}`);\n      }\n      throw err;\n    }\n    let data = Uint8Array.from([]);\n    if (this.restClient.broadcastMode == restclient_1.BroadcastMode.Block) {\n      const txDatas = v1_4_protos_1.TxMsgData.decode(encoding_1.Encoding.fromHex(result.data));\n      if ((_c = (_b = (_a = txDatas) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.data) {\n        const decoded = v1_4_protos_1.MsgExecuteContractResponse.decode(txDatas.data[0].data);\n        data = await this.restClient.decryptDataField(encoding_1.Encoding.toHex(decoded.data), [encryptionNonce]);\n      }\n    }\n    const logs = this.restClient.broadcastMode == restclient_1.BroadcastMode.Block ? await this.restClient.decryptLogs(result.logs, [encryptionNonce]) : [];\n    return {\n      logs,\n      transactionHash: result.transactionHash,\n      // @ts-ignore\n      data\n    };\n  }\n  async sendTokens(recipientAddress, transferAmount) {\n    let memo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n    let fee = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.fees.send;\n    const sendMsg = {\n      type: \"cosmos-sdk/MsgSend\",\n      value: {\n        // eslint-disable-next-line @typescript-eslint/camelcase\n        from_address: this.senderAddress,\n        // eslint-disable-next-line @typescript-eslint/camelcase\n        to_address: recipientAddress,\n        amount: transferAmount\n      }\n    };\n    if (!memo) {\n      memo = \"\";\n    }\n    const {\n      accountNumber,\n      sequence\n    } = await this.getNonce();\n    const chainId = await this.getChainId();\n    const signedTx = await this.signAdapter([sendMsg], fee, chainId, memo, accountNumber, sequence);\n    return this.postTx(signedTx);\n  }\n}\nexports.SigningCosmWasmClient = SigningCosmWasmClient;","map":{"version":3,"mappings":"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","names":["singleAmount","amount","denom","toString","prepareBuilder","buider","undefined","builder_1","Error","defaultFees","upload","gas","String","init","exec","send","SigningCosmWasmClient","cosmwasmclient_1","constructor","apiUrl","senderAddress","signer","seedOrEnigmaUtils","customFees","broadcastMode","restclient_1","Block","Uint8Array","anyValidAddress","restClient","enigmautils","fees","getNonce","address","getAccount","signAdapter","msgs","fee","chainId","memo","accountNumber","sequence","signResponse","sign","chain_id","account_number","msg","signed","signatures","signature","signBytes","encoding_2","wasmCode","meta","source","builder","compressed","pako_1","gzip","level","storeCodeMsg","type","value","sender","wasm_byte_code","encoding_1","toBase64","length","getChainId","signedTx","result","postTx","codeIdAttr","logs_1","logs","originalSize","originalChecksum","toHex","crypto_1","digest","compressedSize","compressedChecksum","codeId","Number","parseInt","transactionHash","instantiate","initMsg","label","transferAmount","contractCodeHash","getCodeHashByCodeId","codeHashCache","set","instantiateMsg","code_id","init_msg","encrypt","init_funds","nonce","fromBase64","slice","err","errorMessageRgx","rgxMatches","message","errorCipherB64","errorCipherBz","errorPlainBz","decrypt","replace","fromUtf8","decryptionError","contractAddress","decryptLogs","txDatas","v1_4_protos_1","decode","fromHex","data","decoded","decrypted","decryptDataField","multiExecute","inputMsgs","totalFee","inputMsg","getCodeHashByContractAddr","contract","handleMsg","sent_funds","push","msgIndex","nonces","map","from","execute","executeMsg","encryptionNonce","sendTokens","recipientAddress","sendMsg","from_address","to_address","exports"],"sources":["../src/signingcosmwasmclient.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}