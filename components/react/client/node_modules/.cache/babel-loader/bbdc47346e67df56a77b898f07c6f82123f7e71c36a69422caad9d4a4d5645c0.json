{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Wallets = exports.WalletConnectKeplrWallet = exports.KeplrWallet = void 0;\nconst tslib_1 = require(\"tslib\");\nconst types_1 = require(\"../types\");\n// TODO: Move imageUrl, and maybe name/description, to user configuration somehow, or incorporate in planned configurable UI overhaul.\nexports.KeplrWallet = {\n  type: types_1.WalletType.Keplr,\n  name: \"Keplr Wallet\",\n  description: \"Keplr Chrome Extension\",\n  imageUrl: \"/keplr-wallet-extension.png\",\n  getClient: () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {\n    return (yield Promise.resolve().then(() => tslib_1.__importStar(require(\"@keplr-wallet/stores\")))).getKeplrFromWindow();\n  }),\n  getOfflineSignerFunction: client =>\n  // This function expects to be bound to the `client` instance.\n  client.getOfflineSignerAuto.bind(client)\n};\nexports.WalletConnectKeplrWallet = {\n  type: types_1.WalletType.WalletConnectKeplr,\n  name: \"WalletConnect\",\n  description: \"Keplr Mobile\",\n  imageUrl: \"/walletconnect-keplr.png\",\n  getClient: (chainInfo, walletConnect) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {\n    if (walletConnect === null || walletConnect === void 0 ? void 0 : walletConnect.connected) {\n      return new (yield Promise.resolve().then(() => tslib_1.__importStar(require(\"../connectors\")))).KeplrWalletConnectV1(walletConnect, [chainInfo]);\n    }\n    throw new Error(\"Mobile wallet not connected.\");\n  }),\n  // WalletConnect only supports Amino signing.\n  getOfflineSignerFunction: client =>\n  // This function expects to be bound to the `client` instance.\n  client.getOfflineSignerOnlyAmino.bind(client)\n};\nexports.Wallets = [exports.KeplrWallet, exports.WalletConnectKeplrWallet];","map":{"version":3,"mappings":";;;;;;;AAAA;AAEA;AAEaA,mBAAW,GAAW;EACjCC,IAAI,EAAEC,kBAAU,CAACC,KAAK;EACtBC,IAAI,EAAE,cAAc;EACpBC,WAAW,EAAE,wBAAwB;EACrCC,QAAQ,EAAE,6BAA6B;EACvCC,SAAS,EAAE,MAAWC;IACpB,QAAC,gEAAa,sBAAsB,GAAC,EAAEC,kBAAkB,EAAE;EAAA;EAC7DC,wBAAwB,EAAGC,MAAM;EAC/B;EACAA,MAAM,CAACC,oBAAoB,CAACC,IAAI,CAACF,MAAM;CAC1C;AAEYX,gCAAwB,GAAW;EAC9CC,IAAI,EAAEC,kBAAU,CAACY,kBAAkB;EACnCV,IAAI,EAAE,eAAe;EACrBC,WAAW,EAAE,cAAc;EAC3BC,QAAQ,EAAE,0BAA0B;EACpCC,SAAS,EAAE,CAAOQ,SAAS,EAAEC,aAAa,KAAIR;IAC5C,IAAIQ,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEC,SAAS,EAAE;MAC5B,OAAO,IAAI,CAAC,gEAAa,eAAe,GAAC,EAAEC,oBAAoB,CAC7DF,aAAa,EACb,CAACD,SAAS,CAAC,CACZ;;IAEH,MAAM,IAAII,KAAK,CAAC,8BAA8B,CAAC;EACjD,CAAC;EACD;EACAT,wBAAwB,EAAGC,MAAM;EAC/B;EACAA,MAAM,CAACS,yBAAyB,CAACP,IAAI,CAACF,MAAM;CAC/C;AAEYX,eAAO,GAAa,CAACA,mBAAW,EAAEA,gCAAwB,CAAC","names":["exports","type","types_1","Keplr","name","description","imageUrl","getClient","tslib_1","getKeplrFromWindow","getOfflineSignerFunction","client","getOfflineSignerAuto","bind","WalletConnectKeplr","chainInfo","walletConnect","connected","KeplrWalletConnectV1","Error","getOfflineSignerOnlyAmino"],"sources":["../../src/utils/wallets.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}