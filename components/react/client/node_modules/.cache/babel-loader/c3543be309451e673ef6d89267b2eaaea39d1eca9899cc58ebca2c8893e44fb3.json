{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GetTxEncryptionKeyMsg = exports.RequestDecryptMsg = exports.ReqeustEncryptMsg = exports.GetPubkeyMsg = void 0;\nconst router_1 = require(\"@keplr-wallet/router\");\nconst constants_1 = require(\"./constants\");\nclass GetPubkeyMsg extends router_1.Message {\n  constructor(chainId) {\n    super();\n    this.chainId = chainId;\n  }\n  static type() {\n    return \"get-pubkey-msg\";\n  }\n  validateBasic() {\n    if (!this.chainId) {\n      throw new router_1.KeplrError(\"secret-wasm\", 100, \"chain id not set\");\n    }\n  }\n  approveExternal() {\n    return true;\n  }\n  route() {\n    return constants_1.ROUTE;\n  }\n  type() {\n    return GetPubkeyMsg.type();\n  }\n}\nexports.GetPubkeyMsg = GetPubkeyMsg;\nclass ReqeustEncryptMsg extends router_1.Message {\n  constructor(chainId, contractCodeHash,\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  msg) {\n    super();\n    this.chainId = chainId;\n    this.contractCodeHash = contractCodeHash;\n    this.msg = msg;\n  }\n  static type() {\n    return \"request-encrypt-msg\";\n  }\n  validateBasic() {\n    if (!this.chainId) {\n      throw new router_1.KeplrError(\"secret-wasm\", 100, \"chain id not set\");\n    }\n    if (!this.contractCodeHash) {\n      throw new router_1.KeplrError(\"secret-wasm\", 103, \"contract code hash not set\");\n    }\n    if (!this.msg) {\n      throw new router_1.KeplrError(\"secret-wasm\", 101, \"msg not set\");\n    }\n  }\n  approveExternal() {\n    return true;\n  }\n  route() {\n    return constants_1.ROUTE;\n  }\n  type() {\n    return ReqeustEncryptMsg.type();\n  }\n}\nexports.ReqeustEncryptMsg = ReqeustEncryptMsg;\nclass RequestDecryptMsg extends router_1.Message {\n  constructor(chainId, cipherText, nonce) {\n    super();\n    this.chainId = chainId;\n    this.cipherText = cipherText;\n    this.nonce = nonce;\n  }\n  static type() {\n    return \"request-decrypt-msg\";\n  }\n  validateBasic() {\n    if (!this.chainId) {\n      throw new router_1.KeplrError(\"secret-wasm\", 100, \"chain id not set\");\n    }\n    if (!this.cipherText || this.cipherText.length === 0) {\n      throw new router_1.KeplrError(\"secret-wasm\", 102, \"ciphertext not set\");\n    }\n    if (!this.nonce || this.nonce.length === 0) {\n      throw new router_1.KeplrError(\"secret-wasm\", 110, \"nonce not set\");\n    }\n  }\n  approveExternal() {\n    return true;\n  }\n  route() {\n    return constants_1.ROUTE;\n  }\n  type() {\n    return RequestDecryptMsg.type();\n  }\n}\nexports.RequestDecryptMsg = RequestDecryptMsg;\nclass GetTxEncryptionKeyMsg extends router_1.Message {\n  constructor(chainId, nonce) {\n    super();\n    this.chainId = chainId;\n    this.nonce = nonce;\n  }\n  static type() {\n    return \"get-tx-encryption-key-msg\";\n  }\n  validateBasic() {\n    if (!this.chainId) {\n      throw new router_1.KeplrError(\"secret-wasm\", 100, \"chain id not set\");\n    }\n    if (!this.nonce) {\n      // Nonce of zero length is permitted.\n      throw new router_1.KeplrError(\"secret-wasm\", 111, \"nonce is null\");\n    }\n  }\n  approveExternal() {\n    return true;\n  }\n  route() {\n    return constants_1.ROUTE;\n  }\n  type() {\n    return GetTxEncryptionKeyMsg.type();\n  }\n}\nexports.GetTxEncryptionKeyMsg = GetTxEncryptionKeyMsg;","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AAEA,MAAaA,YAAa,SAAQC,gBAAmB;EAKnDC,YAA4BC,OAAe;IACzC,KAAK,EAAE;IADmB,YAAO,GAAPA,OAAO;EAEnC;EANO,OAAOC,IAAI;IAChB,OAAO,gBAAgB;EACzB;EAMAC,aAAa;IACX,IAAI,CAAC,IAAI,CAACF,OAAO,EAAE;MACjB,MAAM,IAAIF,mBAAU,CAAC,aAAa,EAAE,GAAG,EAAE,kBAAkB,CAAC;;EAEhE;EAEAK,eAAe;IACb,OAAO,IAAI;EACb;EAEAC,KAAK;IACH,OAAOC,iBAAK;EACd;EAEAJ,IAAI;IACF,OAAOJ,YAAY,CAACI,IAAI,EAAE;EAC5B;;AAzBFK;AA4BA,MAAaC,iBAAkB,SAAQT,gBAAmB;EAKxDC,YACkBC,OAAe,EACfQ,gBAAwB;EACxC;EACgBC,GAAW;IAE3B,KAAK,EAAE;IALS,YAAO,GAAPT,OAAO;IACP,qBAAgB,GAAhBQ,gBAAgB;IAEhB,QAAG,GAAHC,GAAG;EAGrB;EAXO,OAAOR,IAAI;IAChB,OAAO,qBAAqB;EAC9B;EAWAC,aAAa;IACX,IAAI,CAAC,IAAI,CAACF,OAAO,EAAE;MACjB,MAAM,IAAIF,mBAAU,CAAC,aAAa,EAAE,GAAG,EAAE,kBAAkB,CAAC;;IAG9D,IAAI,CAAC,IAAI,CAACU,gBAAgB,EAAE;MAC1B,MAAM,IAAIV,mBAAU,CAAC,aAAa,EAAE,GAAG,EAAE,4BAA4B,CAAC;;IAGxE,IAAI,CAAC,IAAI,CAACW,GAAG,EAAE;MACb,MAAM,IAAIX,mBAAU,CAAC,aAAa,EAAE,GAAG,EAAE,aAAa,CAAC;;EAE3D;EAEAK,eAAe;IACb,OAAO,IAAI;EACb;EAEAC,KAAK;IACH,OAAOC,iBAAK;EACd;EAEAJ,IAAI;IACF,OAAOM,iBAAiB,CAACN,IAAI,EAAE;EACjC;;AAtCFK;AAyCA,MAAaI,iBAAkB,SAAQZ,gBAAmB;EAKxDC,YACkBC,OAAe,EACfW,UAAsB,EACtBC,KAAiB;IAEjC,KAAK,EAAE;IAJS,YAAO,GAAPZ,OAAO;IACP,eAAU,GAAVW,UAAU;IACV,UAAK,GAALC,KAAK;EAGvB;EAVO,OAAOX,IAAI;IAChB,OAAO,qBAAqB;EAC9B;EAUAC,aAAa;IACX,IAAI,CAAC,IAAI,CAACF,OAAO,EAAE;MACjB,MAAM,IAAIF,mBAAU,CAAC,aAAa,EAAE,GAAG,EAAE,kBAAkB,CAAC;;IAG9D,IAAI,CAAC,IAAI,CAACa,UAAU,IAAI,IAAI,CAACA,UAAU,CAACE,MAAM,KAAK,CAAC,EAAE;MACpD,MAAM,IAAIf,mBAAU,CAAC,aAAa,EAAE,GAAG,EAAE,oBAAoB,CAAC;;IAGhE,IAAI,CAAC,IAAI,CAACc,KAAK,IAAI,IAAI,CAACA,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;MAC1C,MAAM,IAAIf,mBAAU,CAAC,aAAa,EAAE,GAAG,EAAE,eAAe,CAAC;;EAE7D;EAEAK,eAAe;IACb,OAAO,IAAI;EACb;EAEAC,KAAK;IACH,OAAOC,iBAAK;EACd;EAEAJ,IAAI;IACF,OAAOS,iBAAiB,CAACT,IAAI,EAAE;EACjC;;AArCFK;AAwCA,MAAaQ,qBAAsB,SAAQhB,gBAAmB;EAK5DC,YACkBC,OAAe,EACfY,KAAiB;IAEjC,KAAK,EAAE;IAHS,YAAO,GAAPZ,OAAO;IACP,UAAK,GAALY,KAAK;EAGvB;EATO,OAAOX,IAAI;IAChB,OAAO,2BAA2B;EACpC;EASAC,aAAa;IACX,IAAI,CAAC,IAAI,CAACF,OAAO,EAAE;MACjB,MAAM,IAAIF,mBAAU,CAAC,aAAa,EAAE,GAAG,EAAE,kBAAkB,CAAC;;IAG9D,IAAI,CAAC,IAAI,CAACc,KAAK,EAAE;MACf;MACA,MAAM,IAAId,mBAAU,CAAC,aAAa,EAAE,GAAG,EAAE,eAAe,CAAC;;EAE7D;EAEAK,eAAe;IACb,OAAO,IAAI;EACb;EAEAC,KAAK;IACH,OAAOC,iBAAK;EACd;EAEAJ,IAAI;IACF,OAAOa,qBAAqB,CAACb,IAAI,EAAE;EACrC;;AAjCFK","names":["GetPubkeyMsg","router_1","constructor","chainId","type","validateBasic","approveExternal","route","constants_1","exports","ReqeustEncryptMsg","contractCodeHash","msg","RequestDecryptMsg","cipherText","nonce","length","GetTxEncryptionKeyMsg"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/@keplr-wallet/background/src/secret-wasm/messages.ts"],"sourcesContent":["import { KeplrError, Message } from \"@keplr-wallet/router\";\nimport { ROUTE } from \"./constants\";\n\nexport class GetPubkeyMsg extends Message<Uint8Array> {\n  public static type() {\n    return \"get-pubkey-msg\";\n  }\n\n  constructor(public readonly chainId: string) {\n    super();\n  }\n\n  validateBasic(): void {\n    if (!this.chainId) {\n      throw new KeplrError(\"secret-wasm\", 100, \"chain id not set\");\n    }\n  }\n\n  approveExternal(): boolean {\n    return true;\n  }\n\n  route(): string {\n    return ROUTE;\n  }\n\n  type(): string {\n    return GetPubkeyMsg.type();\n  }\n}\n\nexport class ReqeustEncryptMsg extends Message<Uint8Array> {\n  public static type() {\n    return \"request-encrypt-msg\";\n  }\n\n  constructor(\n    public readonly chainId: string,\n    public readonly contractCodeHash: string,\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    public readonly msg: object\n  ) {\n    super();\n  }\n\n  validateBasic(): void {\n    if (!this.chainId) {\n      throw new KeplrError(\"secret-wasm\", 100, \"chain id not set\");\n    }\n\n    if (!this.contractCodeHash) {\n      throw new KeplrError(\"secret-wasm\", 103, \"contract code hash not set\");\n    }\n\n    if (!this.msg) {\n      throw new KeplrError(\"secret-wasm\", 101, \"msg not set\");\n    }\n  }\n\n  approveExternal(): boolean {\n    return true;\n  }\n\n  route(): string {\n    return ROUTE;\n  }\n\n  type(): string {\n    return ReqeustEncryptMsg.type();\n  }\n}\n\nexport class RequestDecryptMsg extends Message<Uint8Array> {\n  public static type() {\n    return \"request-decrypt-msg\";\n  }\n\n  constructor(\n    public readonly chainId: string,\n    public readonly cipherText: Uint8Array,\n    public readonly nonce: Uint8Array\n  ) {\n    super();\n  }\n\n  validateBasic(): void {\n    if (!this.chainId) {\n      throw new KeplrError(\"secret-wasm\", 100, \"chain id not set\");\n    }\n\n    if (!this.cipherText || this.cipherText.length === 0) {\n      throw new KeplrError(\"secret-wasm\", 102, \"ciphertext not set\");\n    }\n\n    if (!this.nonce || this.nonce.length === 0) {\n      throw new KeplrError(\"secret-wasm\", 110, \"nonce not set\");\n    }\n  }\n\n  approveExternal(): boolean {\n    return true;\n  }\n\n  route(): string {\n    return ROUTE;\n  }\n\n  type(): string {\n    return RequestDecryptMsg.type();\n  }\n}\n\nexport class GetTxEncryptionKeyMsg extends Message<Uint8Array> {\n  public static type() {\n    return \"get-tx-encryption-key-msg\";\n  }\n\n  constructor(\n    public readonly chainId: string,\n    public readonly nonce: Uint8Array\n  ) {\n    super();\n  }\n\n  validateBasic(): void {\n    if (!this.chainId) {\n      throw new KeplrError(\"secret-wasm\", 100, \"chain id not set\");\n    }\n\n    if (!this.nonce) {\n      // Nonce of zero length is permitted.\n      throw new KeplrError(\"secret-wasm\", 111, \"nonce is null\");\n    }\n  }\n\n  approveExternal(): boolean {\n    return true;\n  }\n\n  route(): string {\n    return ROUTE;\n  }\n\n  type(): string {\n    return GetTxEncryptionKeyMsg.type();\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}