{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Message = void 0;\n/**\n * This messaging system is influenced by cosmos-sdk.\n * The messages are processed in the following order:\n * \"deserialize message -> approve external -> validate basic -> handler by routing\".\n * This deserializing system has weak polymorphism feature.\n * Message would be converted to object according to their class and registered type.\n * But, nested class is not supported. Non primitivie types or array that includes non primitive types in message's fields\n * can't be decoded to their type properly. In this case, user should set thier prototype manually.\n */\nclass Message {\n  /**\n   * Ask for approval if message is sent externally.\n   */\n  approveExternal(_env, _sender) {\n    return false;\n  }\n}\nexports.Message = Message;","map":{"version":3,"mappings":";;;;;;AAEA;;;;;;;;;AASA,MAAsBA,OAAO;EAiC3B;;;EAGAC,eAAe,CACbC,IAAqC,EACrCC,OAAsB;IAEtB,OAAO,KAAK;EACd;;AAzCFC","names":["Message","approveExternal","_env","_sender","exports"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/@keplr-wallet/stores/node_modules/@keplr-wallet/router/src/message.ts"],"sourcesContent":["import { Env, MessageSender } from \"./types\";\n\n/**\n * This messaging system is influenced by cosmos-sdk.\n * The messages are processed in the following order:\n * \"deserialize message -> approve external -> validate basic -> handler by routing\".\n * This deserializing system has weak polymorphism feature.\n * Message would be converted to object according to their class and registered type.\n * But, nested class is not supported. Non primitivie types or array that includes non primitive types in message's fields\n * can't be decoded to their type properly. In this case, user should set thier prototype manually.\n */\nexport abstract class Message<R> {\n  /**\n   * It is needed to infer the type of result from messaging in order to use message with easy and safe type checking.\n   * However, typescript doesn't infer the type of result if generic R is not used in structure due to its structural typing system.\n   * So, we need to use generic R though there is no need to use generic R in structure.\n   * This is just dummy field for generic R, and actually it is never used.\n   */\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  protected _: R;\n\n  /**\n   * ValidateBasic does a simple validation check that\n   * doesn't require access to any other information.\n   * You can throw error in this when msg is invalid.\n   */\n  abstract validateBasic(): void;\n  abstract route(): string;\n  abstract type(): string;\n\n  /**\n   * This means where the message is sent from.\n   * Sending logic should set this value.\n   * And, message manager should check that this origin is set properly.\n   */\n  public readonly origin!: string;\n\n  /**\n   * You can put values here that can be helpful when processing in the router.\n   * In logic, these values should not be used.\n   */\n  public routerMeta?: Record<string, any>;\n\n  /**\n   * Ask for approval if message is sent externally.\n   */\n  approveExternal(\n    _env: Omit<Env, \"requestInteraction\">,\n    _sender: MessageSender\n  ): boolean {\n    return false;\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}