{"ast":null,"code":"\"use strict\";\n\n// Copyright (C) 2016-2017 Dmitry Chestnykh, Tony Arcieri\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst wipe_1 = require(\"../../internals/wipe\");\n// Powers of x mod poly in GF(2).\nconst POWX = new Uint8Array([0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f]);\n// FIPS-197 Figure 7. S-box substitution values in hexadecimal format.\nconst SBOX0 = new Uint8Array([0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]);\n// FIPS-197 Figure 14.  Inverse S-box substitution values in hexadecimal format.\nconst SBOX1 = new Uint8Array([0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d]);\n// Encryption and decryption tables.\n// Will be computed by initialize() when the first AES instance is created.\nlet isInitialized = false;\nlet Te0;\nlet Te1;\nlet Te2;\nlet Te3;\nlet Td0;\nlet Td1;\nlet Td2;\nlet Td3;\n/**\n * Polyfill for the AES block cipher.\n *\n * This implementation uses lookup tables, so it's susceptible to cache-timing\n * side-channel attacks. A constant-time version we tried was super slow (a few\n * kilobytes per second), so we'll have to live with it.\n *\n * Key size: 16 or 32 bytes, block size: 16 bytes.\n */\nclass PolyfillAes {\n  /**\n   * Constructs AES with the given 16 or 32-byte key\n   * for AES-128 or AES-256.\n   */\n  constructor(keyData) {\n    if (!isInitialized) {\n      initialize();\n    }\n    // Only AES-128 and AES-256 supported. AES-192 is not.\n    if (keyData.length !== 16 && keyData.length !== 32) {\n      throw new Error(`Miscreant: invalid key length: ${keyData.length} (expected 16 or 32 bytes)`);\n    }\n    this._encKey = expandKey(keyData);\n    this._emptyPromise = Promise.resolve(this);\n  }\n  /**\n   * Cleans expanded keys from memory, setting them to zeros.\n   */\n  clear() {\n    if (this._encKey) {\n      wipe_1.wipe(this._encKey);\n    }\n    return this;\n  }\n  /**\n   * Encrypt 16-byte block in-place, replacing its contents with ciphertext.\n   *\n   * This function should not be used to encrypt data without any\n   * cipher mode! It should only be used to implement a cipher mode.\n   * This library uses it to implement AES-SIV.\n   */\n  encryptBlock(block) {\n    const src = block.data;\n    const dst = block.data;\n    let s0 = readUint32BE(src, 0);\n    let s1 = readUint32BE(src, 4);\n    let s2 = readUint32BE(src, 8);\n    let s3 = readUint32BE(src, 12);\n    // First round just XORs input with key.\n    s0 ^= this._encKey[0];\n    s1 ^= this._encKey[1];\n    s2 ^= this._encKey[2];\n    s3 ^= this._encKey[3];\n    let t0 = 0;\n    let t1 = 0;\n    let t2 = 0;\n    let t3 = 0;\n    // Middle rounds shuffle using tables.\n    // Number of rounds is set by length of expanded key.\n    const nr = this._encKey.length / 4 - 2; // - 2: one above, one more below\n    let k = 4;\n    for (let r = 0; r < nr; r++) {\n      t0 = this._encKey[k + 0] ^ Te0[s0 >>> 24 & 0xff] ^ Te1[s1 >>> 16 & 0xff] ^ Te2[s2 >>> 8 & 0xff] ^ Te3[s3 & 0xff];\n      t1 = this._encKey[k + 1] ^ Te0[s1 >>> 24 & 0xff] ^ Te1[s2 >>> 16 & 0xff] ^ Te2[s3 >>> 8 & 0xff] ^ Te3[s0 & 0xff];\n      t2 = this._encKey[k + 2] ^ Te0[s2 >>> 24 & 0xff] ^ Te1[s3 >>> 16 & 0xff] ^ Te2[s0 >>> 8 & 0xff] ^ Te3[s1 & 0xff];\n      t3 = this._encKey[k + 3] ^ Te0[s3 >>> 24 & 0xff] ^ Te1[s0 >>> 16 & 0xff] ^ Te2[s1 >>> 8 & 0xff] ^ Te3[s2 & 0xff];\n      k += 4;\n      s0 = t0;\n      s1 = t1;\n      s2 = t2;\n      s3 = t3;\n    }\n    // Last round uses s-box directly and XORs to produce output.\n    s0 = SBOX0[t0 >>> 24] << 24 | SBOX0[t1 >>> 16 & 0xff] << 16 | SBOX0[t2 >>> 8 & 0xff] << 8 | SBOX0[t3 & 0xff];\n    s1 = SBOX0[t1 >>> 24] << 24 | SBOX0[t2 >>> 16 & 0xff] << 16 | SBOX0[t3 >>> 8 & 0xff] << 8 | SBOX0[t0 & 0xff];\n    s2 = SBOX0[t2 >>> 24] << 24 | SBOX0[t3 >>> 16 & 0xff] << 16 | SBOX0[t0 >>> 8 & 0xff] << 8 | SBOX0[t1 & 0xff];\n    s3 = SBOX0[t3 >>> 24] << 24 | SBOX0[t0 >>> 16 & 0xff] << 16 | SBOX0[t1 >>> 8 & 0xff] << 8 | SBOX0[t2 & 0xff];\n    s0 ^= this._encKey[k + 0];\n    s1 ^= this._encKey[k + 1];\n    s2 ^= this._encKey[k + 2];\n    s3 ^= this._encKey[k + 3];\n    writeUint32BE(s0, dst, 0);\n    writeUint32BE(s1, dst, 4);\n    writeUint32BE(s2, dst, 8);\n    writeUint32BE(s3, dst, 12);\n    return this._emptyPromise;\n  }\n}\nexports.default = PolyfillAes;\n// Initialize generates encryption and decryption tables.\nfunction initialize() {\n  const poly = 1 << 8 | 1 << 4 | 1 << 3 | 1 << 1 | 1 << 0;\n  function mul(b, c) {\n    let i = b;\n    let j = c;\n    let s = 0;\n    for (let k = 1; k < 0x100 && j !== 0; k <<= 1) {\n      // Invariant: k == 1<<n, i == b * x^n\n      if ((j & k) !== 0) {\n        // s += i in GF(2); xor in binary\n        s ^= i;\n        j ^= k; // turn off bit to end loop early\n      }\n      // i *= x in GF(2) modulo the polynomial\n      i <<= 1;\n      if ((i & 0x100) !== 0) {\n        i ^= poly;\n      }\n    }\n    return s;\n  }\n  const rot = x => x << 24 | x >>> 8;\n  // Generate encryption tables.\n  Te0 = new Uint32Array(256);\n  Te1 = new Uint32Array(256);\n  Te2 = new Uint32Array(256);\n  Te3 = new Uint32Array(256);\n  for (let i = 0; i < 256; i++) {\n    const s = SBOX0[i];\n    let w = mul(s, 2) << 24 | s << 16 | s << 8 | mul(s, 3);\n    Te0[i] = w;\n    w = rot(w);\n    Te1[i] = w;\n    w = rot(w);\n    Te2[i] = w;\n    w = rot(w);\n    Te3[i] = w;\n    w = rot(w);\n  }\n  // Generate decryption tables.\n  Td0 = new Uint32Array(256);\n  Td1 = new Uint32Array(256);\n  Td2 = new Uint32Array(256);\n  Td3 = new Uint32Array(256);\n  for (let i = 0; i < 256; i++) {\n    const s = SBOX1[i];\n    let w = mul(s, 0xe) << 24 | mul(s, 0x9) << 16 | mul(s, 0xd) << 8 | mul(s, 0xb);\n    Td0[i] = w;\n    w = rot(w);\n    Td1[i] = w;\n    w = rot(w);\n    Td2[i] = w;\n    w = rot(w);\n    Td3[i] = w;\n    w = rot(w);\n  }\n  isInitialized = true;\n}\n// Reads 4 bytes from array starting at offset as big-endian\n// unsigned 32-bit integer and returns it.\nfunction readUint32BE(array) {\n  let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return (array[offset] << 24 | array[offset + 1] << 16 | array[offset + 2] << 8 | array[offset + 3]) >>> 0;\n}\n// Writes 4-byte big-endian representation of 32-bit unsigned\n// value to byte array starting at offset.\n//\n// If byte array is not given, creates a new 4-byte one.\n//\n// Returns the output byte array.\nfunction writeUint32BE(value) {\n  let out = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Uint8Array(4);\n  let offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  out[offset + 0] = value >>> 24;\n  out[offset + 1] = value >>> 16;\n  out[offset + 2] = value >>> 8;\n  out[offset + 3] = value >>> 0;\n  return out;\n}\n// Apply sbox0 to each byte in w.\nfunction subw(w) {\n  return SBOX0[w >>> 24 & 0xff] << 24 | SBOX0[w >>> 16 & 0xff] << 16 | SBOX0[w >>> 8 & 0xff] << 8 | SBOX0[w & 0xff];\n}\n// Rotate\nfunction rotw(w) {\n  return w << 8 | w >>> 24;\n}\nfunction expandKey(key) {\n  const encKey = new Uint32Array(key.length + 28);\n  const nk = key.length / 4 | 0;\n  const n = encKey.length;\n  for (let i = 0; i < nk; i++) {\n    encKey[i] = readUint32BE(key, i * 4);\n  }\n  for (let i = nk; i < n; i++) {\n    let t = encKey[i - 1];\n    if (i % nk === 0) {\n      t = subw(rotw(t)) ^ POWX[i / nk - 1] << 24;\n    } else if (nk > 6 && i % nk === 4) {\n      t = subw(t);\n    }\n    encKey[i] = encKey[i - nk] ^ t;\n  }\n  return encKey;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","wipe_1","require","POWX","Uint8Array","SBOX0","SBOX1","isInitialized","Te0","Te1","Te2","Te3","Td0","Td1","Td2","Td3","PolyfillAes","constructor","keyData","initialize","length","Error","_encKey","expandKey","_emptyPromise","Promise","resolve","clear","wipe","encryptBlock","block","src","data","dst","s0","readUint32BE","s1","s2","s3","t0","t1","t2","t3","nr","k","r","writeUint32BE","default","poly","mul","b","c","i","j","s","rot","x","Uint32Array","w","array","offset","out","subw","rotw","key","encKey","nk","n","t"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/miscreant/release/providers/polyfill/aes.js"],"sourcesContent":["\"use strict\";\n// Copyright (C) 2016-2017 Dmitry Chestnykh, Tony Arcieri\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst wipe_1 = require(\"../../internals/wipe\");\n// Powers of x mod poly in GF(2).\nconst POWX = new Uint8Array([\n    0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80,\n    0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f,\n]);\n// FIPS-197 Figure 7. S-box substitution values in hexadecimal format.\nconst SBOX0 = new Uint8Array([\n    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,\n    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,\n    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,\n    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,\n    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,\n    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,\n    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,\n    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,\n    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,\n    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,\n    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,\n    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,\n    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,\n    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,\n    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,\n    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,\n]);\n// FIPS-197 Figure 14.  Inverse S-box substitution values in hexadecimal format.\nconst SBOX1 = new Uint8Array([\n    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,\n    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,\n    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,\n    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,\n    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,\n    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,\n    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,\n    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,\n    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,\n    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,\n    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,\n    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,\n    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,\n    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,\n    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,\n    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d,\n]);\n// Encryption and decryption tables.\n// Will be computed by initialize() when the first AES instance is created.\nlet isInitialized = false;\nlet Te0;\nlet Te1;\nlet Te2;\nlet Te3;\nlet Td0;\nlet Td1;\nlet Td2;\nlet Td3;\n/**\n * Polyfill for the AES block cipher.\n *\n * This implementation uses lookup tables, so it's susceptible to cache-timing\n * side-channel attacks. A constant-time version we tried was super slow (a few\n * kilobytes per second), so we'll have to live with it.\n *\n * Key size: 16 or 32 bytes, block size: 16 bytes.\n */\nclass PolyfillAes {\n    /**\n     * Constructs AES with the given 16 or 32-byte key\n     * for AES-128 or AES-256.\n     */\n    constructor(keyData) {\n        if (!isInitialized) {\n            initialize();\n        }\n        // Only AES-128 and AES-256 supported. AES-192 is not.\n        if (keyData.length !== 16 && keyData.length !== 32) {\n            throw new Error(`Miscreant: invalid key length: ${keyData.length} (expected 16 or 32 bytes)`);\n        }\n        this._encKey = expandKey(keyData);\n        this._emptyPromise = Promise.resolve(this);\n    }\n    /**\n     * Cleans expanded keys from memory, setting them to zeros.\n     */\n    clear() {\n        if (this._encKey) {\n            wipe_1.wipe(this._encKey);\n        }\n        return this;\n    }\n    /**\n     * Encrypt 16-byte block in-place, replacing its contents with ciphertext.\n     *\n     * This function should not be used to encrypt data without any\n     * cipher mode! It should only be used to implement a cipher mode.\n     * This library uses it to implement AES-SIV.\n     */\n    encryptBlock(block) {\n        const src = block.data;\n        const dst = block.data;\n        let s0 = readUint32BE(src, 0);\n        let s1 = readUint32BE(src, 4);\n        let s2 = readUint32BE(src, 8);\n        let s3 = readUint32BE(src, 12);\n        // First round just XORs input with key.\n        s0 ^= this._encKey[0];\n        s1 ^= this._encKey[1];\n        s2 ^= this._encKey[2];\n        s3 ^= this._encKey[3];\n        let t0 = 0;\n        let t1 = 0;\n        let t2 = 0;\n        let t3 = 0;\n        // Middle rounds shuffle using tables.\n        // Number of rounds is set by length of expanded key.\n        const nr = this._encKey.length / 4 - 2; // - 2: one above, one more below\n        let k = 4;\n        for (let r = 0; r < nr; r++) {\n            t0 = this._encKey[k + 0] ^ Te0[(s0 >>> 24) & 0xff] ^ Te1[(s1 >>> 16) & 0xff] ^\n                Te2[(s2 >>> 8) & 0xff] ^ Te3[s3 & 0xff];\n            t1 = this._encKey[k + 1] ^ Te0[(s1 >>> 24) & 0xff] ^ Te1[(s2 >>> 16) & 0xff] ^\n                Te2[(s3 >>> 8) & 0xff] ^ Te3[s0 & 0xff];\n            t2 = this._encKey[k + 2] ^ Te0[(s2 >>> 24) & 0xff] ^ Te1[(s3 >>> 16) & 0xff] ^\n                Te2[(s0 >>> 8) & 0xff] ^ Te3[s1 & 0xff];\n            t3 = this._encKey[k + 3] ^ Te0[(s3 >>> 24) & 0xff] ^ Te1[(s0 >>> 16) & 0xff] ^\n                Te2[(s1 >>> 8) & 0xff] ^ Te3[s2 & 0xff];\n            k += 4;\n            s0 = t0;\n            s1 = t1;\n            s2 = t2;\n            s3 = t3;\n        }\n        // Last round uses s-box directly and XORs to produce output.\n        s0 = (SBOX0[t0 >>> 24] << 24) | (SBOX0[(t1 >>> 16) & 0xff]) << 16 |\n            (SBOX0[(t2 >>> 8) & 0xff]) << 8 | (SBOX0[t3 & 0xff]);\n        s1 = (SBOX0[t1 >>> 24] << 24) | (SBOX0[(t2 >>> 16) & 0xff]) << 16 |\n            (SBOX0[(t3 >>> 8) & 0xff]) << 8 | (SBOX0[t0 & 0xff]);\n        s2 = (SBOX0[t2 >>> 24] << 24) | (SBOX0[(t3 >>> 16) & 0xff]) << 16 |\n            (SBOX0[(t0 >>> 8) & 0xff]) << 8 | (SBOX0[t1 & 0xff]);\n        s3 = (SBOX0[t3 >>> 24] << 24) | (SBOX0[(t0 >>> 16) & 0xff]) << 16 |\n            (SBOX0[(t1 >>> 8) & 0xff]) << 8 | (SBOX0[t2 & 0xff]);\n        s0 ^= this._encKey[k + 0];\n        s1 ^= this._encKey[k + 1];\n        s2 ^= this._encKey[k + 2];\n        s3 ^= this._encKey[k + 3];\n        writeUint32BE(s0, dst, 0);\n        writeUint32BE(s1, dst, 4);\n        writeUint32BE(s2, dst, 8);\n        writeUint32BE(s3, dst, 12);\n        return this._emptyPromise;\n    }\n}\nexports.default = PolyfillAes;\n// Initialize generates encryption and decryption tables.\nfunction initialize() {\n    const poly = (1 << 8) | (1 << 4) | (1 << 3) | (1 << 1) | (1 << 0);\n    function mul(b, c) {\n        let i = b;\n        let j = c;\n        let s = 0;\n        for (let k = 1; k < 0x100 && j !== 0; k <<= 1) {\n            // Invariant: k == 1<<n, i == b * x^n\n            if ((j & k) !== 0) {\n                // s += i in GF(2); xor in binary\n                s ^= i;\n                j ^= k; // turn off bit to end loop early\n            }\n            // i *= x in GF(2) modulo the polynomial\n            i <<= 1;\n            if ((i & 0x100) !== 0) {\n                i ^= poly;\n            }\n        }\n        return s;\n    }\n    const rot = (x) => (x << 24) | (x >>> 8);\n    // Generate encryption tables.\n    Te0 = new Uint32Array(256);\n    Te1 = new Uint32Array(256);\n    Te2 = new Uint32Array(256);\n    Te3 = new Uint32Array(256);\n    for (let i = 0; i < 256; i++) {\n        const s = SBOX0[i];\n        let w = (mul(s, 2) << 24) | (s << 16) | (s << 8) | mul(s, 3);\n        Te0[i] = w;\n        w = rot(w);\n        Te1[i] = w;\n        w = rot(w);\n        Te2[i] = w;\n        w = rot(w);\n        Te3[i] = w;\n        w = rot(w);\n    }\n    // Generate decryption tables.\n    Td0 = new Uint32Array(256);\n    Td1 = new Uint32Array(256);\n    Td2 = new Uint32Array(256);\n    Td3 = new Uint32Array(256);\n    for (let i = 0; i < 256; i++) {\n        const s = SBOX1[i];\n        let w = (mul(s, 0xe) << 24) | (mul(s, 0x9) << 16) |\n            (mul(s, 0xd) << 8) | mul(s, 0xb);\n        Td0[i] = w;\n        w = rot(w);\n        Td1[i] = w;\n        w = rot(w);\n        Td2[i] = w;\n        w = rot(w);\n        Td3[i] = w;\n        w = rot(w);\n    }\n    isInitialized = true;\n}\n// Reads 4 bytes from array starting at offset as big-endian\n// unsigned 32-bit integer and returns it.\nfunction readUint32BE(array, offset = 0) {\n    return ((array[offset] << 24) |\n        (array[offset + 1] << 16) |\n        (array[offset + 2] << 8) |\n        array[offset + 3]) >>> 0;\n}\n// Writes 4-byte big-endian representation of 32-bit unsigned\n// value to byte array starting at offset.\n//\n// If byte array is not given, creates a new 4-byte one.\n//\n// Returns the output byte array.\nfunction writeUint32BE(value, out = new Uint8Array(4), offset = 0) {\n    out[offset + 0] = value >>> 24;\n    out[offset + 1] = value >>> 16;\n    out[offset + 2] = value >>> 8;\n    out[offset + 3] = value >>> 0;\n    return out;\n}\n// Apply sbox0 to each byte in w.\nfunction subw(w) {\n    return ((SBOX0[(w >>> 24) & 0xff]) << 24) |\n        ((SBOX0[(w >>> 16) & 0xff]) << 16) |\n        ((SBOX0[(w >>> 8) & 0xff]) << 8) |\n        (SBOX0[w & 0xff]);\n}\n// Rotate\nfunction rotw(w) {\n    return (w << 8) | (w >>> 24);\n}\nfunction expandKey(key) {\n    const encKey = new Uint32Array(key.length + 28);\n    const nk = key.length / 4 | 0;\n    const n = encKey.length;\n    for (let i = 0; i < nk; i++) {\n        encKey[i] = readUint32BE(key, i * 4);\n    }\n    for (let i = nk; i < n; i++) {\n        let t = encKey[i - 1];\n        if (i % nk === 0) {\n            t = subw(rotw(t)) ^ (POWX[i / nk - 1] << 24);\n        }\n        else if (nk > 6 && i % nk === 4) {\n            t = subw(t);\n        }\n        encKey[i] = encKey[i - nk] ^ t;\n    }\n    return encKey;\n}\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,MAAMC,MAAM,GAAGC,OAAO,CAAC,sBAAsB,CAAC;AAC9C;AACA,MAAMC,IAAI,GAAG,IAAIC,UAAU,CAAC,CACxB,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAC9C,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CACjD,CAAC;AACF;AACA,MAAMC,KAAK,GAAG,IAAID,UAAU,CAAC,CACzjG,CAAC;AACF;AACA,MAAME,KAAK,GAAG,IAAIF,UAAU,CAAC,CACzB,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAC9F,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAC9F,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAC9F,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAC9F,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAC9F,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAC9F,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAC9F,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAC9F,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAC9F,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAC9F,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAC9F,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAC9F,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAC9F,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAC9F,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAC9F,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CACjG,CAAC;AACF;AACA;AACA,IAAIG,aAAa,GAAG,KAAK;AACzB,IAAIC,GAAG;AACP,IAAIC,GAAG;AACP,IAAIC,GAAG;AACP,IAAIC,GAAG;AACP,IAAIC,GAAG;AACP,IAAIC,GAAG;AACP,IAAIC,GAAG;AACP,IAAIC,GAAG;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,CAAC;EACd;AACJ;AACA;AACA;EACIC,WAAW,CAACC,OAAO,EAAE;IACjB,IAAI,CAACX,aAAa,EAAE;MAChBY,UAAU,EAAE;IAChB;IACA;IACA,IAAID,OAAO,CAACE,MAAM,KAAK,EAAE,IAAIF,OAAO,CAACE,MAAM,KAAK,EAAE,EAAE;MAChD,MAAM,IAAIC,KAAK,CAAE,kCAAiCH,OAAO,CAACE,MAAO,4BAA2B,CAAC;IACjG;IACA,IAAI,CAACE,OAAO,GAAGC,SAAS,CAACL,OAAO,CAAC;IACjC,IAAI,CAACM,aAAa,GAAGC,OAAO,CAACC,OAAO,CAAC,IAAI,CAAC;EAC9C;EACA;AACJ;AACA;EACIC,KAAK,GAAG;IACJ,IAAI,IAAI,CAACL,OAAO,EAAE;MACdrB,MAAM,CAAC2B,IAAI,CAAC,IAAI,CAACN,OAAO,CAAC;IAC7B;IACA,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIO,YAAY,CAACC,KAAK,EAAE;IAChB,MAAMC,GAAG,GAAGD,KAAK,CAACE,IAAI;IACtB,MAAMC,GAAG,GAAGH,KAAK,CAACE,IAAI;IACtB,IAAIE,EAAE,GAAGC,YAAY,CAACJ,GAAG,EAAE,CAAC,CAAC;IAC7B,IAAIK,EAAE,GAAGD,YAAY,CAACJ,GAAG,EAAE,CAAC,CAAC;IAC7B,IAAIM,EAAE,GAAGF,YAAY,CAACJ,GAAG,EAAE,CAAC,CAAC;IAC7B,IAAIO,EAAE,GAAGH,YAAY,CAACJ,GAAG,EAAE,EAAE,CAAC;IAC9B;IACAG,EAAE,IAAI,IAAI,CAACZ,OAAO,CAAC,CAAC,CAAC;IACrBc,EAAE,IAAI,IAAI,CAACd,OAAO,CAAC,CAAC,CAAC;IACrBe,EAAE,IAAI,IAAI,CAACf,OAAO,CAAC,CAAC,CAAC;IACrBgB,EAAE,IAAI,IAAI,CAAChB,OAAO,CAAC,CAAC,CAAC;IACrB,IAAIiB,EAAE,GAAG,CAAC;IACV,IAAIC,EAAE,GAAG,CAAC;IACV,IAAIC,EAAE,GAAG,CAAC;IACV,IAAIC,EAAE,GAAG,CAAC;IACV;IACA;IACA,MAAMC,EAAE,GAAG,IAAI,CAACrB,OAAO,CAACF,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACxC,IAAIwB,CAAC,GAAG,CAAC;IACT,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,EAAE,EAAEE,CAAC,EAAE,EAAE;MACzBN,EAAE,GAAG,IAAI,CAACjB,OAAO,CAACsB,CAAC,GAAG,CAAC,CAAC,GAAGpC,GAAG,CAAE0B,EAAE,KAAK,EAAE,GAAI,IAAI,CAAC,GAAGzB,GAAG,CAAE2B,EAAE,KAAK,EAAE,GAAI,IAAI,CAAC,GACxE1B,GAAG,CAAE2B,EAAE,KAAK,CAAC,GAAI,IAAI,CAAC,GAAG1B,GAAG,CAAC2B,EAAE,GAAG,IAAI,CAAC;MAC3CE,EAAE,GAAG,IAAI,CAAClB,OAAO,CAACsB,CAAC,GAAG,CAAC,CAAC,GAAGpC,GAAG,CAAE4B,EAAE,KAAK,EAAE,GAAI,IAAI,CAAC,GAAG3B,GAAG,CAAE4B,EAAE,KAAK,EAAE,GAAI,IAAI,CAAC,GACxE3B,GAAG,CAAE4B,EAAE,KAAK,CAAC,GAAI,IAAI,CAAC,GAAG3B,GAAG,CAACuB,EAAE,GAAG,IAAI,CAAC;MAC3CO,EAAE,GAAG,IAAI,CAACnB,OAAO,CAACsB,CAAC,GAAG,CAAC,CAAC,GAAGpC,GAAG,CAAE6B,EAAE,KAAK,EAAE,GAAI,IAAI,CAAC,GAAG5B,GAAG,CAAE6B,EAAE,KAAK,EAAE,GAAI,IAAI,CAAC,GACxE5B,GAAG,CAAEwB,EAAE,KAAK,CAAC,GAAI,IAAI,CAAC,GAAGvB,GAAG,CAACyB,EAAE,GAAG,IAAI,CAAC;MAC3CM,EAAE,GAAG,IAAI,CAACpB,OAAO,CAACsB,CAAC,GAAG,CAAC,CAAC,GAAGpC,GAAG,CAAE8B,EAAE,KAAK,EAAE,GAAI,IAAI,CAAC,GAAG7B,GAAG,CAAEyB,EAAE,KAAK,EAAE,GAAI,IAAI,CAAC,GACxExB,GAAG,CAAE0B,EAAE,KAAK,CAAC,GAAI,IAAI,CAAC,GAAGzB,GAAG,CAAC0B,EAAE,GAAG,IAAI,CAAC;MAC3CO,CAAC,IAAI,CAAC;MACNV,EAAE,GAAGK,EAAE;MACPH,EAAE,GAAGI,EAAE;MACPH,EAAE,GAAGI,EAAE;MACPH,EAAE,GAAGI,EAAE;IACX;IACA;IACAR,EAAE,GAAI7B,KAAK,CAACkC,EAAE,KAAK,EAAE,CAAC,IAAI,EAAE,GAAKlC,KAAK,CAAEmC,EAAE,KAAK,EAAE,GAAI,IAAI,CAAC,IAAK,EAAE,GAC5DnC,KAAK,CAAEoC,EAAE,KAAK,CAAC,GAAI,IAAI,CAAC,IAAK,CAAC,GAAIpC,KAAK,CAACqC,EAAE,GAAG,IAAI,CAAE;IACxDN,EAAE,GAAI/B,KAAK,CAACmC,EAAE,KAAK,EAAE,CAAC,IAAI,EAAE,GAAKnC,KAAK,CAAEoC,EAAE,KAAK,EAAE,GAAI,IAAI,CAAC,IAAK,EAAE,GAC5DpC,KAAK,CAAEqC,EAAE,KAAK,CAAC,GAAI,IAAI,CAAC,IAAK,CAAC,GAAIrC,KAAK,CAACkC,EAAE,GAAG,IAAI,CAAE;IACxDF,EAAE,GAAIhC,KAAK,CAACoC,EAAE,KAAK,EAAE,CAAC,IAAI,EAAE,GAAKpC,KAAK,CAAEqC,EAAE,KAAK,EAAE,GAAI,IAAI,CAAC,IAAK,EAAE,GAC5DrC,KAAK,CAAEkC,EAAE,KAAK,CAAC,GAAI,IAAI,CAAC,IAAK,CAAC,GAAIlC,KAAK,CAACmC,EAAE,GAAG,IAAI,CAAE;IACxDF,EAAE,GAAIjC,KAAK,CAACqC,EAAE,KAAK,EAAE,CAAC,IAAI,EAAE,GAAKrC,KAAK,CAAEkC,EAAE,KAAK,EAAE,GAAI,IAAI,CAAC,IAAK,EAAE,GAC5DlC,KAAK,CAAEmC,EAAE,KAAK,CAAC,GAAI,IAAI,CAAC,IAAK,CAAC,GAAInC,KAAK,CAACoC,EAAE,GAAG,IAAI,CAAE;IACxDP,EAAE,IAAI,IAAI,CAACZ,OAAO,CAACsB,CAAC,GAAG,CAAC,CAAC;IACzBR,EAAE,IAAI,IAAI,CAACd,OAAO,CAACsB,CAAC,GAAG,CAAC,CAAC;IACzBP,EAAE,IAAI,IAAI,CAACf,OAAO,CAACsB,CAAC,GAAG,CAAC,CAAC;IACzBN,EAAE,IAAI,IAAI,CAAChB,OAAO,CAACsB,CAAC,GAAG,CAAC,CAAC;IACzBE,aAAa,CAACZ,EAAE,EAAED,GAAG,EAAE,CAAC,CAAC;IACzBa,aAAa,CAACV,EAAE,EAAEH,GAAG,EAAE,CAAC,CAAC;IACzBa,aAAa,CAACT,EAAE,EAAEJ,GAAG,EAAE,CAAC,CAAC;IACzBa,aAAa,CAACR,EAAE,EAAEL,GAAG,EAAE,EAAE,CAAC;IAC1B,OAAO,IAAI,CAACT,aAAa;EAC7B;AACJ;AACAzB,OAAO,CAACgD,OAAO,GAAG/B,WAAW;AAC7B;AACA,SAASG,UAAU,GAAG;EAClB,MAAM6B,IAAI,GAAI,CAAC,IAAI,CAAC,GAAK,CAAC,IAAI,CAAE,GAAI,CAAC,IAAI,CAAE,GAAI,CAAC,IAAI,CAAE,GAAI,CAAC,IAAI,CAAE;EACjE,SAASC,GAAG,CAACC,CAAC,EAAEC,CAAC,EAAE;IACf,IAAIC,CAAC,GAAGF,CAAC;IACT,IAAIG,CAAC,GAAGF,CAAC;IACT,IAAIG,CAAC,GAAG,CAAC;IACT,KAAK,IAAIV,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,KAAK,IAAIS,CAAC,KAAK,CAAC,EAAET,CAAC,KAAK,CAAC,EAAE;MAC3C;MACA,IAAI,CAACS,CAAC,GAAGT,CAAC,MAAM,CAAC,EAAE;QACf;QACAU,CAAC,IAAIF,CAAC;QACNC,CAAC,IAAIT,CAAC,CAAC,CAAC;MACZ;MACA;MACAQ,CAAC,KAAK,CAAC;MACP,IAAI,CAACA,CAAC,GAAG,KAAK,MAAM,CAAC,EAAE;QACnBA,CAAC,IAAIJ,IAAI;MACb;IACJ;IACA,OAAOM,CAAC;EACZ;EACA,MAAMC,GAAG,GAAIC,CAAC,IAAMA,CAAC,IAAI,EAAE,GAAKA,CAAC,KAAK,CAAE;EACxC;EACAhD,GAAG,GAAG,IAAIiD,WAAW,CAAC,GAAG,CAAC;EAC1BhD,GAAG,GAAG,IAAIgD,WAAW,CAAC,GAAG,CAAC;EAC1B/C,GAAG,GAAG,IAAI+C,WAAW,CAAC,GAAG,CAAC;EAC1B9C,GAAG,GAAG,IAAI8C,WAAW,CAAC,GAAG,CAAC;EAC1B,KAAK,IAAIL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,GAAG,EAAEA,CAAC,EAAE,EAAE;IAC1B,MAAME,CAAC,GAAGjD,KAAK,CAAC+C,CAAC,CAAC;IAClB,IAAIM,CAAC,GAAIT,GAAG,CAACK,CAAC,EAAE,CAAC,CAAC,IAAI,EAAE,GAAKA,CAAC,IAAI,EAAG,GAAIA,CAAC,IAAI,CAAE,GAAGL,GAAG,CAACK,CAAC,EAAE,CAAC,CAAC;IAC5D9C,GAAG,CAAC4C,CAAC,CAAC,GAAGM,CAAC;IACVA,CAAC,GAAGH,GAAG,CAACG,CAAC,CAAC;IACVjD,GAAG,CAAC2C,CAAC,CAAC,GAAGM,CAAC;IACVA,CAAC,GAAGH,GAAG,CAACG,CAAC,CAAC;IACVhD,GAAG,CAAC0C,CAAC,CAAC,GAAGM,CAAC;IACVA,CAAC,GAAGH,GAAG,CAACG,CAAC,CAAC;IACV/C,GAAG,CAACyC,CAAC,CAAC,GAAGM,CAAC;IACVA,CAAC,GAAGH,GAAG,CAACG,CAAC,CAAC;EACd;EACA;EACA9C,GAAG,GAAG,IAAI6C,WAAW,CAAC,GAAG,CAAC;EAC1B5C,GAAG,GAAG,IAAI4C,WAAW,CAAC,GAAG,CAAC;EAC1B3C,GAAG,GAAG,IAAI2C,WAAW,CAAC,GAAG,CAAC;EAC1B1C,GAAG,GAAG,IAAI0C,WAAW,CAAC,GAAG,CAAC;EAC1B,KAAK,IAAIL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,GAAG,EAAEA,CAAC,EAAE,EAAE;IAC1B,MAAME,CAAC,GAAGhD,KAAK,CAAC8C,CAAC,CAAC;IAClB,IAAIM,CAAC,GAAIT,GAAG,CAACK,CAAC,EAAE,GAAG,CAAC,IAAI,EAAE,GAAKL,GAAG,CAACK,CAAC,EAAE,GAAG,CAAC,IAAI,EAAG,GAC5CL,GAAG,CAACK,CAAC,EAAE,GAAG,CAAC,IAAI,CAAE,GAAGL,GAAG,CAACK,CAAC,EAAE,GAAG,CAAC;IACpC1C,GAAG,CAACwC,CAAC,CAAC,GAAGM,CAAC;IACVA,CAAC,GAAGH,GAAG,CAACG,CAAC,CAAC;IACV7C,GAAG,CAACuC,CAAC,CAAC,GAAGM,CAAC;IACVA,CAAC,GAAGH,GAAG,CAACG,CAAC,CAAC;IACV5C,GAAG,CAACsC,CAAC,CAAC,GAAGM,CAAC;IACVA,CAAC,GAAGH,GAAG,CAACG,CAAC,CAAC;IACV3C,GAAG,CAACqC,CAAC,CAAC,GAAGM,CAAC;IACVA,CAAC,GAAGH,GAAG,CAACG,CAAC,CAAC;EACd;EACAnD,aAAa,GAAG,IAAI;AACxB;AACA;AACA;AACA,SAAS4B,YAAY,CAACwB,KAAK,EAAc;EAAA,IAAZC,MAAM,uEAAG,CAAC;EACnC,OAAO,CAAED,KAAK,CAACC,MAAM,CAAC,IAAI,EAAE,GACvBD,KAAK,CAACC,MAAM,GAAG,CAAC,CAAC,IAAI,EAAG,GACxBD,KAAK,CAACC,MAAM,GAAG,CAAC,CAAC,IAAI,CAAE,GACxBD,KAAK,CAACC,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASd,aAAa,CAAC9C,KAAK,EAAuC;EAAA,IAArC6D,GAAG,uEAAG,IAAIzD,UAAU,CAAC,CAAC,CAAC;EAAA,IAAEwD,MAAM,uEAAG,CAAC;EAC7DC,GAAG,CAACD,MAAM,GAAG,CAAC,CAAC,GAAG5D,KAAK,KAAK,EAAE;EAC9B6D,GAAG,CAACD,MAAM,GAAG,CAAC,CAAC,GAAG5D,KAAK,KAAK,EAAE;EAC9B6D,GAAG,CAACD,MAAM,GAAG,CAAC,CAAC,GAAG5D,KAAK,KAAK,CAAC;EAC7B6D,GAAG,CAACD,MAAM,GAAG,CAAC,CAAC,GAAG5D,KAAK,KAAK,CAAC;EAC7B,OAAO6D,GAAG;AACd;AACA;AACA,SAASC,IAAI,CAACJ,CAAC,EAAE;EACb,OAASrD,KAAK,CAAEqD,CAAC,KAAK,EAAE,GAAI,IAAI,CAAC,IAAK,EAAE,GAClCrD,KAAK,CAAEqD,CAAC,KAAK,EAAE,GAAI,IAAI,CAAC,IAAK,EAAG,GAChCrD,KAAK,CAAEqD,CAAC,KAAK,CAAC,GAAI,IAAI,CAAC,IAAK,CAAE,GAC/BrD,KAAK,CAACqD,CAAC,GAAG,IAAI,CAAE;AACzB;AACA;AACA,SAASK,IAAI,CAACL,CAAC,EAAE;EACb,OAAQA,CAAC,IAAI,CAAC,GAAKA,CAAC,KAAK,EAAG;AAChC;AACA,SAASnC,SAAS,CAACyC,GAAG,EAAE;EACpB,MAAMC,MAAM,GAAG,IAAIR,WAAW,CAACO,GAAG,CAAC5C,MAAM,GAAG,EAAE,CAAC;EAC/C,MAAM8C,EAAE,GAAGF,GAAG,CAAC5C,MAAM,GAAG,CAAC,GAAG,CAAC;EAC7B,MAAM+C,CAAC,GAAGF,MAAM,CAAC7C,MAAM;EACvB,KAAK,IAAIgC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGc,EAAE,EAAEd,CAAC,EAAE,EAAE;IACzBa,MAAM,CAACb,CAAC,CAAC,GAAGjB,YAAY,CAAC6B,GAAG,EAAEZ,CAAC,GAAG,CAAC,CAAC;EACxC;EACA,KAAK,IAAIA,CAAC,GAAGc,EAAE,EAAEd,CAAC,GAAGe,CAAC,EAAEf,CAAC,EAAE,EAAE;IACzB,IAAIgB,CAAC,GAAGH,MAAM,CAACb,CAAC,GAAG,CAAC,CAAC;IACrB,IAAIA,CAAC,GAAGc,EAAE,KAAK,CAAC,EAAE;MACdE,CAAC,GAAGN,IAAI,CAACC,IAAI,CAACK,CAAC,CAAC,CAAC,GAAIjE,IAAI,CAACiD,CAAC,GAAGc,EAAE,GAAG,CAAC,CAAC,IAAI,EAAG;IAChD,CAAC,MACI,IAAIA,EAAE,GAAG,CAAC,IAAId,CAAC,GAAGc,EAAE,KAAK,CAAC,EAAE;MAC7BE,CAAC,GAAGN,IAAI,CAACM,CAAC,CAAC;IACf;IACAH,MAAM,CAACb,CAAC,CAAC,GAAGa,MAAM,CAACb,CAAC,GAAGc,EAAE,CAAC,GAAGE,CAAC;EAClC;EACA,OAAOH,MAAM;AACjB"},"metadata":{},"sourceType":"script","externalDependencies":[]}