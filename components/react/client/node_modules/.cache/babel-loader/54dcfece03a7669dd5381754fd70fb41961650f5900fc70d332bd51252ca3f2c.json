{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ObservableQueryOsmosisEpochProvisions = void 0;\nconst chain_query_1 = require(\"../../../chain-query\");\nconst mobx_1 = require(\"mobx\");\nconst unit_1 = require(\"@keplr-wallet/unit\");\nclass ObservableQueryOsmosisEpochProvisions extends chain_query_1.ObservableChainQuery {\n  constructor(kvStore, chainId, chainGetter, queryMintParmas) {\n    super(kvStore, chainId, chainGetter, `/osmosis/mint/v1beta1/epoch_provisions`);\n    this.queryMintParmas = queryMintParmas;\n    mobx_1.makeObservable(this);\n  }\n  get epochProvisions() {\n    if (!this.response || !this.queryMintParmas.mintDenom) {\n      return;\n    }\n    const chainInfo = this.chainGetter.getChain(this.chainId);\n    const currency = chainInfo.currencies.find(cur => cur.coinMinimalDenom === this.queryMintParmas.mintDenom);\n    if (!currency) {\n      throw new Error(\"Unknown currency\");\n    }\n    let provision = this.response.data.epoch_provisions;\n    if (provision.includes(\".\")) {\n      provision = provision.slice(0, provision.indexOf(\".\"));\n    }\n    return new unit_1.CoinPretty(currency, new unit_1.Int(provision));\n  }\n}\n__decorate([mobx_1.computed], ObservableQueryOsmosisEpochProvisions.prototype, \"epochProvisions\", null);\nexports.ObservableQueryOsmosisEpochProvisions = ObservableQueryOsmosisEpochProvisions;","map":{"version":3,"mappings":";;;;;;;;;;;;;AACA;AAGA;AACA;AAGA,MAAaA,qCAAsC,SAAQC,kCAAqC;EAC9FC,YACEC,OAAgB,EAChBC,OAAe,EACfC,WAAwB,EACLC,eAAiD;IAEpE,KAAK,CACHH,OAAO,EACPC,OAAO,EACPC,WAAW,EACX,wCAAwC,CACzC;IAPkB,oBAAe,GAAfC,eAAe;IASlCC,qBAAc,CAAC,IAAI,CAAC;EACtB;EAGA,IAAIC,eAAe;IACjB,IAAI,CAAC,IAAI,CAACC,QAAQ,IAAI,CAAC,IAAI,CAACH,eAAe,CAACI,SAAS,EAAE;MACrD;;IAGF,MAAMC,SAAS,GAAG,IAAI,CAACN,WAAW,CAACO,QAAQ,CAAC,IAAI,CAACR,OAAO,CAAC;IACzD,MAAMS,QAAQ,GAAGF,SAAS,CAACG,UAAU,CAACC,IAAI,CACvCC,GAAG,IAAKA,GAAG,CAACC,gBAAgB,KAAK,IAAI,CAACX,eAAe,CAACI,SAAS,CACjE;IACD,IAAI,CAACG,QAAQ,EAAE;MACb,MAAM,IAAIK,KAAK,CAAC,kBAAkB,CAAC;;IAGrC,IAAIC,SAAS,GAAG,IAAI,CAACV,QAAQ,CAACW,IAAI,CAACC,gBAAgB;IACnD,IAAIF,SAAS,CAACG,QAAQ,CAAC,GAAG,CAAC,EAAE;MAC3BH,SAAS,GAAGA,SAAS,CAACI,KAAK,CAAC,CAAC,EAAEJ,SAAS,CAACK,OAAO,CAAC,GAAG,CAAC,CAAC;;IAExD,OAAO,IAAIC,iBAAU,CAACZ,QAAQ,EAAE,IAAIY,UAAG,CAACN,SAAS,CAAC,CAAC;EACrD;;AAlBAO,YADCnB,eAAQ,4EAmBR;AApCHoB","names":["ObservableQueryOsmosisEpochProvisions","chain_query_1","constructor","kvStore","chainId","chainGetter","queryMintParmas","mobx_1","epochProvisions","response","mintDenom","chainInfo","getChain","currency","currencies","find","cur","coinMinimalDenom","Error","provision","data","epoch_provisions","includes","slice","indexOf","unit_1","__decorate","exports"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/@keplr-wallet/stores/src/query/cosmos/supply/osmosis/epoch-provisions.ts"],"sourcesContent":["import { ChainGetter } from \"../../../../common\";\nimport { ObservableChainQuery } from \"../../../chain-query\";\nimport { EpochProvisions } from \"./types\";\nimport { KVStore } from \"@keplr-wallet/common\";\nimport { computed, makeObservable } from \"mobx\";\nimport { CoinPretty, Int } from \"@keplr-wallet/unit\";\nimport { ObservableQueryOsmosisMintParmas } from \"./params\";\n\nexport class ObservableQueryOsmosisEpochProvisions extends ObservableChainQuery<EpochProvisions> {\n  constructor(\n    kvStore: KVStore,\n    chainId: string,\n    chainGetter: ChainGetter,\n    protected readonly queryMintParmas: ObservableQueryOsmosisMintParmas\n  ) {\n    super(\n      kvStore,\n      chainId,\n      chainGetter,\n      `/osmosis/mint/v1beta1/epoch_provisions`\n    );\n\n    makeObservable(this);\n  }\n\n  @computed\n  get epochProvisions(): CoinPretty | undefined {\n    if (!this.response || !this.queryMintParmas.mintDenom) {\n      return;\n    }\n\n    const chainInfo = this.chainGetter.getChain(this.chainId);\n    const currency = chainInfo.currencies.find(\n      (cur) => cur.coinMinimalDenom === this.queryMintParmas.mintDenom\n    );\n    if (!currency) {\n      throw new Error(\"Unknown currency\");\n    }\n\n    let provision = this.response.data.epoch_provisions;\n    if (provision.includes(\".\")) {\n      provision = provision.slice(0, provision.indexOf(\".\"));\n    }\n    return new CoinPretty(currency, new Int(provision));\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}