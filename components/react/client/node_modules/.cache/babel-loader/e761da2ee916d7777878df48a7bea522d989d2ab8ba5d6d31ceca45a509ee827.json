{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ObservableQueryGovernance = void 0;\nconst chain_query_1 = require(\"../../chain-query\");\nconst mobx_1 = require(\"mobx\");\nconst params_1 = require(\"./params\");\nconst unit_1 = require(\"@keplr-wallet/unit\");\nconst mobx_utils_1 = require(\"mobx-utils\");\nconst proposal_1 = require(\"./proposal\");\nclass ObservableQueryGovernance extends chain_query_1.ObservableChainQuery {\n  constructor(kvStore, chainId, chainGetter, _queryPool) {\n    super(kvStore, chainId, chainGetter,\n    // TODO: Handle pagination\n    \"/cosmos/gov/v1beta1/proposals?pagination.limit=3000\");\n    this._queryPool = _queryPool;\n    this.paramDeposit = undefined;\n    this.paramVoting = undefined;\n    this.paramTally = undefined;\n    this.getProposal = mobx_utils_1.computedFn(id => {\n      return this.proposals.find(proposal => proposal.id === id);\n    });\n    mobx_1.makeObservable(this);\n  }\n  getQueryPool() {\n    return this._queryPool;\n  }\n  getQueryParamDeposit() {\n    if (!this.paramDeposit) {\n      mobx_1.runInAction(() => {\n        this.paramDeposit = new params_1.ObservableQueryGovParamDeposit(this.kvStore, this.chainId, this.chainGetter);\n      });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return this.paramDeposit;\n  }\n  getQueryParamVoting() {\n    if (!this.paramVoting) {\n      mobx_1.runInAction(() => {\n        this.paramVoting = new params_1.ObservableQueryGovParamVoting(this.kvStore, this.chainId, this.chainGetter);\n      });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return this.paramVoting;\n  }\n  getQueryParamTally() {\n    if (!this.paramTally) {\n      mobx_1.runInAction(() => {\n        this.paramTally = new params_1.ObservableQueryGovParamTally(this.kvStore, this.chainId, this.chainGetter);\n      });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return this.paramTally;\n  }\n  get quorum() {\n    const paramTally = this.getQueryParamTally();\n    if (!paramTally.response) {\n      return new unit_1.IntPretty(new unit_1.Int(0)).ready(false);\n    }\n    // TODO: Use `RatePretty`\n    let quorum = new unit_1.Dec(paramTally.response.data.tally_params.quorum);\n    // Multiply 100\n    quorum = quorum.mulTruncate(unit_1.DecUtils.getPrecisionDec(2));\n    return new unit_1.IntPretty(quorum);\n  }\n  get proposals() {\n    if (!this.response) {\n      return [];\n    }\n    const result = [];\n    for (const raw of this.response.data.proposals) {\n      result.push(new proposal_1.ObservableQueryProposal(this.kvStore, this.chainId, this.chainGetter, raw, this));\n    }\n    return result.reverse();\n  }\n}\n__decorate([mobx_1.observable.ref], ObservableQueryGovernance.prototype, \"paramDeposit\", void 0);\n__decorate([mobx_1.observable.ref], ObservableQueryGovernance.prototype, \"paramVoting\", void 0);\n__decorate([mobx_1.observable.ref], ObservableQueryGovernance.prototype, \"paramTally\", void 0);\n__decorate([mobx_1.computed], ObservableQueryGovernance.prototype, \"quorum\", null);\n__decorate([mobx_1.computed], ObservableQueryGovernance.prototype, \"proposals\", null);\nexports.ObservableQueryGovernance = ObservableQueryGovernance;","map":{"version":3,"mappings":"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","names":["ObservableQueryGovernance","chain_query_1","constructor","kvStore","chainId","chainGetter","_queryPool","undefined","mobx_utils_1","id","proposals","find","proposal","mobx_1","getQueryPool","getQueryParamDeposit","paramDeposit","params_1","getQueryParamVoting","paramVoting","getQueryParamTally","paramTally","quorum","response","unit_1","ready","data","tally_params","mulTruncate","getPrecisionDec","result","raw","push","proposal_1","reverse","__decorate","ref","exports"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/@keplr-wallet/stores/src/query/cosmos/governance/proposals.ts"],"sourcesContent":["import { ObservableChainQuery } from \"../../chain-query\";\nimport { GovProposals } from \"./types\";\nimport { computed, makeObservable, observable, runInAction } from \"mobx\";\nimport {\n  ObservableQueryGovParamDeposit,\n  ObservableQueryGovParamTally,\n  ObservableQueryGovParamVoting,\n} from \"./params\";\nimport { KVStore } from \"@keplr-wallet/common\";\nimport { ChainGetter } from \"../../../common\";\nimport { DeepReadonly } from \"utility-types\";\nimport { Dec, DecUtils, Int, IntPretty } from \"@keplr-wallet/unit\";\nimport { computedFn } from \"mobx-utils\";\nimport { ObservableQueryProposal } from \"./proposal\";\nimport { ObservableQueryStakingPool } from \"../staking\";\n\nexport class ObservableQueryGovernance extends ObservableChainQuery<GovProposals> {\n  @observable.ref\n  protected paramDeposit?: ObservableQueryGovParamDeposit = undefined;\n  @observable.ref\n  protected paramVoting?: ObservableQueryGovParamVoting = undefined;\n  @observable.ref\n  protected paramTally?: ObservableQueryGovParamTally = undefined;\n\n  constructor(\n    kvStore: KVStore,\n    chainId: string,\n    chainGetter: ChainGetter,\n    protected readonly _queryPool: ObservableQueryStakingPool\n  ) {\n    super(\n      kvStore,\n      chainId,\n      chainGetter,\n      // TODO: Handle pagination\n      \"/cosmos/gov/v1beta1/proposals?pagination.limit=3000\"\n    );\n    makeObservable(this);\n  }\n\n  getQueryPool(): DeepReadonly<ObservableQueryStakingPool> {\n    return this._queryPool;\n  }\n\n  getQueryParamDeposit(): DeepReadonly<ObservableQueryGovParamDeposit> {\n    if (!this.paramDeposit) {\n      runInAction(() => {\n        this.paramDeposit = new ObservableQueryGovParamDeposit(\n          this.kvStore,\n          this.chainId,\n          this.chainGetter\n        );\n      });\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return this.paramDeposit!;\n  }\n\n  getQueryParamVoting(): DeepReadonly<ObservableQueryGovParamVoting> {\n    if (!this.paramVoting) {\n      runInAction(() => {\n        this.paramVoting = new ObservableQueryGovParamVoting(\n          this.kvStore,\n          this.chainId,\n          this.chainGetter\n        );\n      });\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return this.paramVoting!;\n  }\n\n  getQueryParamTally(): DeepReadonly<ObservableQueryGovParamTally> {\n    if (!this.paramTally) {\n      runInAction(() => {\n        this.paramTally = new ObservableQueryGovParamTally(\n          this.kvStore,\n          this.chainId,\n          this.chainGetter\n        );\n      });\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return this.paramTally!;\n  }\n\n  @computed\n  get quorum(): IntPretty {\n    const paramTally = this.getQueryParamTally();\n    if (!paramTally.response) {\n      return new IntPretty(new Int(0)).ready(false);\n    }\n\n    // TODO: Use `RatePretty`\n    let quorum = new Dec(paramTally.response.data.tally_params.quorum);\n    // Multiply 100\n    quorum = quorum.mulTruncate(DecUtils.getPrecisionDec(2));\n\n    return new IntPretty(quorum);\n  }\n\n  @computed\n  get proposals(): DeepReadonly<ObservableQueryProposal[]> {\n    if (!this.response) {\n      return [];\n    }\n\n    const result: ObservableQueryProposal[] = [];\n\n    for (const raw of this.response.data.proposals) {\n      result.push(\n        new ObservableQueryProposal(\n          this.kvStore,\n          this.chainId,\n          this.chainGetter,\n          raw,\n          this\n        )\n      );\n    }\n\n    return result.reverse();\n  }\n\n  readonly getProposal = computedFn((id: string):\n    | DeepReadonly<ObservableQueryProposal>\n    | undefined => {\n    return this.proposals.find((proposal) => proposal.id === id);\n  });\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}