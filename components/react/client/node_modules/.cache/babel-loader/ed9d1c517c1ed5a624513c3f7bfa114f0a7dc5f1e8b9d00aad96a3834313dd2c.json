{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.QueriesStore = exports.createQueriesSetBase = void 0;\nconst mobx_1 = require(\"mobx\");\nconst balances_1 = require(\"./balances\");\nconst common_1 = require(\"../common\");\nconst createQueriesSetBase = (kvStore, chainId, chainGetter) => {\n  return {\n    queryBalances: new balances_1.ObservableQueryBalances(kvStore, chainId, chainGetter)\n  };\n};\nexports.createQueriesSetBase = createQueriesSetBase;\nclass QueriesStore {\n  constructor(kvStore, chainGetter) {\n    this.kvStore = kvStore;\n    this.chainGetter = chainGetter;\n    this.queriesMap = new Map();\n    for (var _len = arguments.length, queriesCreators = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      queriesCreators[_key - 2] = arguments[_key];\n    }\n    this.queriesCreators = queriesCreators;\n    mobx_1.makeObservable(this);\n  }\n  get(chainId) {\n    if (!this.queriesMap.has(chainId)) {\n      const queriesSetBase = exports.createQueriesSetBase(this.kvStore, chainId, this.chainGetter);\n      mobx_1.runInAction(() => {\n        const merged = common_1.mergeStores(queriesSetBase, [this.kvStore, chainId, this.chainGetter], ...this.queriesCreators);\n        this.queriesMap.set(chainId, merged);\n      });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return this.queriesMap.get(chainId);\n  }\n}\n__decorate([mobx_1.observable.shallow], QueriesStore.prototype, \"queriesMap\", void 0);\nexports.QueriesStore = QueriesStore;","map":{"version":3,"mappings":";;;;;;;;;;;;;AAAA;AAGA;AACA;AAWO,MAAMA,oBAAoB,GAAG,CAClCC,OAAgB,EAChBC,OAAe,EACfC,WAAwB,KACN;EAClB,OAAO;IACLC,aAAa,EAAE,IAAIC,kCAAuB,CAACJ,OAAO,EAAEC,OAAO,EAAEC,WAAW;GACzE;AACH,CAAC;AARYG,4BAAoB;AAejC,MAAaC,YAAY;EAgBvBC,YACqBP,OAAgB,EAChBE,WAAwB,EAQ1C;IATkB,YAAO,GAAPF,OAAO;IACP,gBAAW,GAAXE,WAAW;IAhBtB,eAAU,GAGhB,IAAIM,GAAG,EAAE;IAAC,kCAcTC,eAOF;MAPEA,eAOF;IAAA;IAED,IAAI,CAACA,eAAe,GAAGA,eAAe;IAEtCC,qBAAc,CAAC,IAAI,CAAC;EACtB;EAEAC,GAAG,CACDV,OAAe;IAEf,IAAI,CAAC,IAAI,CAACW,UAAU,CAACC,GAAG,CAACZ,OAAO,CAAC,EAAE;MACjC,MAAMa,cAAc,GAAGT,4BAAoB,CACzC,IAAI,CAACL,OAAO,EACZC,OAAO,EACP,IAAI,CAACC,WAAW,CACjB;MACDQ,kBAAW,CAAC,MAAK;QACf,MAAMK,MAAM,GAAGC,oBAAW,CACxBF,cAAc,EACd,CAAC,IAAI,CAACd,OAAO,EAAEC,OAAO,EAAE,IAAI,CAACC,WAAW,CAAC,EACzC,GAAG,IAAI,CAACO,eAAe,CACxB;QAED,IAAI,CAACG,UAAU,CAACK,GAAG,CAAChB,OAAO,EAAEc,MAAM,CAAC;MACtC,CAAC,CAAC;;IAGJ;IACA,OAAO,IAAI,CAACH,UAAU,CAACD,GAAG,CAACV,OAAO,CAEjC;EACH;;AAvDAiB,YADCR,iBAAU,CAACS,OAAO,gDAIL;AALhBd","names":["createQueriesSetBase","kvStore","chainId","chainGetter","queryBalances","balances_1","exports","QueriesStore","constructor","Map","queriesCreators","mobx_1","get","queriesMap","has","queriesSetBase","merged","common_1","set","__decorate","shallow"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/@keplr-wallet/stores/src/query/queries.ts"],"sourcesContent":["import { makeObservable, observable, runInAction } from \"mobx\";\nimport { KVStore } from \"@keplr-wallet/common\";\nimport { DeepReadonly, UnionToIntersection } from \"utility-types\";\nimport { ObservableQueryBalances } from \"./balances\";\nimport {\n  ChainGetter,\n  IObject,\n  mergeStores,\n  ChainedFunctionifyTuple,\n} from \"../common\";\n\nexport interface QueriesSetBase {\n  readonly queryBalances: DeepReadonly<ObservableQueryBalances>;\n}\n\nexport const createQueriesSetBase = (\n  kvStore: KVStore,\n  chainId: string,\n  chainGetter: ChainGetter\n): QueriesSetBase => {\n  return {\n    queryBalances: new ObservableQueryBalances(kvStore, chainId, chainGetter),\n  };\n};\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport interface IQueriesStore<T extends IObject = {}> {\n  get(chainId: string): DeepReadonly<QueriesSetBase & T>;\n}\n\nexport class QueriesStore<Injects extends Array<IObject>> {\n  @observable.shallow\n  protected queriesMap: Map<\n    string,\n    QueriesSetBase & UnionToIntersection<Injects[number]>\n  > = new Map();\n\n  protected readonly queriesCreators: ChainedFunctionifyTuple<\n    QueriesSetBase,\n    // kvStore: KVStore,\n    // chainId: string,\n    // chainGetter: ChainGetter\n    [KVStore, string, ChainGetter],\n    Injects\n  >;\n\n  constructor(\n    protected readonly kvStore: KVStore,\n    protected readonly chainGetter: ChainGetter,\n    ...queriesCreators: ChainedFunctionifyTuple<\n      QueriesSetBase,\n      // kvStore: KVStore,\n      // chainId: string,\n      // chainGetter: ChainGetter\n      [KVStore, string, ChainGetter],\n      Injects\n    >\n  ) {\n    this.queriesCreators = queriesCreators;\n\n    makeObservable(this);\n  }\n\n  get(\n    chainId: string\n  ): DeepReadonly<QueriesSetBase & UnionToIntersection<Injects[number]>> {\n    if (!this.queriesMap.has(chainId)) {\n      const queriesSetBase = createQueriesSetBase(\n        this.kvStore,\n        chainId,\n        this.chainGetter\n      );\n      runInAction(() => {\n        const merged = mergeStores(\n          queriesSetBase,\n          [this.kvStore, chainId, this.chainGetter],\n          ...this.queriesCreators\n        );\n\n        this.queriesMap.set(chainId, merged);\n      });\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return this.queriesMap.get(chainId)! as DeepReadonly<\n      QueriesSetBase & UnionToIntersection<Injects[number]>\n    >;\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}