{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SigningCosmosClient = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nconst fast_deep_equal_1 = __importDefault(require(\"fast-deep-equal\"));\nconst cosmosclient_1 = require(\"./cosmosclient\");\nconst encoding_1 = require(\"./encoding\");\nconst gas_1 = require(\"./gas\");\nconst lcdapi_1 = require(\"./lcdapi\");\nconst tx_1 = require(\"./tx\");\nconst defaultGasPrice = gas_1.GasPrice.fromString(\"0.025ucosm\");\nconst defaultGasLimits = {\n  send: 80000\n};\nclass SigningCosmosClient extends cosmosclient_1.CosmosClient {\n  /**\n   * Creates a new client with signing capability to interact with a Cosmos SDK blockchain. This is the bigger brother of CosmosClient.\n   *\n   * This instance does a lot of caching. In order to benefit from that you should try to use one instance\n   * for the lifetime of your application. When switching backends, a new instance must be created.\n   *\n   * @param apiUrl The URL of a Cosmos SDK light client daemon API (sometimes called REST server or REST API)\n   * @param signerAddress The address that will sign transactions using this instance. The `signer` must be able to sign with this address.\n   * @param signer An implementation of OfflineSigner which can provide signatures for transactions, potentially requiring user input.\n   * @param gasPrice The price paid per unit of gas\n   * @param gasLimits Custom overrides for gas limits related to specific transaction types\n   * @param broadcastMode Defines at which point of the transaction processing the broadcastTx method returns\n   */\n  constructor(apiUrl, signerAddress, signer) {\n    let gasPrice = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : defaultGasPrice;\n    let gasLimits = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    let broadcastMode = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : lcdapi_1.BroadcastMode.Block;\n    super(apiUrl, broadcastMode);\n    this.anyValidAddress = signerAddress;\n    this.signerAddress = signerAddress;\n    this.signer = signer;\n    this.fees = gas_1.buildFeeTable(gasPrice, defaultGasLimits, gasLimits);\n  }\n  async getSequence(address) {\n    return super.getSequence(address || this.signerAddress);\n  }\n  async getAccount(address) {\n    return super.getAccount(address || this.signerAddress);\n  }\n  async sendTokens(recipientAddress, transferAmount) {\n    let memo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n    const sendMsg = {\n      type: \"cosmos-sdk/MsgSend\",\n      value: {\n        from_address: this.signerAddress,\n        to_address: recipientAddress,\n        amount: transferAmount\n      }\n    };\n    return this.signAndBroadcast([sendMsg], this.fees.send, memo);\n  }\n  /**\n   * Gets account number and sequence from the API, creates a sign doc,\n   * creates a single signature, assembles the signed transaction and broadcasts it.\n   */\n  async signAndBroadcast(msgs, fee) {\n    let memo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n    const signedTx = await this.sign(msgs, fee, memo);\n    return this.broadcastTx(signedTx);\n  }\n  /**\n   * Gets account number and sequence from the API, creates a sign doc,\n   * creates a single signature and assembles the signed transaction.\n   */\n  async sign(msgs, fee) {\n    let memo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n    const {\n      accountNumber,\n      sequence\n    } = await this.getSequence();\n    const chainId = await this.getChainId();\n    const signDoc = encoding_1.makeSignDoc(msgs, fee, chainId, memo, accountNumber, sequence);\n    const {\n      signed,\n      signature\n    } = await this.signer.signAmino(this.signerAddress, signDoc);\n    return tx_1.makeStdTx(signed, signature);\n  }\n  /**\n   * Gets account number and sequence from the API, creates a sign doc,\n   * creates a single signature and appends it to the existing signatures.\n   */\n  async appendSignature(signedTx) {\n    const {\n      msg: msgs,\n      fee,\n      memo\n    } = signedTx;\n    const {\n      accountNumber,\n      sequence\n    } = await this.getSequence();\n    const chainId = await this.getChainId();\n    const signDoc = encoding_1.makeSignDoc(msgs, fee, chainId, memo, accountNumber, sequence);\n    const {\n      signed,\n      signature: additionalSignature\n    } = await this.signer.signAmino(this.signerAddress, signDoc);\n    if (!fast_deep_equal_1.default(signDoc, signed)) {\n      throw new Error(\"The signed document differs from the one of the original transaction. This is not allowed since the resulting transaction will be invalid.\");\n    }\n    return tx_1.makeStdTx(signed, [...signedTx.signatures, additionalSignature]);\n  }\n}\nexports.SigningCosmosClient = SigningCosmosClient;","map":{"version":3,"mappings":"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","names":["defaultGasPrice","gas_1","fromString","defaultGasLimits","send","SigningCosmosClient","cosmosclient_1","constructor","apiUrl","signerAddress","signer","gasPrice","gasLimits","broadcastMode","lcdapi_1","Block","anyValidAddress","fees","getSequence","address","getAccount","sendTokens","recipientAddress","transferAmount","memo","sendMsg","type","value","from_address","to_address","amount","signAndBroadcast","msgs","fee","signedTx","sign","broadcastTx","accountNumber","sequence","chainId","getChainId","signDoc","encoding_1","signed","signature","signAmino","tx_1","appendSignature","msg","additionalSignature","fast_deep_equal_1","Error","signatures","exports"],"sources":["../src/signingcosmosclient.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}