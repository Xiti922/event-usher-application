{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ObservableQueryStakingPool = void 0;\nconst chain_query_1 = require(\"../../chain-query\");\nconst mobx_1 = require(\"mobx\");\nconst unit_1 = require(\"@keplr-wallet/unit\");\nclass ObservableQueryStakingPool extends chain_query_1.ObservableChainQuery {\n  constructor(kvStore, chainId, chainGetter) {\n    super(kvStore, chainId, chainGetter, \"/cosmos/staking/v1beta1/pool\");\n    mobx_1.makeObservable(this);\n  }\n  get notBondedTokens() {\n    const chainInfo = this.chainGetter.getChain(this.chainId);\n    if (!this.response) {\n      return new unit_1.CoinPretty(chainInfo.stakeCurrency, 0);\n    }\n    return new unit_1.CoinPretty(chainInfo.stakeCurrency, this.response.data.pool.not_bonded_tokens);\n  }\n  get bondedTokens() {\n    const chainInfo = this.chainGetter.getChain(this.chainId);\n    if (!this.response) {\n      return new unit_1.CoinPretty(chainInfo.stakeCurrency, 0);\n    }\n    return new unit_1.CoinPretty(chainInfo.stakeCurrency, this.response.data.pool.bonded_tokens);\n  }\n}\n__decorate([mobx_1.computed], ObservableQueryStakingPool.prototype, \"notBondedTokens\", null);\n__decorate([mobx_1.computed], ObservableQueryStakingPool.prototype, \"bondedTokens\", null);\nexports.ObservableQueryStakingPool = ObservableQueryStakingPool;","map":{"version":3,"mappings":";;;;;;;;;;;;;AAAA;AAIA;AACA;AAEA,MAAaA,0BAA2B,SAAQC,kCAAiC;EAC/EC,YAAYC,OAAgB,EAAEC,OAAe,EAAEC,WAAwB;IACrE,KAAK,CAACF,OAAO,EAAEC,OAAO,EAAEC,WAAW,EAAE,8BAA8B,CAAC;IAEpEC,qBAAc,CAAC,IAAI,CAAC;EACtB;EAGA,IAAIC,eAAe;IACjB,MAAMC,SAAS,GAAG,IAAI,CAACH,WAAW,CAACI,QAAQ,CAAC,IAAI,CAACL,OAAO,CAAC;IAEzD,IAAI,CAAC,IAAI,CAACM,QAAQ,EAAE;MAClB,OAAO,IAAIC,iBAAU,CAACH,SAAS,CAACI,aAAa,EAAE,CAAC,CAAC;;IAGnD,OAAO,IAAID,iBAAU,CACnBH,SAAS,CAACI,aAAa,EACvB,IAAI,CAACF,QAAQ,CAACG,IAAI,CAACC,IAAI,CAACC,iBAAiB,CAC1C;EACH;EAGA,IAAIC,YAAY;IACd,MAAMR,SAAS,GAAG,IAAI,CAACH,WAAW,CAACI,QAAQ,CAAC,IAAI,CAACL,OAAO,CAAC;IAEzD,IAAI,CAAC,IAAI,CAACM,QAAQ,EAAE;MAClB,OAAO,IAAIC,iBAAU,CAACH,SAAS,CAACI,aAAa,EAAE,CAAC,CAAC;;IAGnD,OAAO,IAAID,iBAAU,CACnBH,SAAS,CAACI,aAAa,EACvB,IAAI,CAACF,QAAQ,CAACG,IAAI,CAACC,IAAI,CAACG,aAAa,CACtC;EACH;;AAzBAC,YADCZ,eAAQ,iEAYR;AAGDY,YADCZ,eAAQ,8DAYR;AAjCHa","names":["ObservableQueryStakingPool","chain_query_1","constructor","kvStore","chainId","chainGetter","mobx_1","notBondedTokens","chainInfo","getChain","response","unit_1","stakeCurrency","data","pool","not_bonded_tokens","bondedTokens","bonded_tokens","__decorate","exports"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/@keplr-wallet/stores/src/query/cosmos/staking/pool.ts"],"sourcesContent":["import { ObservableChainQuery } from \"../../chain-query\";\nimport { StakingPool } from \"./types\";\nimport { KVStore } from \"@keplr-wallet/common\";\nimport { ChainGetter } from \"../../../common\";\nimport { computed, makeObservable } from \"mobx\";\nimport { CoinPretty } from \"@keplr-wallet/unit\";\n\nexport class ObservableQueryStakingPool extends ObservableChainQuery<StakingPool> {\n  constructor(kvStore: KVStore, chainId: string, chainGetter: ChainGetter) {\n    super(kvStore, chainId, chainGetter, \"/cosmos/staking/v1beta1/pool\");\n\n    makeObservable(this);\n  }\n\n  @computed\n  get notBondedTokens(): CoinPretty {\n    const chainInfo = this.chainGetter.getChain(this.chainId);\n\n    if (!this.response) {\n      return new CoinPretty(chainInfo.stakeCurrency, 0);\n    }\n\n    return new CoinPretty(\n      chainInfo.stakeCurrency,\n      this.response.data.pool.not_bonded_tokens\n    );\n  }\n\n  @computed\n  get bondedTokens(): CoinPretty {\n    const chainInfo = this.chainGetter.getChain(this.chainId);\n\n    if (!this.response) {\n      return new CoinPretty(chainInfo.stakeCurrency, 0);\n    }\n\n    return new CoinPretty(\n      chainInfo.stakeCurrency,\n      this.response.data.pool.bonded_tokens\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}