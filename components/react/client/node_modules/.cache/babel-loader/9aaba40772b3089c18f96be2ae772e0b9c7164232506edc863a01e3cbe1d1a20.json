{"ast":null,"code":"\"use strict\";\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst base64js = __importStar(require(\"base64-js\"));\nconst readonly_date_1 = require(\"readonly-date\");\nclass Encoding {\n  static toHex(data) {\n    let out = \"\";\n    for (const byte of data) {\n      out += (\"0\" + byte.toString(16)).slice(-2);\n    }\n    return out;\n  }\n  static fromHex(hexstring) {\n    if (hexstring.length % 2 !== 0) {\n      throw new Error(\"hex string length must be a multiple of 2\");\n    }\n    // tslint:disable-next-line:readonly-array\n    const listOfInts = [];\n    for (let i = 0; i < hexstring.length; i += 2) {\n      const hexByteAsString = hexstring.substr(i, 2);\n      if (!hexByteAsString.match(/[0-9a-f]{2}/i)) {\n        throw new Error(\"hex string contains invalid characters\");\n      }\n      listOfInts.push(parseInt(hexByteAsString, 16));\n    }\n    return new Uint8Array(listOfInts);\n  }\n  static toBase64(data) {\n    return base64js.fromByteArray(data);\n  }\n  static fromBase64(base64String) {\n    if (!base64String.match(/^[a-zA-Z0-9+/]*={0,2}$/)) {\n      throw new Error(\"Invalid base64 string format\");\n    }\n    return base64js.toByteArray(base64String);\n  }\n  static toAscii(input) {\n    const toNums = str => str.split(\"\").map(x => {\n      const charCode = x.charCodeAt(0);\n      // 0x00–0x1F control characters\n      // 0x20–0x7E printable characters\n      // 0x7F delete character\n      // 0x80–0xFF out of 7 bit ascii range\n      if (charCode < 0x20 || charCode > 0x7e) {\n        throw new Error(\"Cannot encode character that is out of printable ASCII range: \" + charCode);\n      }\n      return charCode;\n    });\n    return Uint8Array.from(toNums(input));\n  }\n  static fromAscii(data) {\n    const fromNums = listOfNumbers => listOfNumbers.map(x => {\n      // 0x00–0x1F control characters\n      // 0x20–0x7E printable characters\n      // 0x7F delete character\n      // 0x80–0xFF out of 7 bit ascii range\n      if (x < 0x20 || x > 0x7e) {\n        throw new Error(\"Cannot decode character that is out of printable ASCII range: \" + x);\n      }\n      return String.fromCharCode(x);\n    });\n    return fromNums(Array.from(data)).join(\"\");\n  }\n  static toUtf8(str) {\n    // Browser and future nodejs (https://github.com/nodejs/node/issues/20365)\n    if (typeof TextEncoder !== \"undefined\") {\n      return new TextEncoder().encode(str);\n    }\n    // Use Buffer hack instead of nodejs util.TextEncoder to ensure\n    // webpack does not bundle the util module for browsers.\n    return new Uint8Array(Buffer.from(str, \"utf8\"));\n  }\n  static fromUtf8(data) {\n    // Browser and future nodejs (https://github.com/nodejs/node/issues/20365)\n    if (typeof TextDecoder !== \"undefined\") {\n      return new TextDecoder(\"utf-8\", {\n        fatal: true\n      }).decode(data);\n    }\n    // Use Buffer hack instead of nodejs util.TextDecoder to ensure\n    // webpack does not bundle the util module for browsers.\n    // Buffer.toString has no fatal option\n    if (!Encoding.isValidUtf8(data)) {\n      throw new Error(\"Invalid UTF8 data\");\n    }\n    return Buffer.from(data).toString(\"utf8\");\n  }\n  static fromRfc3339(str) {\n    const rfc3339Matcher = /^(\\d{4})-(\\d{2})-(\\d{2})[T ](\\d{2}):(\\d{2}):(\\d{2})(\\.\\d{1,9})?((?:[+-]\\d{2}:\\d{2})|Z)$/;\n    const matches = rfc3339Matcher.exec(str);\n    if (!matches) {\n      throw new Error(\"Date string is not in RFC3339 format\");\n    }\n    const year = +matches[1];\n    const month = +matches[2];\n    const day = +matches[3];\n    const hour = +matches[4];\n    const minute = +matches[5];\n    const second = +matches[6];\n    // fractional seconds match either undefined or a string like \".1\", \".123456789\"\n    const milliSeconds = matches[7] ? Math.floor(+matches[7] * 1000) : 0;\n    let tzOffsetSign;\n    let tzOffsetHours;\n    let tzOffsetMinutes;\n    // if timezone is undefined, it must be Z or nothing (otherwise the group would have captured).\n    if (matches[8] === \"Z\") {\n      tzOffsetSign = 1;\n      tzOffsetHours = 0;\n      tzOffsetMinutes = 0;\n    } else {\n      tzOffsetSign = matches[8].substring(0, 1) === \"-\" ? -1 : 1;\n      tzOffsetHours = +matches[8].substring(1, 3);\n      tzOffsetMinutes = +matches[8].substring(4, 6);\n    }\n    const tzOffset = tzOffsetSign * (tzOffsetHours * 60 + tzOffsetMinutes) * 60; // seconds\n    return new readonly_date_1.ReadonlyDate(readonly_date_1.ReadonlyDate.UTC(year, month - 1, day, hour, minute, second, milliSeconds) - tzOffset * 1000);\n  }\n  static toRfc3339(date) {\n    function padded(integer) {\n      let length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n      const filled = \"00000\" + integer.toString();\n      return filled.substring(filled.length - length);\n    }\n    const year = date.getUTCFullYear();\n    const month = padded(date.getUTCMonth() + 1);\n    const day = padded(date.getUTCDate());\n    const hour = padded(date.getUTCHours());\n    const minute = padded(date.getUTCMinutes());\n    const second = padded(date.getUTCSeconds());\n    const ms = padded(date.getUTCMilliseconds(), 3);\n    return `${year}-${month}-${day}T${hour}:${minute}:${second}.${ms}Z`;\n  }\n  static isValidUtf8(data) {\n    const toStringAndBack = Buffer.from(Buffer.from(data).toString(\"utf8\"), \"utf8\");\n    return Buffer.compare(Buffer.from(data), toStringAndBack) === 0;\n  }\n}\nexports.Encoding = Encoding;","map":{"version":3,"mappings":"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","names":["Encoding","toHex","data","out","byte","toString","slice","fromHex","hexstring","length","Error","listOfInts","i","hexByteAsString","substr","match","push","parseInt","Uint8Array","toBase64","base64js","fromByteArray","fromBase64","base64String","toByteArray","toAscii","input","toNums","str","split","map","x","charCode","charCodeAt","from","fromAscii","fromNums","listOfNumbers","String","fromCharCode","Array","join","toUtf8","TextEncoder","encode","Buffer","fromUtf8","TextDecoder","fatal","decode","isValidUtf8","fromRfc3339","rfc3339Matcher","matches","exec","year","month","day","hour","minute","second","milliSeconds","Math","floor","tzOffsetSign","tzOffsetHours","tzOffsetMinutes","substring","tzOffset","readonly_date_1","UTC","toRfc3339","date","padded","integer","filled","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","ms","getUTCMilliseconds","toStringAndBack","compare","exports"],"sources":["../src/encoding.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}