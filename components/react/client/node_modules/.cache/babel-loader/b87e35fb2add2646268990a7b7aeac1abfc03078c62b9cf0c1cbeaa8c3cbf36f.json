{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JSONUint8Array = void 0;\n// The JSON encoder that supports the `Uint8Array`.\nconst hex_1 = require(\"./hex\");\nclass JSONUint8Array {\n  static parse(text) {\n    return JSON.parse(text, (_, value) => {\n      if (value && typeof value === \"string\" && value.startsWith(\"__uint8array__\")) {\n        return hex_1.fromHex(value.replace(\"__uint8array__\", \"\"));\n      }\n      return value;\n    });\n  }\n  static stringify(obj) {\n    return JSON.stringify(obj, (_, value) => {\n      if (value && (value instanceof Uint8Array || typeof value === \"object\" && \"type\" in value && \"data\" in value && value.type === \"Buffer\" && Array.isArray(value.data))) {\n        const array = value instanceof Uint8Array ? value : new Uint8Array(value.data);\n        return `__uint8array__${hex_1.toHex(array)}`;\n      }\n      return value;\n    });\n  }\n  static wrap(obj) {\n    if (obj === undefined) return undefined;\n    return JSON.parse(JSONUint8Array.stringify(obj));\n  }\n  static unwrap(obj) {\n    if (obj === undefined) return undefined;\n    return JSONUint8Array.parse(JSON.stringify(obj));\n  }\n}\nexports.JSONUint8Array = JSONUint8Array;","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AAEA,MAAaA,cAAc;EACzB,OAAOC,KAAK,CAACC,IAAY;IACvB,OAAOC,IAAI,CAACF,KAAK,CAACC,IAAI,EAAE,CAACE,CAAC,EAAEC,KAAK,KAAI;MACnC,IACEA,KAAK,IACL,OAAOA,KAAK,KAAK,QAAQ,IACzBA,KAAK,CAACC,UAAU,CAAC,gBAAgB,CAAC,EAClC;QACA,OAAOC,aAAO,CAACF,KAAK,CAACG,OAAO,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAAC;;MAGrD,OAAOH,KAAK;IACd,CAAC,CAAC;EACJ;EAEA,OAAOI,SAAS,CAACC,GAAY;IAC3B,OAAOP,IAAI,CAACM,SAAS,CAACC,GAAG,EAAE,CAACN,CAAC,EAAEC,KAAK,KAAI;MACtC,IACEA,KAAK,KACJA,KAAK,YAAYM,UAAU,IACzB,OAAON,KAAK,KAAK,QAAQ,IACxB,MAAM,IAAIA,KAAK,IACf,MAAM,IAAIA,KAAK,IACfA,KAAK,CAACO,IAAI,KAAK,QAAQ,IACvBC,KAAK,CAACC,OAAO,CAACT,KAAK,CAACU,IAAI,CAAE,CAAC,EAC/B;QACA,MAAMC,KAAK,GACTX,KAAK,YAAYM,UAAU,GAAGN,KAAK,GAAG,IAAIM,UAAU,CAACN,KAAK,CAACU,IAAI,CAAC;QAElE,OAAO,iBAAiBR,WAAK,CAACS,KAAK,CAAC,EAAE;;MAGxC,OAAOX,KAAK;IACd,CAAC,CAAC;EACJ;EAEA,OAAOY,IAAI,CAACP,GAAQ;IAClB,IAAIA,GAAG,KAAKQ,SAAS,EAAE,OAAOA,SAAS;IAEvC,OAAOf,IAAI,CAACF,KAAK,CAACD,cAAc,CAACS,SAAS,CAACC,GAAG,CAAC,CAAC;EAClD;EAEA,OAAOS,MAAM,CAACT,GAAQ;IACpB,IAAIA,GAAG,KAAKQ,SAAS,EAAE,OAAOA,SAAS;IAEvC,OAAOlB,cAAc,CAACC,KAAK,CAACE,IAAI,CAACM,SAAS,CAACC,GAAG,CAAC,CAAC;EAClD;;AA9CFU","names":["JSONUint8Array","parse","text","JSON","_","value","startsWith","hex_1","replace","stringify","obj","Uint8Array","type","Array","isArray","data","array","wrap","undefined","unwrap","exports"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/@keplr-wallet/stores/node_modules/@keplr-wallet/router/src/json-uint8-array/index.ts"],"sourcesContent":["// The JSON encoder that supports the `Uint8Array`.\nimport { fromHex, toHex } from \"./hex\";\n\nexport class JSONUint8Array {\n  static parse(text: string) {\n    return JSON.parse(text, (_, value) => {\n      if (\n        value &&\n        typeof value === \"string\" &&\n        value.startsWith(\"__uint8array__\")\n      ) {\n        return fromHex(value.replace(\"__uint8array__\", \"\"));\n      }\n\n      return value;\n    });\n  }\n\n  static stringify(obj: unknown): string {\n    return JSON.stringify(obj, (_, value) => {\n      if (\n        value &&\n        (value instanceof Uint8Array ||\n          (typeof value === \"object\" &&\n            \"type\" in value &&\n            \"data\" in value &&\n            value.type === \"Buffer\" &&\n            Array.isArray(value.data)))\n      ) {\n        const array =\n          value instanceof Uint8Array ? value : new Uint8Array(value.data);\n\n        return `__uint8array__${toHex(array)}`;\n      }\n\n      return value;\n    });\n  }\n\n  static wrap(obj: any): any {\n    if (obj === undefined) return undefined;\n\n    return JSON.parse(JSONUint8Array.stringify(obj));\n  }\n\n  static unwrap(obj: any): any {\n    if (obj === undefined) return undefined;\n\n    return JSONUint8Array.parse(JSON.stringify(obj));\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}