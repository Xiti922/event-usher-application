{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setupGovExtension = void 0;\nconst query_1 = require(\"cosmjs-types/cosmos/gov/v1beta1/query\");\nconst queryclient_1 = require(\"../../queryclient\");\nfunction setupGovExtension(base) {\n  const rpc = (0, queryclient_1.createProtobufRpcClient)(base);\n  // Use this service to get easy typed access to query methods\n  // This cannot be used for proof verification\n  const queryService = new query_1.QueryClientImpl(rpc);\n  return {\n    gov: {\n      params: async parametersType => {\n        const response = await queryService.Params({\n          paramsType: parametersType\n        });\n        return response;\n      },\n      proposals: async (proposalStatus, depositorAddress, voterAddress, paginationKey) => {\n        const response = await queryService.Proposals({\n          proposalStatus,\n          depositor: depositorAddress,\n          voter: voterAddress,\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        });\n        return response;\n      },\n      proposal: async proposalId => {\n        const response = await queryService.Proposal({\n          proposalId: (0, queryclient_1.longify)(proposalId)\n        });\n        return response;\n      },\n      deposits: async (proposalId, paginationKey) => {\n        const response = await queryService.Deposits({\n          proposalId: (0, queryclient_1.longify)(proposalId),\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        });\n        return response;\n      },\n      deposit: async (proposalId, depositorAddress) => {\n        const response = await queryService.Deposit({\n          proposalId: (0, queryclient_1.longify)(proposalId),\n          depositor: depositorAddress\n        });\n        return response;\n      },\n      tally: async proposalId => {\n        const response = await queryService.TallyResult({\n          proposalId: (0, queryclient_1.longify)(proposalId)\n        });\n        return response;\n      },\n      votes: async (proposalId, paginationKey) => {\n        const response = await queryService.Votes({\n          proposalId: (0, queryclient_1.longify)(proposalId),\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        });\n        return response;\n      },\n      vote: async (proposalId, voterAddress) => {\n        const response = await queryService.Vote({\n          proposalId: (0, queryclient_1.longify)(proposalId),\n          voter: voterAddress\n        });\n        return response;\n      }\n    }\n  };\n}\nexports.setupGovExtension = setupGovExtension;","map":{"version":3,"mappings":";;;;;;AAEA;AAaA;AA2BA,SAAgBA,iBAAiB,CAACC,IAAiB;EACjD,MAAMC,GAAG,GAAG,yCAAuB,EAACD,IAAI,CAAC;EAEzC;EACA;EACA,MAAME,YAAY,GAAG,IAAIC,uBAAe,CAACF,GAAG,CAAC;EAE7C,OAAO;IACLG,GAAG,EAAE;MACHC,MAAM,EAAE,MAAOC,cAA6B,IAAI;QAC9C,MAAMC,QAAQ,GAAG,MAAML,YAAY,CAACM,MAAM,CAAC;UAAEC,UAAU,EAAEH;QAAc,CAAE,CAAC;QAC1E,OAAOC,QAAQ;MACjB,CAAC;MACDG,SAAS,EAAE,OACTC,cAA8B,EAC9BC,gBAAwB,EACxBC,YAAoB,EACpBC,aAA0B,KACxB;QACF,MAAMP,QAAQ,GAAG,MAAML,YAAY,CAACa,SAAS,CAAC;UAC5CJ,cAAc;UACdK,SAAS,EAAEJ,gBAAgB;UAC3BK,KAAK,EAAEJ,YAAY;UACnBK,UAAU,EAAE,kCAAgB,EAACJ,aAAa;SAC3C,CAAC;QACF,OAAOP,QAAQ;MACjB,CAAC;MACDY,QAAQ,EAAE,MAAOC,UAAyB,IAAI;QAC5C,MAAMb,QAAQ,GAAG,MAAML,YAAY,CAACmB,QAAQ,CAAC;UAAED,UAAU,EAAE,yBAAO,EAACA,UAAU;QAAC,CAAE,CAAC;QACjF,OAAOb,QAAQ;MACjB,CAAC;MACDe,QAAQ,EAAE,OAAOF,UAAyB,EAAEN,aAA0B,KAAI;QACxE,MAAMP,QAAQ,GAAG,MAAML,YAAY,CAACqB,QAAQ,CAAC;UAC3CH,UAAU,EAAE,yBAAO,EAACA,UAAU,CAAC;UAC/BF,UAAU,EAAE,kCAAgB,EAACJ,aAAa;SAC3C,CAAC;QACF,OAAOP,QAAQ;MACjB,CAAC;MACDiB,OAAO,EAAE,OAAOJ,UAAyB,EAAER,gBAAwB,KAAI;QACrE,MAAML,QAAQ,GAAG,MAAML,YAAY,CAACuB,OAAO,CAAC;UAC1CL,UAAU,EAAE,yBAAO,EAACA,UAAU,CAAC;UAC/BJ,SAAS,EAAEJ;SACZ,CAAC;QACF,OAAOL,QAAQ;MACjB,CAAC;MACDmB,KAAK,EAAE,MAAON,UAAyB,IAAI;QACzC,MAAMb,QAAQ,GAAG,MAAML,YAAY,CAACyB,WAAW,CAAC;UAC9CP,UAAU,EAAE,yBAAO,EAACA,UAAU;SAC/B,CAAC;QACF,OAAOb,QAAQ;MACjB,CAAC;MACDqB,KAAK,EAAE,OAAOR,UAAyB,EAAEN,aAA0B,KAAI;QACrE,MAAMP,QAAQ,GAAG,MAAML,YAAY,CAAC2B,KAAK,CAAC;UACxCT,UAAU,EAAE,yBAAO,EAACA,UAAU,CAAC;UAC/BF,UAAU,EAAE,kCAAgB,EAACJ,aAAa;SAC3C,CAAC;QACF,OAAOP,QAAQ;MACjB,CAAC;MACDuB,IAAI,EAAE,OAAOV,UAAyB,EAAEP,YAAoB,KAAI;QAC9D,MAAMN,QAAQ,GAAG,MAAML,YAAY,CAAC6B,IAAI,CAAC;UACvCX,UAAU,EAAE,yBAAO,EAACA,UAAU,CAAC;UAC/BH,KAAK,EAAEJ;SACR,CAAC;QACF,OAAON,QAAQ;MACjB;;GAEH;AACH;AAnEAyB","names":["setupGovExtension","base","rpc","queryService","query_1","gov","params","parametersType","response","Params","paramsType","proposals","proposalStatus","depositorAddress","voterAddress","paginationKey","Proposals","depositor","voter","pagination","proposal","proposalId","Proposal","deposits","Deposits","deposit","Deposit","tally","TallyResult","votes","Votes","vote","Vote","exports"],"sources":["../../../src/modules/gov/queries.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}