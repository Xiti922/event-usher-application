{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst miscreant = require(\"miscreant\");\nconst encoding_1 = require(\"@iov/encoding\");\nconst curve25519_js_1 = require(\"curve25519-js\");\nconst secureRandom = require(\"secure-random\");\nconst axios_1 = __importDefault(require(\"axios\"));\nconst hkdf = require(\"js-crypto-hkdf\");\nconst cryptoProvider = new miscreant.PolyfillCryptoProvider();\nconst hkdfSalt = Uint8Array.from([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x4b, 0xea, 0xd8, 0xdf, 0x69, 0x99, 0x08, 0x52, 0xc2, 0x02, 0xdb, 0x0e, 0x00, 0x97, 0xc1, 0xa1, 0x2e, 0xa6, 0x37, 0xd7, 0xe9, 0x6d]);\nclass EnigmaUtils {\n  constructor(apiUrl, seed) {\n    this.consensusIoPubKey = new Uint8Array(); // cache\n    this.apiUrl = apiUrl;\n    if (!seed) {\n      this.seed = EnigmaUtils.GenerateNewSeed();\n    } else {\n      this.seed = seed;\n    }\n    const {\n      privkey,\n      pubkey\n    } = EnigmaUtils.GenerateNewKeyPairFromSeed(this.seed);\n    this.privkey = privkey;\n    this.pubkey = pubkey;\n  }\n  static GenerateNewKeyPair() {\n    return EnigmaUtils.GenerateNewKeyPairFromSeed(EnigmaUtils.GenerateNewSeed());\n  }\n  static GenerateNewSeed() {\n    return secureRandom(32, {\n      type: \"Uint8Array\"\n    });\n  }\n  static GenerateNewKeyPairFromSeed(seed) {\n    const {\n      private: privkey,\n      public: pubkey\n    } = curve25519_js_1.generateKeyPair(seed);\n    return {\n      privkey,\n      pubkey\n    };\n  }\n  async getConsensusIoPubKey() {\n    if (this.consensusIoPubKey.length === 32) {\n      return this.consensusIoPubKey;\n    }\n    const {\n      data: {\n        result: {\n          TxKey\n        }\n      }\n    } = await axios_1.default.get(this.apiUrl + \"/reg/tx-key\", {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    this.consensusIoPubKey = encoding_1.Encoding.fromBase64(TxKey);\n    return this.consensusIoPubKey;\n  }\n  async getTxEncryptionKey(nonce) {\n    const consensusIoPubKey = await this.getConsensusIoPubKey();\n    const txEncryptionIkm = curve25519_js_1.sharedKey(this.privkey, consensusIoPubKey);\n    const {\n      key: txEncryptionKey\n    } = await hkdf.compute(Uint8Array.from([...txEncryptionIkm, ...nonce]), \"SHA-256\", 32, \"\", hkdfSalt);\n    return txEncryptionKey;\n  }\n  async encrypt(contractCodeHash, msg) {\n    const nonce = secureRandom(32, {\n      type: \"Uint8Array\"\n    });\n    const txEncryptionKey = await this.getTxEncryptionKey(nonce);\n    const siv = await miscreant.SIV.importKey(txEncryptionKey, \"AES-SIV\", cryptoProvider);\n    const plaintext = encoding_1.Encoding.toUtf8(contractCodeHash + JSON.stringify(msg));\n    const ciphertext = await siv.seal(plaintext, [new Uint8Array()]);\n    // ciphertext = nonce(32) || wallet_pubkey(32) || ciphertext\n    return Uint8Array.from([...nonce, ...this.pubkey, ...ciphertext]);\n  }\n  async decrypt(ciphertext, nonce) {\n    var _a;\n    if (!((_a = ciphertext) === null || _a === void 0 ? void 0 : _a.length)) {\n      return new Uint8Array();\n    }\n    const txEncryptionKey = await this.getTxEncryptionKey(nonce);\n    //console.log(`decrypt tx encryption key: ${Encoding.toHex(txEncryptionKey)}`);\n    const siv = await miscreant.SIV.importKey(txEncryptionKey, \"AES-SIV\", cryptoProvider);\n    const plaintext = await siv.open(ciphertext, [new Uint8Array()]);\n    return plaintext;\n  }\n  getPubkey() {\n    return Promise.resolve(this.pubkey);\n  }\n}\nexports.default = EnigmaUtils;\nmodule.exports = EnigmaUtils;","map":{"version":3,"mappings":"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","names":["miscreant","require","secureRandom","hkdf","cryptoProvider","PolyfillCryptoProvider","hkdfSalt","Uint8Array","from","EnigmaUtils","constructor","apiUrl","seed","GenerateNewSeed","privkey","pubkey","GenerateNewKeyPairFromSeed","GenerateNewKeyPair","type","private","public","curve25519_js_1","getConsensusIoPubKey","consensusIoPubKey","length","data","result","TxKey","axios_1","get","headers","encoding_1","fromBase64","getTxEncryptionKey","nonce","txEncryptionIkm","key","txEncryptionKey","compute","encrypt","contractCodeHash","msg","siv","SIV","importKey","plaintext","toUtf8","JSON","stringify","ciphertext","seal","decrypt","open","getPubkey","Promise","resolve","exports","module"],"sources":["../src/enigmautils.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}