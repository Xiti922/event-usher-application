{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildFeeTable = exports.GasPrice = void 0;\nconst math_1 = require(\"@cosmjs/math\");\nconst coins_1 = require(\"./coins\");\nclass GasPrice {\n  constructor(amount, denom) {\n    this.amount = amount;\n    this.denom = denom;\n  }\n  static fromString(gasPrice) {\n    const matchResult = gasPrice.match(/^(?<amount>.+?)(?<denom>[a-z]+)$/);\n    if (!matchResult) {\n      throw new Error(\"Invalid gas price string\");\n    }\n    const {\n      amount,\n      denom\n    } = matchResult.groups;\n    if (denom.length < 3 || denom.length > 127) {\n      throw new Error(\"Gas price denomination must be between 3 and 127 characters\");\n    }\n    const fractionalDigits = 18;\n    const decimalAmount = math_1.Decimal.fromUserInput(amount, fractionalDigits);\n    return new GasPrice(decimalAmount, denom);\n  }\n}\nexports.GasPrice = GasPrice;\nfunction calculateFee(gasLimit, _ref) {\n  let {\n    denom,\n    amount: gasPriceAmount\n  } = _ref;\n  const amount = Math.ceil(gasPriceAmount.multiply(new math_1.Uint53(gasLimit)).toFloatApproximation());\n  return {\n    amount: coins_1.coins(amount, denom),\n    gas: gasLimit.toString()\n  };\n}\nfunction buildFeeTable(gasPrice, defaultGasLimits, gasLimits) {\n  return Object.entries(defaultGasLimits).reduce((feeTable, _ref2) => {\n    let [type, defaultGasLimit] = _ref2;\n    return Object.assign(Object.assign({}, feeTable), {\n      [type]: calculateFee(gasLimits[type] || defaultGasLimit, gasPrice)\n    });\n  }, {});\n}\nexports.buildFeeTable = buildFeeTable;","map":{"version":3,"mappings":";;;;;;AAAA;AAEA;AAKA,MAAaA,QAAQ;EAInBC,YAAmBC,MAAe,EAAEC,KAAa;IAC/C,IAAI,CAACD,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,KAAK,GAAGA,KAAK;EACpB;EAEO,OAAOC,UAAU,CAACC,QAAgB;IACvC,MAAMC,WAAW,GAAGD,QAAQ,CAACE,KAAK,CAAC,kCAAkC,CAAC;IACtE,IAAI,CAACD,WAAW,EAAE;MAChB,MAAM,IAAIE,KAAK,CAAC,0BAA0B,CAAC;;IAE7C,MAAM;MAAEN,MAAM;MAAEC;IAAK,CAAE,GAAGG,WAAW,CAACG,MAA6D;IACnG,IAAIN,KAAK,CAACO,MAAM,GAAG,CAAC,IAAIP,KAAK,CAACO,MAAM,GAAG,GAAG,EAAE;MAC1C,MAAM,IAAIF,KAAK,CAAC,6DAA6D,CAAC;;IAEhF,MAAMG,gBAAgB,GAAG,EAAE;IAC3B,MAAMC,aAAa,GAAGC,cAAO,CAACC,aAAa,CAACZ,MAAM,EAAES,gBAAgB,CAAC;IACrE,OAAO,IAAIX,QAAQ,CAACY,aAAa,EAAET,KAAK,CAAC;EAC3C;;AArBFY;AA4BA,SAASC,YAAY,CAACC,QAAgB,QAA6C;EAAA,IAA3C;IAAEd,KAAK;IAAED,MAAM,EAAEgB;EAAc,CAAY;EACjF,MAAMhB,MAAM,GAAGiB,IAAI,CAACC,IAAI,CAACF,cAAc,CAACG,QAAQ,CAAC,IAAIR,aAAM,CAACI,QAAQ,CAAC,CAAC,CAACK,oBAAoB,EAAE,CAAC;EAC9F,OAAO;IACLpB,MAAM,EAAEqB,aAAK,CAACrB,MAAM,EAAEC,KAAK,CAAC;IAC5BqB,GAAG,EAAEP,QAAQ,CAACQ,QAAQ;GACvB;AACH;AAEA,SAAgBC,aAAa,CAC3BrB,QAAkB,EAClBsB,gBAA8B,EAC9BC,SAAgC;EAEhC,OAAOC,MAAM,CAACC,OAAO,CAACH,gBAAgB,CAAC,CAACI,MAAM,CAC5C,CAACC,QAAQ;IAAA,IAAE,CAACC,IAAI,EAAEC,eAAe,CAAC;IAAA,OAAKL,gCAClCG,QAAQ;MACX,CAACC,IAAI,GAAGjB,YAAY,CAACY,SAAS,CAACK,IAAI,CAAC,IAAIC,eAAe,EAAE7B,QAAQ;IAAC;EAAA,CAClE,EACF,EAAO,CACR;AACH;AAZAU","names":["GasPrice","constructor","amount","denom","fromString","gasPrice","matchResult","match","Error","groups","length","fractionalDigits","decimalAmount","math_1","fromUserInput","exports","calculateFee","gasLimit","gasPriceAmount","Math","ceil","multiply","toFloatApproximation","coins_1","gas","toString","buildFeeTable","defaultGasLimits","gasLimits","Object","entries","reduce","feeTable","type","defaultGasLimit"],"sources":["../src/gas.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}