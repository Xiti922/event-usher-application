{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TendermintTxTracer = void 0;\nconst types_1 = require(\"./types\");\nconst buffer_1 = require(\"buffer/\");\nclass TendermintTxTracer {\n  constructor(url, wsEndpoint) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    this.url = url;\n    this.wsEndpoint = wsEndpoint;\n    this.options = options;\n    this.newBlockSubscribes = [];\n    // Key is \"id\" for jsonrpc\n    this.txSubscribes = new Map();\n    // Key is \"id\" for jsonrpc\n    this.pendingQueries = new Map();\n    this.listeners = {};\n    this.onOpen = e => {\n      var _a;\n      if (this.newBlockSubscribes.length > 0) {\n        this.sendSubscribeBlockRpc();\n      }\n      for (const [id, tx] of this.txSubscribes) {\n        this.sendSubscribeTxRpc(id, tx.hash);\n      }\n      for (const [id, query] of this.pendingQueries) {\n        this.sendQueryRpc(id, query.method, query.params);\n      }\n      for (const listener of (_a = this.listeners.open) !== null && _a !== void 0 ? _a : []) {\n        listener(e);\n      }\n    };\n    this.onMessage = e => {\n      var _a, _b, _c, _d, _e, _f;\n      for (const listener of (_a = this.listeners.message) !== null && _a !== void 0 ? _a : []) {\n        listener(e);\n      }\n      if (e.data) {\n        try {\n          const obj = JSON.parse(e.data);\n          if (obj === null || obj === void 0 ? void 0 : obj.id) {\n            if (this.pendingQueries.has(obj.id)) {\n              if (obj.error) {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                this.pendingQueries.get(obj.id).rejector(new Error(obj.error.data || obj.error.message));\n              } else {\n                // XXX: I'm not sure why this happens, but somtimes the form of tx id delivered under the \"tx_result\" field.\n                if ((_b = obj.result) === null || _b === void 0 ? void 0 : _b.tx_result) {\n                  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                  this.pendingQueries.get(obj.id).resolver(obj.result.tx_result);\n                } else {\n                  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                  this.pendingQueries.get(obj.id).resolver(obj.result);\n                }\n              }\n              this.pendingQueries.delete(obj.id);\n            }\n          }\n          if (((_d = (_c = obj === null || obj === void 0 ? void 0 : obj.result) === null || _c === void 0 ? void 0 : _c.data) === null || _d === void 0 ? void 0 : _d.type) === \"tendermint/event/NewBlock\") {\n            for (const handler of this.newBlockSubscribes) {\n              handler.handler(obj.result.data.value);\n            }\n          }\n          if (((_f = (_e = obj === null || obj === void 0 ? void 0 : obj.result) === null || _e === void 0 ? void 0 : _e.data) === null || _f === void 0 ? void 0 : _f.type) === \"tendermint/event/Tx\") {\n            if (obj === null || obj === void 0 ? void 0 : obj.id) {\n              if (this.txSubscribes.has(obj.id)) {\n                if (obj.error) {\n                  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                  this.txSubscribes.get(obj.id).rejector(new Error(obj.error.data || obj.error.message));\n                } else {\n                  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                  this.txSubscribes.get(obj.id).resolver(obj.result.data.value.TxResult.result);\n                }\n                this.txSubscribes.delete(obj.id);\n              }\n            }\n          }\n        } catch (e) {\n          console.log(`Tendermint websocket jsonrpc response is not JSON: ${e.message || e.toString()}`);\n        }\n      }\n    };\n    this.onClose = e => {\n      var _a;\n      for (const listener of (_a = this.listeners.close) !== null && _a !== void 0 ? _a : []) {\n        listener(e);\n      }\n    };\n    this.ws = this.options.wsObject ? new this.options.wsObject(this.getWsEndpoint()) : new WebSocket(this.getWsEndpoint());\n    this.ws.onopen = this.onOpen;\n    this.ws.onmessage = this.onMessage;\n    this.ws.onclose = this.onClose;\n  }\n  getWsEndpoint() {\n    let url = this.url;\n    if (url.startsWith(\"http\")) {\n      url = url.replace(\"http\", \"ws\");\n    }\n    if (!url.endsWith(this.wsEndpoint)) {\n      const wsEndpoint = this.wsEndpoint.startsWith(\"/\") ? this.wsEndpoint : \"/\" + this.wsEndpoint;\n      url = url.endsWith(\"/\") ? url + wsEndpoint.slice(1) : url + wsEndpoint;\n    }\n    return url;\n  }\n  close() {\n    this.ws.close();\n  }\n  get readyState() {\n    switch (this.ws.readyState) {\n      case 0:\n        return types_1.WsReadyState.CONNECTING;\n      case 1:\n        return types_1.WsReadyState.OPEN;\n      case 2:\n        return types_1.WsReadyState.CLOSING;\n      case 3:\n        return types_1.WsReadyState.CLOSED;\n      default:\n        return types_1.WsReadyState.NONE;\n    }\n  }\n  addEventListener(type, listener) {\n    if (!this.listeners[type]) {\n      this.listeners[type] = [];\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    this.listeners[type].push(listener);\n  }\n  subscribeBlock(handler) {\n    this.newBlockSubscribes.push({\n      handler\n    });\n    if (this.newBlockSubscribes.length === 1) {\n      this.sendSubscribeBlockRpc();\n    }\n  }\n  sendSubscribeBlockRpc() {\n    if (this.readyState === types_1.WsReadyState.OPEN) {\n      this.ws.send(JSON.stringify({\n        jsonrpc: \"2.0\",\n        method: \"subscribe\",\n        params: [\"tm.event='NewBlock'\"],\n        id: 1\n      }));\n    }\n  }\n  // Query the tx and subscribe the tx.\n  traceTx(hash) {\n    return new Promise(resolve => {\n      // At first, try to query the tx at the same time of subscribing the tx.\n      // But, the querying's error will be ignored.\n      this.queryTx(hash).then(resolve).catch(() => {\n        // noop\n      });\n      this.subscribeTx(hash).then(resolve);\n    }).then(tx => {\n      // Occasionally, even if the subscribe tx event occurs, the state through query is not changed yet.\n      // Perhaps it is because the block has not been committed yet even though the result of deliverTx in tendermint is complete.\n      // This method is usually used to reflect the state change through query when tx is completed.\n      // The simplest solution is to just add a little delay.\n      return new Promise(resolve => {\n        setTimeout(() => resolve(tx), 100);\n      });\n    });\n  }\n  subscribeTx(hash) {\n    const id = this.createRandomId();\n    return new Promise((resolve, reject) => {\n      this.txSubscribes.set(id, {\n        hash,\n        resolver: resolve,\n        rejector: reject\n      });\n      this.sendSubscribeTxRpc(id, hash);\n    });\n  }\n  sendSubscribeTxRpc(id, hash) {\n    if (this.readyState === types_1.WsReadyState.OPEN) {\n      this.ws.send(JSON.stringify({\n        jsonrpc: \"2.0\",\n        method: \"subscribe\",\n        params: [`tm.event='Tx' AND tx.hash='${buffer_1.Buffer.from(hash).toString(\"hex\").toUpperCase()}'`],\n        id\n      }));\n    }\n  }\n  queryTx(hash) {\n    return this.query(\"tx\", [buffer_1.Buffer.from(hash).toString(\"base64\"), false]);\n  }\n  query(method, params) {\n    const id = this.createRandomId();\n    return new Promise((resolve, reject) => {\n      this.pendingQueries.set(id, {\n        method,\n        params,\n        resolver: resolve,\n        rejector: reject\n      });\n      this.sendQueryRpc(id, method, params);\n    });\n  }\n  sendQueryRpc(id, method, params) {\n    if (this.readyState === types_1.WsReadyState.OPEN) {\n      this.ws.send(JSON.stringify({\n        jsonrpc: \"2.0\",\n        method,\n        params,\n        id\n      }));\n    }\n  }\n  createRandomId() {\n    return parseInt(Array.from({\n      length: 6\n    }).map(() => Math.floor(Math.random() * 100)).join(\"\"));\n  }\n}\nexports.TendermintTxTracer = TendermintTxTracer;","map":{"version":3,"mappings":"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","names":["TendermintTxTracer","constructor","url","wsEndpoint","options","Map","e","newBlockSubscribes","length","sendSubscribeBlockRpc","id","tx","txSubscribes","sendSubscribeTxRpc","hash","query","pendingQueries","sendQueryRpc","method","params","listener","listeners","open","message","data","obj","JSON","parse","has","error","get","rejector","Error","result","tx_result","resolver","delete","type","handler","value","TxResult","console","log","toString","close","ws","wsObject","getWsEndpoint","WebSocket","onopen","onOpen","onmessage","onMessage","onclose","onClose","startsWith","replace","endsWith","slice","readyState","types_1","CONNECTING","OPEN","CLOSING","CLOSED","NONE","addEventListener","push","subscribeBlock","send","stringify","jsonrpc","traceTx","Promise","resolve","queryTx","then","catch","subscribeTx","setTimeout","createRandomId","reject","set","buffer_1","from","toUpperCase","parseInt","Array","map","Math","floor","random","join","exports"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/@keplr-wallet/stores/node_modules/@keplr-wallet/cosmos/src/tx-tracer/index.ts"],"sourcesContent":["import { TxEventMap, WsReadyState } from \"./types\";\n\nimport { Buffer } from \"buffer/\";\n\ntype Listeners = {\n  [K in keyof TxEventMap]?: TxEventMap[K][];\n};\n\nexport class TendermintTxTracer {\n  protected ws: WebSocket;\n\n  protected newBlockSubscribes: {\n    handler: (block: any) => void;\n  }[] = [];\n  // Key is \"id\" for jsonrpc\n  protected txSubscribes: Map<\n    number,\n    {\n      hash: Uint8Array;\n      resolver: (data?: unknown) => void;\n      rejector: (e: Error) => void;\n    }\n  > = new Map();\n\n  // Key is \"id\" for jsonrpc\n  protected pendingQueries: Map<\n    number,\n    {\n      method: string;\n      params: unknown[];\n      resolver: (data?: unknown) => void;\n      rejector: (e: Error) => void;\n    }\n  > = new Map();\n\n  protected listeners: Listeners = {};\n\n  constructor(\n    protected readonly url: string,\n    protected readonly wsEndpoint: string,\n    protected readonly options: {\n      wsObject?: new (url: string, protocols?: string | string[]) => WebSocket;\n    } = {}\n  ) {\n    this.ws = this.options.wsObject\n      ? new this.options.wsObject(this.getWsEndpoint())\n      : new WebSocket(this.getWsEndpoint());\n    this.ws.onopen = this.onOpen;\n    this.ws.onmessage = this.onMessage;\n    this.ws.onclose = this.onClose;\n  }\n\n  protected getWsEndpoint(): string {\n    let url = this.url;\n    if (url.startsWith(\"http\")) {\n      url = url.replace(\"http\", \"ws\");\n    }\n    if (!url.endsWith(this.wsEndpoint)) {\n      const wsEndpoint = this.wsEndpoint.startsWith(\"/\")\n        ? this.wsEndpoint\n        : \"/\" + this.wsEndpoint;\n\n      url = url.endsWith(\"/\") ? url + wsEndpoint.slice(1) : url + wsEndpoint;\n    }\n\n    return url;\n  }\n\n  close() {\n    this.ws.close();\n  }\n\n  get readyState(): WsReadyState {\n    switch (this.ws.readyState) {\n      case 0:\n        return WsReadyState.CONNECTING;\n      case 1:\n        return WsReadyState.OPEN;\n      case 2:\n        return WsReadyState.CLOSING;\n      case 3:\n        return WsReadyState.CLOSED;\n      default:\n        return WsReadyState.NONE;\n    }\n  }\n\n  addEventListener<T extends keyof TxEventMap>(\n    type: T,\n    listener: TxEventMap[T]\n  ) {\n    if (!this.listeners[type]) {\n      this.listeners[type] = [];\n    }\n\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    this.listeners[type]!.push(listener);\n  }\n\n  protected readonly onOpen = (e: Event) => {\n    if (this.newBlockSubscribes.length > 0) {\n      this.sendSubscribeBlockRpc();\n    }\n\n    for (const [id, tx] of this.txSubscribes) {\n      this.sendSubscribeTxRpc(id, tx.hash);\n    }\n\n    for (const [id, query] of this.pendingQueries) {\n      this.sendQueryRpc(id, query.method, query.params);\n    }\n\n    for (const listener of this.listeners.open ?? []) {\n      listener(e);\n    }\n  };\n\n  protected readonly onMessage = (e: MessageEvent) => {\n    for (const listener of this.listeners.message ?? []) {\n      listener(e);\n    }\n\n    if (e.data) {\n      try {\n        const obj = JSON.parse(e.data);\n\n        if (obj?.id) {\n          if (this.pendingQueries.has(obj.id)) {\n            if (obj.error) {\n              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n              this.pendingQueries\n                .get(obj.id)!\n                .rejector(new Error(obj.error.data || obj.error.message));\n            } else {\n              // XXX: I'm not sure why this happens, but somtimes the form of tx id delivered under the \"tx_result\" field.\n              if (obj.result?.tx_result) {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                this.pendingQueries.get(obj.id)!.resolver(obj.result.tx_result);\n              } else {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                this.pendingQueries.get(obj.id)!.resolver(obj.result);\n              }\n            }\n\n            this.pendingQueries.delete(obj.id);\n          }\n        }\n\n        if (obj?.result?.data?.type === \"tendermint/event/NewBlock\") {\n          for (const handler of this.newBlockSubscribes) {\n            handler.handler(obj.result.data.value);\n          }\n        }\n\n        if (obj?.result?.data?.type === \"tendermint/event/Tx\") {\n          if (obj?.id) {\n            if (this.txSubscribes.has(obj.id)) {\n              if (obj.error) {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                this.txSubscribes\n                  .get(obj.id)!\n                  .rejector(new Error(obj.error.data || obj.error.message));\n              } else {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                this.txSubscribes\n                  .get(obj.id)!\n                  .resolver(obj.result.data.value.TxResult.result);\n              }\n\n              this.txSubscribes.delete(obj.id);\n            }\n          }\n        }\n      } catch (e) {\n        console.log(\n          `Tendermint websocket jsonrpc response is not JSON: ${\n            e.message || e.toString()\n          }`\n        );\n      }\n    }\n  };\n\n  protected readonly onClose = (e: CloseEvent) => {\n    for (const listener of this.listeners.close ?? []) {\n      listener(e);\n    }\n  };\n\n  subscribeBlock(handler: (block: any) => void) {\n    this.newBlockSubscribes.push({\n      handler,\n    });\n\n    if (this.newBlockSubscribes.length === 1) {\n      this.sendSubscribeBlockRpc();\n    }\n  }\n\n  protected sendSubscribeBlockRpc(): void {\n    if (this.readyState === WsReadyState.OPEN) {\n      this.ws.send(\n        JSON.stringify({\n          jsonrpc: \"2.0\",\n          method: \"subscribe\",\n          params: [\"tm.event='NewBlock'\"],\n          id: 1,\n        })\n      );\n    }\n  }\n\n  // Query the tx and subscribe the tx.\n  traceTx(hash: Uint8Array): Promise<any> {\n    return new Promise<any>((resolve) => {\n      // At first, try to query the tx at the same time of subscribing the tx.\n      // But, the querying's error will be ignored.\n      this.queryTx(hash)\n        .then(resolve)\n        .catch(() => {\n          // noop\n        });\n\n      this.subscribeTx(hash).then(resolve);\n    }).then((tx) => {\n      // Occasionally, even if the subscribe tx event occurs, the state through query is not changed yet.\n      // Perhaps it is because the block has not been committed yet even though the result of deliverTx in tendermint is complete.\n      // This method is usually used to reflect the state change through query when tx is completed.\n      // The simplest solution is to just add a little delay.\n      return new Promise((resolve) => {\n        setTimeout(() => resolve(tx), 100);\n      });\n    });\n  }\n\n  subscribeTx(hash: Uint8Array): Promise<any> {\n    const id = this.createRandomId();\n\n    return new Promise<unknown>((resolve, reject) => {\n      this.txSubscribes.set(id, {\n        hash,\n        resolver: resolve,\n        rejector: reject,\n      });\n\n      this.sendSubscribeTxRpc(id, hash);\n    });\n  }\n\n  protected sendSubscribeTxRpc(id: number, hash: Uint8Array): void {\n    if (this.readyState === WsReadyState.OPEN) {\n      this.ws.send(\n        JSON.stringify({\n          jsonrpc: \"2.0\",\n          method: \"subscribe\",\n          params: [\n            `tm.event='Tx' AND tx.hash='${Buffer.from(hash)\n              .toString(\"hex\")\n              .toUpperCase()}'`,\n          ],\n          id,\n        })\n      );\n    }\n  }\n\n  queryTx(hash: Uint8Array): Promise<any> {\n    return this.query(\"tx\", [Buffer.from(hash).toString(\"base64\"), false]);\n  }\n\n  protected query(method: string, params: unknown[]): Promise<any> {\n    const id = this.createRandomId();\n\n    return new Promise<unknown>((resolve, reject) => {\n      this.pendingQueries.set(id, {\n        method,\n        params,\n        resolver: resolve,\n        rejector: reject,\n      });\n\n      this.sendQueryRpc(id, method, params);\n    });\n  }\n\n  protected sendQueryRpc(id: number, method: string, params: unknown[]) {\n    if (this.readyState === WsReadyState.OPEN) {\n      this.ws.send(\n        JSON.stringify({\n          jsonrpc: \"2.0\",\n          method,\n          params,\n          id,\n        })\n      );\n    }\n  }\n\n  protected createRandomId(): number {\n    return parseInt(\n      Array.from({ length: 6 })\n        .map(() => Math.floor(Math.random() * 100))\n        .join(\"\")\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}