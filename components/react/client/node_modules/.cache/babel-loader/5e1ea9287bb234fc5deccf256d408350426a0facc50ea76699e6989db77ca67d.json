{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DirectSecp256k1Wallet = void 0;\nconst crypto_1 = require(\"@cosmjs/crypto\");\nconst launchpad_1 = require(\"@cosmjs/launchpad\");\nconst signing_1 = require(\"./signing\");\n/**\n * A wallet that holds a single secp256k1 keypair.\n *\n * If you want to work with BIP39 mnemonics and multiple accounts, use DirectSecp256k1HdWallet.\n */\nclass DirectSecp256k1Wallet {\n  constructor(privkey, pubkey, prefix) {\n    this.privkey = privkey;\n    this.pubkey = pubkey;\n    this.prefix = prefix;\n  }\n  /**\n   * Creates a DirectSecp256k1Wallet from the given private key\n   *\n   * @param privkey The private key.\n   * @param prefix The bech32 address prefix (human readable part). Defaults to \"cosmos\".\n   */\n  static async fromKey(privkey) {\n    let prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"cosmos\";\n    const uncompressed = (await crypto_1.Secp256k1.makeKeypair(privkey)).pubkey;\n    return new DirectSecp256k1Wallet(privkey, crypto_1.Secp256k1.compressPubkey(uncompressed), prefix);\n  }\n  get address() {\n    return launchpad_1.rawSecp256k1PubkeyToAddress(this.pubkey, this.prefix);\n  }\n  async getAccounts() {\n    return [{\n      algo: \"secp256k1\",\n      address: this.address,\n      pubkey: this.pubkey\n    }];\n  }\n  async signDirect(address, signDoc) {\n    const signBytes = signing_1.makeSignBytes(signDoc);\n    if (address !== this.address) {\n      throw new Error(`Address ${address} not found in wallet`);\n    }\n    const hashedMessage = crypto_1.sha256(signBytes);\n    const signature = await crypto_1.Secp256k1.createSignature(hashedMessage, this.privkey);\n    const signatureBytes = new Uint8Array([...signature.r(32), ...signature.s(32)]);\n    const stdSignature = launchpad_1.encodeSecp256k1Signature(this.pubkey, signatureBytes);\n    return {\n      signed: signDoc,\n      signature: stdSignature\n    };\n  }\n}\nexports.DirectSecp256k1Wallet = DirectSecp256k1Wallet;","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AAIA;AAEA;;;;;AAKA,MAAaA,qBAAqB;EAgBhCC,YAAoBC,OAAmB,EAAEC,MAAkB,EAAEC,MAAc;IACzE,IAAI,CAACF,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,MAAM,GAAGA,MAAM;EACtB;EAnBA;;;;;;EAMO,aAAaC,OAAO,CAACH,OAAmB,EAAmB;IAAA,IAAjBE,MAAM,uEAAG,QAAQ;IAChE,MAAME,YAAY,GAAG,CAAC,MAAMC,kBAAS,CAACC,WAAW,CAACN,OAAO,CAAC,EAAEC,MAAM;IAClE,OAAO,IAAIH,qBAAqB,CAACE,OAAO,EAAEK,kBAAS,CAACE,cAAc,CAACH,YAAY,CAAC,EAAEF,MAAM,CAAC;EAC3F;EAYA,IAAYM,OAAO;IACjB,OAAOC,uCAA2B,CAAC,IAAI,CAACR,MAAM,EAAE,IAAI,CAACC,MAAM,CAAC;EAC9D;EAEO,MAAMQ,WAAW;IACtB,OAAO,CACL;MACEC,IAAI,EAAE,WAAW;MACjBH,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBP,MAAM,EAAE,IAAI,CAACA;KACd,CACF;EACH;EAEO,MAAMW,UAAU,CAACJ,OAAe,EAAEK,OAAgB;IACvD,MAAMC,SAAS,GAAGC,uBAAa,CAACF,OAAO,CAAC;IACxC,IAAIL,OAAO,KAAK,IAAI,CAACA,OAAO,EAAE;MAC5B,MAAM,IAAIQ,KAAK,CAAC,WAAWR,OAAO,sBAAsB,CAAC;;IAE3D,MAAMS,aAAa,GAAGZ,eAAM,CAACS,SAAS,CAAC;IACvC,MAAMI,SAAS,GAAG,MAAMb,kBAAS,CAACc,eAAe,CAACF,aAAa,EAAE,IAAI,CAACjB,OAAO,CAAC;IAC9E,MAAMoB,cAAc,GAAG,IAAIC,UAAU,CAAC,CAAC,GAAGH,SAAS,CAACI,CAAC,CAAC,EAAE,CAAC,EAAE,GAAGJ,SAAS,CAACK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC/E,MAAMC,YAAY,GAAGf,oCAAwB,CAAC,IAAI,CAACR,MAAM,EAAEmB,cAAc,CAAC;IAC1E,OAAO;MACLK,MAAM,EAAEZ,OAAO;MACfK,SAAS,EAAEM;KACZ;EACH;;AAjDFE","names":["DirectSecp256k1Wallet","constructor","privkey","pubkey","prefix","fromKey","uncompressed","crypto_1","makeKeypair","compressPubkey","address","launchpad_1","getAccounts","algo","signDirect","signDoc","signBytes","signing_1","Error","hashedMessage","signature","createSignature","signatureBytes","Uint8Array","r","s","stdSignature","signed","exports"],"sources":["../src/directsecp256k1wallet.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}