{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst encoding_1 = require(\"./encoding\");\nconst typechecks_1 = require(\"./typechecks\");\nconst prefixes = {\n  string: \"string:\",\n  bytes: \"bytes:\"\n};\n/**\n * Encodes non-circular JavaScript objects and primitives into JSON.\n * Used for encoding/decoding transactions but works for kind of data consisting of the supported types.\n *\n * Supported types:\n * - boolean\n * - number\n * - null\n * - object\n * - Array\n * - string\n * - Uint8Array\n */\nclass TransactionEncoder {\n  static toJson(data) {\n    if (typeof data === \"number\" || typeof data === \"boolean\") {\n      return data;\n    }\n    if (data === null) {\n      return null;\n    }\n    if (typeof data === \"string\") {\n      return `${prefixes.string}${data}`;\n    }\n    if (typechecks_1.isUint8Array(data)) {\n      return `${prefixes.bytes}${encoding_1.Encoding.toHex(data)}`;\n    }\n    if (Array.isArray(data)) {\n      return data.map(TransactionEncoder.toJson);\n    }\n    // Exclude special kind of objects like Array, Date or Uint8Array\n    // Object.prototype.toString() returns a specified value:\n    // http://www.ecma-international.org/ecma-262/7.0/index.html#sec-object.prototype.tostring\n    if (typeof data === \"object\" && data !== null && Object.prototype.toString.call(data) === \"[object Object]\") {\n      const out = {};\n      for (const key of Object.keys(data)) {\n        const value = data[key];\n        // Skip dictionary entries with value `undefined`, just like native JSON:\n        // > JSON.stringify({ foo: undefined })\n        // '{}'\n        if (value === undefined) continue;\n        // tslint:disable-next-line: no-object-mutation\n        out[key] = TransactionEncoder.toJson(value);\n      }\n      return out;\n    }\n    throw new Error(\"Cannot encode type to JSON\");\n  }\n  static fromJson(data) {\n    if (typeof data === \"number\" || typeof data === \"boolean\") {\n      return data;\n    }\n    if (data === null) {\n      return null;\n    }\n    if (typeof data === \"string\") {\n      if (data.startsWith(prefixes.string)) {\n        return data.slice(prefixes.string.length);\n      }\n      if (data.startsWith(prefixes.bytes)) {\n        return encoding_1.Encoding.fromHex(data.slice(prefixes.bytes.length));\n      }\n      throw new Error(\"Found string with unknown prefix\");\n    }\n    if (Array.isArray(data)) {\n      return data.map(TransactionEncoder.fromJson);\n    }\n    // Exclude special kind of objects like Array, Date or Uint8Array\n    // Object.prototype.toString() returns a specified value:\n    // http://www.ecma-international.org/ecma-262/7.0/index.html#sec-object.prototype.tostring\n    if (typeof data === \"object\" && data !== null && Object.prototype.toString.call(data) === \"[object Object]\") {\n      const out = {};\n      for (const key of Object.keys(data)) {\n        // tslint:disable-next-line: no-object-mutation\n        out[key] = TransactionEncoder.fromJson(data[key]);\n      }\n      return out;\n    }\n    throw new Error(\"Cannot decode type from JSON\");\n  }\n}\nexports.TransactionEncoder = TransactionEncoder;","map":{"version":3,"mappings":"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","names":["prefixes","string","bytes","TransactionEncoder","toJson","data","typechecks_1","encoding_1","toHex","Array","isArray","map","Object","prototype","toString","call","out","key","keys","value","undefined","Error","fromJson","startsWith","slice","length","fromHex","exports"],"sources":["../src/transactionencoder.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}