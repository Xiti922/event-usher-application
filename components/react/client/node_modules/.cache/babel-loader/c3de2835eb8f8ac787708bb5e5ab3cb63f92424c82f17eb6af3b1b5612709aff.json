{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SigningStargateClient = exports.defaultRegistryTypes = void 0;\nconst amino_1 = require(\"@cosmjs/amino\");\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst math_1 = require(\"@cosmjs/math\");\nconst proto_signing_1 = require(\"@cosmjs/proto-signing\");\nconst tendermint_rpc_1 = require(\"@cosmjs/tendermint-rpc\");\nconst utils_1 = require(\"@cosmjs/utils\");\nconst coin_1 = require(\"cosmjs-types/cosmos/base/v1beta1/coin\");\nconst tx_1 = require(\"cosmjs-types/cosmos/distribution/v1beta1/tx\");\nconst tx_2 = require(\"cosmjs-types/cosmos/staking/v1beta1/tx\");\nconst signing_1 = require(\"cosmjs-types/cosmos/tx/signing/v1beta1/signing\");\nconst tx_3 = require(\"cosmjs-types/cosmos/tx/v1beta1/tx\");\nconst tx_4 = require(\"cosmjs-types/ibc/applications/transfer/v1/tx\");\nconst long_1 = __importDefault(require(\"long\"));\nconst aminotypes_1 = require(\"./aminotypes\");\nconst fee_1 = require(\"./fee\");\nconst modules_1 = require(\"./modules\");\nconst modules_2 = require(\"./modules\");\nconst stargateclient_1 = require(\"./stargateclient\");\nexports.defaultRegistryTypes = [[\"/cosmos.base.v1beta1.Coin\", coin_1.Coin], ...modules_1.authzTypes, ...modules_1.bankTypes, ...modules_1.distributionTypes, ...modules_1.feegrantTypes, ...modules_1.govTypes, ...modules_1.stakingTypes, ...modules_1.ibcTypes, ...modules_1.vestingTypes];\nfunction createDefaultRegistry() {\n  return new proto_signing_1.Registry(exports.defaultRegistryTypes);\n}\nfunction createDefaultTypes(prefix) {\n  return {\n    ...(0, modules_2.createAuthzAminoConverters)(),\n    ...(0, modules_2.createBankAminoConverters)(),\n    ...(0, modules_2.createDistributionAminoConverters)(),\n    ...(0, modules_2.createGovAminoConverters)(),\n    ...(0, modules_2.createStakingAminoConverters)(prefix),\n    ...(0, modules_2.createIbcAminoConverters)(),\n    ...(0, modules_2.createFeegrantAminoConverters)(),\n    ...(0, modules_2.createVestingAminoConverters)()\n  };\n}\nclass SigningStargateClient extends stargateclient_1.StargateClient {\n  constructor(tmClient, signer, options) {\n    var _a;\n    super(tmClient, options);\n    // TODO: do we really want to set a default here? Ideally we could get it from the signer such that users only have to set it once.\n    const prefix = (_a = options.prefix) !== null && _a !== void 0 ? _a : \"cosmos\";\n    const {\n      registry = createDefaultRegistry(),\n      aminoTypes = new aminotypes_1.AminoTypes(createDefaultTypes(prefix))\n    } = options;\n    this.registry = registry;\n    this.aminoTypes = aminoTypes;\n    this.signer = signer;\n    this.broadcastTimeoutMs = options.broadcastTimeoutMs;\n    this.broadcastPollIntervalMs = options.broadcastPollIntervalMs;\n    this.gasPrice = options.gasPrice;\n  }\n  static async connectWithSigner(endpoint, signer) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const tmClient = await tendermint_rpc_1.Tendermint34Client.connect(endpoint);\n    return new SigningStargateClient(tmClient, signer, options);\n  }\n  /**\n   * Creates a client in offline mode.\n   *\n   * This should only be used in niche cases where you know exactly what you're doing,\n   * e.g. when building an offline signing application.\n   *\n   * When you try to use online functionality with such a signer, an\n   * exception will be raised.\n   */\n  static async offline(signer) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return new SigningStargateClient(undefined, signer, options);\n  }\n  async simulate(signerAddress, messages, memo) {\n    const anyMsgs = messages.map(m => this.registry.encodeAsAny(m));\n    const accountFromSigner = (await this.signer.getAccounts()).find(account => account.address === signerAddress);\n    if (!accountFromSigner) {\n      throw new Error(\"Failed to retrieve account from signer\");\n    }\n    const pubkey = (0, amino_1.encodeSecp256k1Pubkey)(accountFromSigner.pubkey);\n    const {\n      sequence\n    } = await this.getSequence(signerAddress);\n    const {\n      gasInfo\n    } = await this.forceGetQueryClient().tx.simulate(anyMsgs, memo, pubkey, sequence);\n    (0, utils_1.assertDefined)(gasInfo);\n    return math_1.Uint53.fromString(gasInfo.gasUsed.toString()).toNumber();\n  }\n  async sendTokens(senderAddress, recipientAddress, amount, fee) {\n    let memo = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : \"\";\n    const sendMsg = {\n      typeUrl: \"/cosmos.bank.v1beta1.MsgSend\",\n      value: {\n        fromAddress: senderAddress,\n        toAddress: recipientAddress,\n        amount: [...amount]\n      }\n    };\n    return this.signAndBroadcast(senderAddress, [sendMsg], fee, memo);\n  }\n  async delegateTokens(delegatorAddress, validatorAddress, amount, fee) {\n    let memo = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : \"\";\n    const delegateMsg = {\n      typeUrl: \"/cosmos.staking.v1beta1.MsgDelegate\",\n      value: tx_2.MsgDelegate.fromPartial({\n        delegatorAddress: delegatorAddress,\n        validatorAddress: validatorAddress,\n        amount: amount\n      })\n    };\n    return this.signAndBroadcast(delegatorAddress, [delegateMsg], fee, memo);\n  }\n  async undelegateTokens(delegatorAddress, validatorAddress, amount, fee) {\n    let memo = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : \"\";\n    const undelegateMsg = {\n      typeUrl: \"/cosmos.staking.v1beta1.MsgUndelegate\",\n      value: tx_2.MsgUndelegate.fromPartial({\n        delegatorAddress: delegatorAddress,\n        validatorAddress: validatorAddress,\n        amount: amount\n      })\n    };\n    return this.signAndBroadcast(delegatorAddress, [undelegateMsg], fee, memo);\n  }\n  async withdrawRewards(delegatorAddress, validatorAddress, fee) {\n    let memo = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"\";\n    const withdrawMsg = {\n      typeUrl: \"/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward\",\n      value: tx_1.MsgWithdrawDelegatorReward.fromPartial({\n        delegatorAddress: delegatorAddress,\n        validatorAddress: validatorAddress\n      })\n    };\n    return this.signAndBroadcast(delegatorAddress, [withdrawMsg], fee, memo);\n  }\n  async sendIbcTokens(senderAddress, recipientAddress, transferAmount, sourcePort, sourceChannel, timeoutHeight, /** timeout in seconds */\n  timeoutTimestamp, fee) {\n    let memo = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : \"\";\n    const timeoutTimestampNanoseconds = timeoutTimestamp ? long_1.default.fromNumber(timeoutTimestamp).multiply(1000000000) : undefined;\n    const transferMsg = {\n      typeUrl: \"/ibc.applications.transfer.v1.MsgTransfer\",\n      value: tx_4.MsgTransfer.fromPartial({\n        sourcePort: sourcePort,\n        sourceChannel: sourceChannel,\n        sender: senderAddress,\n        receiver: recipientAddress,\n        token: transferAmount,\n        timeoutHeight: timeoutHeight,\n        timeoutTimestamp: timeoutTimestampNanoseconds\n      })\n    };\n    return this.signAndBroadcast(senderAddress, [transferMsg], fee, memo);\n  }\n  async signAndBroadcast(signerAddress, messages, fee) {\n    let memo = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"\";\n    let usedFee;\n    if (fee == \"auto\" || typeof fee === \"number\") {\n      (0, utils_1.assertDefined)(this.gasPrice, \"Gas price must be set in the client options when auto gas is used.\");\n      const gasEstimation = await this.simulate(signerAddress, messages, memo);\n      const multiplier = typeof fee === \"number\" ? fee : 1.3;\n      usedFee = (0, fee_1.calculateFee)(Math.round(gasEstimation * multiplier), this.gasPrice);\n    } else {\n      usedFee = fee;\n    }\n    const txRaw = await this.sign(signerAddress, messages, usedFee, memo);\n    const txBytes = tx_3.TxRaw.encode(txRaw).finish();\n    return this.broadcastTx(txBytes, this.broadcastTimeoutMs, this.broadcastPollIntervalMs);\n  }\n  /**\n   * Gets account number and sequence from the API, creates a sign doc,\n   * creates a single signature and assembles the signed transaction.\n   *\n   * The sign mode (SIGN_MODE_DIRECT or SIGN_MODE_LEGACY_AMINO_JSON) is determined by this client's signer.\n   *\n   * You can pass signer data (account number, sequence and chain ID) explicitly instead of querying them\n   * from the chain. This is needed when signing for a multisig account, but it also allows for offline signing\n   * (See the SigningStargateClient.offline constructor).\n   */\n  async sign(signerAddress, messages, fee, memo, explicitSignerData) {\n    let signerData;\n    if (explicitSignerData) {\n      signerData = explicitSignerData;\n    } else {\n      const {\n        accountNumber,\n        sequence\n      } = await this.getSequence(signerAddress);\n      const chainId = await this.getChainId();\n      signerData = {\n        accountNumber: accountNumber,\n        sequence: sequence,\n        chainId: chainId\n      };\n    }\n    return (0, proto_signing_1.isOfflineDirectSigner)(this.signer) ? this.signDirect(signerAddress, messages, fee, memo, signerData) : this.signAmino(signerAddress, messages, fee, memo, signerData);\n  }\n  async signAmino(signerAddress, messages, fee, memo, _ref) {\n    let {\n      accountNumber,\n      sequence,\n      chainId\n    } = _ref;\n    (0, utils_1.assert)(!(0, proto_signing_1.isOfflineDirectSigner)(this.signer));\n    const accountFromSigner = (await this.signer.getAccounts()).find(account => account.address === signerAddress);\n    if (!accountFromSigner) {\n      throw new Error(\"Failed to retrieve account from signer\");\n    }\n    const pubkey = (0, proto_signing_1.encodePubkey)((0, amino_1.encodeSecp256k1Pubkey)(accountFromSigner.pubkey));\n    const signMode = signing_1.SignMode.SIGN_MODE_LEGACY_AMINO_JSON;\n    const msgs = messages.map(msg => this.aminoTypes.toAmino(msg));\n    const signDoc = (0, amino_1.makeSignDoc)(msgs, fee, chainId, memo, accountNumber, sequence);\n    const {\n      signature,\n      signed\n    } = await this.signer.signAmino(signerAddress, signDoc);\n    const signedTxBody = {\n      messages: signed.msgs.map(msg => this.aminoTypes.fromAmino(msg)),\n      memo: signed.memo\n    };\n    const signedTxBodyEncodeObject = {\n      typeUrl: \"/cosmos.tx.v1beta1.TxBody\",\n      value: signedTxBody\n    };\n    const signedTxBodyBytes = this.registry.encode(signedTxBodyEncodeObject);\n    const signedGasLimit = math_1.Int53.fromString(signed.fee.gas).toNumber();\n    const signedSequence = math_1.Int53.fromString(signed.sequence).toNumber();\n    const signedAuthInfoBytes = (0, proto_signing_1.makeAuthInfoBytes)([{\n      pubkey,\n      sequence: signedSequence\n    }], signed.fee.amount, signedGasLimit, signed.fee.granter, signed.fee.payer, signMode);\n    return tx_3.TxRaw.fromPartial({\n      bodyBytes: signedTxBodyBytes,\n      authInfoBytes: signedAuthInfoBytes,\n      signatures: [(0, encoding_1.fromBase64)(signature.signature)]\n    });\n  }\n  async signDirect(signerAddress, messages, fee, memo, _ref2) {\n    let {\n      accountNumber,\n      sequence,\n      chainId\n    } = _ref2;\n    (0, utils_1.assert)((0, proto_signing_1.isOfflineDirectSigner)(this.signer));\n    const accountFromSigner = (await this.signer.getAccounts()).find(account => account.address === signerAddress);\n    if (!accountFromSigner) {\n      throw new Error(\"Failed to retrieve account from signer\");\n    }\n    const pubkey = (0, proto_signing_1.encodePubkey)((0, amino_1.encodeSecp256k1Pubkey)(accountFromSigner.pubkey));\n    const txBodyEncodeObject = {\n      typeUrl: \"/cosmos.tx.v1beta1.TxBody\",\n      value: {\n        messages: messages,\n        memo: memo\n      }\n    };\n    const txBodyBytes = this.registry.encode(txBodyEncodeObject);\n    const gasLimit = math_1.Int53.fromString(fee.gas).toNumber();\n    const authInfoBytes = (0, proto_signing_1.makeAuthInfoBytes)([{\n      pubkey,\n      sequence\n    }], fee.amount, gasLimit, fee.granter, fee.payer);\n    const signDoc = (0, proto_signing_1.makeSignDoc)(txBodyBytes, authInfoBytes, chainId, accountNumber);\n    const {\n      signature,\n      signed\n    } = await this.signer.signDirect(signerAddress, signDoc);\n    return tx_3.TxRaw.fromPartial({\n      bodyBytes: signed.bodyBytes,\n      authInfoBytes: signed.authInfoBytes,\n      signatures: [(0, encoding_1.fromBase64)(signature.signature)]\n    });\n  }\n}\nexports.SigningStargateClient = SigningStargateClient;","map":{"version":3,"mappings":";;;;;;;;;;;AAAA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAeA;AAUA;AAEaA,4BAAoB,GAA2C,CAC1E,CAAC,2BAA2B,EAAEC,WAAI,CAAC,EACnC,GAAGC,oBAAU,EACb,GAAGA,mBAAS,EACZ,GAAGA,2BAAiB,EACpB,GAAGA,uBAAa,EAChB,GAAGA,kBAAQ,EACX,GAAGA,sBAAY,EACf,GAAGA,kBAAQ,EACX,GAAGA,sBAAY,CAChB;AAED,SAASC,qBAAqB;EAC5B,OAAO,IAAIC,wBAAQ,CAACJ,4BAAoB,CAAC;AAC3C;AA2BA,SAASK,kBAAkB,CAACC,MAAc;EACxC,OAAO;IACL,GAAG,wCAA0B,GAAE;IAC/B,GAAG,uCAAyB,GAAE;IAC9B,GAAG,+CAAiC,GAAE;IACtC,GAAG,sCAAwB,GAAE;IAC7B,GAAG,0CAA4B,EAACA,MAAM,CAAC;IACvC,GAAG,sCAAwB,GAAE;IAC7B,GAAG,2CAA6B,GAAE;IAClC,GAAG,0CAA4B;GAChC;AACH;AAEA,MAAaC,qBAAsB,SAAQC,+BAAc;EAkCvDC,YACEC,QAAwC,EACxCC,MAAqB,EACrBC,OAAqC;;IAErC,KAAK,CAACF,QAAQ,EAAEE,OAAO,CAAC;IACxB;IACA,MAAMN,MAAM,GAAG,aAAO,CAACA,MAAM,mCAAI,QAAQ;IACzC,MAAM;MAAEO,QAAQ,GAAGV,qBAAqB,EAAE;MAAEW,UAAU,GAAG,IAAIC,uBAAU,CAACV,kBAAkB,CAACC,MAAM,CAAC;IAAC,CAAE,GACnGM,OAAO;IACT,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACH,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACK,kBAAkB,GAAGJ,OAAO,CAACI,kBAAkB;IACpD,IAAI,CAACC,uBAAuB,GAAGL,OAAO,CAACK,uBAAuB;IAC9D,IAAI,CAACC,QAAQ,GAAGN,OAAO,CAACM,QAAQ;EAClC;EAzCO,aAAaC,iBAAiB,CACnCC,QAA+B,EAC/BT,MAAqB,EACqB;IAAA,IAA1CC,8EAAwC,EAAE;IAE1C,MAAMF,QAAQ,GAAG,MAAMW,mCAAkB,CAACC,OAAO,CAACF,QAAQ,CAAC;IAC3D,OAAO,IAAIb,qBAAqB,CAACG,QAAQ,EAAEC,MAAM,EAAEC,OAAO,CAAC;EAC7D;EAEA;;;;;;;;;EASO,aAAaW,OAAO,CACzBZ,MAAqB,EACqB;IAAA,IAA1CC,8EAAwC,EAAE;IAE1C,OAAO,IAAIL,qBAAqB,CAACiB,SAAS,EAAEb,MAAM,EAAEC,OAAO,CAAC;EAC9D;EAoBO,MAAMa,QAAQ,CACnBC,aAAqB,EACrBC,QAAiC,EACjCC,IAAwB;IAExB,MAAMC,OAAO,GAAGF,QAAQ,CAACG,GAAG,CAAEC,CAAC,IAAK,IAAI,CAAClB,QAAQ,CAACmB,WAAW,CAACD,CAAC,CAAC,CAAC;IACjE,MAAME,iBAAiB,GAAG,CAAC,MAAM,IAAI,CAACtB,MAAM,CAACuB,WAAW,EAAE,EAAEC,IAAI,CAC7DC,OAAO,IAAKA,OAAO,CAACC,OAAO,KAAKX,aAAa,CAC/C;IACD,IAAI,CAACO,iBAAiB,EAAE;MACtB,MAAM,IAAIK,KAAK,CAAC,wCAAwC,CAAC;;IAE3D,MAAMC,MAAM,GAAG,iCAAqB,EAACN,iBAAiB,CAACM,MAAM,CAAC;IAC9D,MAAM;MAAEC;IAAQ,CAAE,GAAG,MAAM,IAAI,CAACC,WAAW,CAACf,aAAa,CAAC;IAC1D,MAAM;MAAEgB;IAAO,CAAE,GAAG,MAAM,IAAI,CAACC,mBAAmB,EAAE,CAACC,EAAE,CAACnB,QAAQ,CAACI,OAAO,EAAED,IAAI,EAAEW,MAAM,EAAEC,QAAQ,CAAC;IACjG,yBAAa,EAACE,OAAO,CAAC;IACtB,OAAOG,aAAM,CAACC,UAAU,CAACJ,OAAO,CAACK,OAAO,CAACC,QAAQ,EAAE,CAAC,CAACC,QAAQ,EAAE;EACjE;EAEO,MAAMC,UAAU,CACrBC,aAAqB,EACrBC,gBAAwB,EACxBC,MAAuB,EACvBC,GAA6B,EACpB;IAAA,IAAT1B,IAAI,uEAAG,EAAE;IAET,MAAM2B,OAAO,GAAwB;MACnCC,OAAO,EAAE,8BAA8B;MACvCC,KAAK,EAAE;QACLC,WAAW,EAAEP,aAAa;QAC1BQ,SAAS,EAAEP,gBAAgB;QAC3BC,MAAM,EAAE,CAAC,GAAGA,MAAM;;KAErB;IACD,OAAO,IAAI,CAACO,gBAAgB,CAACT,aAAa,EAAE,CAACI,OAAO,CAAC,EAAED,GAAG,EAAE1B,IAAI,CAAC;EACnE;EAEO,MAAMiC,cAAc,CACzBC,gBAAwB,EACxBC,gBAAwB,EACxBV,MAAY,EACZC,GAA6B,EACpB;IAAA,IAAT1B,IAAI,uEAAG,EAAE;IAET,MAAMoC,WAAW,GAA4B;MAC3CR,OAAO,EAAE,qCAAqC;MAC9CC,KAAK,EAAEQ,gBAAW,CAACC,WAAW,CAAC;QAC7BJ,gBAAgB,EAAEA,gBAAgB;QAClCC,gBAAgB,EAAEA,gBAAgB;QAClCV,MAAM,EAAEA;OACT;KACF;IACD,OAAO,IAAI,CAACO,gBAAgB,CAACE,gBAAgB,EAAE,CAACE,WAAW,CAAC,EAAEV,GAAG,EAAE1B,IAAI,CAAC;EAC1E;EAEO,MAAMuC,gBAAgB,CAC3BL,gBAAwB,EACxBC,gBAAwB,EACxBV,MAAY,EACZC,GAA6B,EACpB;IAAA,IAAT1B,IAAI,uEAAG,EAAE;IAET,MAAMwC,aAAa,GAA8B;MAC/CZ,OAAO,EAAE,uCAAuC;MAChDC,KAAK,EAAEQ,kBAAa,CAACC,WAAW,CAAC;QAC/BJ,gBAAgB,EAAEA,gBAAgB;QAClCC,gBAAgB,EAAEA,gBAAgB;QAClCV,MAAM,EAAEA;OACT;KACF;IACD,OAAO,IAAI,CAACO,gBAAgB,CAACE,gBAAgB,EAAE,CAACM,aAAa,CAAC,EAAEd,GAAG,EAAE1B,IAAI,CAAC;EAC5E;EAEO,MAAMyC,eAAe,CAC1BP,gBAAwB,EACxBC,gBAAwB,EACxBT,GAA6B,EACpB;IAAA,IAAT1B,IAAI,uEAAG,EAAE;IAET,MAAM0C,WAAW,GAA2C;MAC1Dd,OAAO,EAAE,yDAAyD;MAClEC,KAAK,EAAEc,+BAA0B,CAACL,WAAW,CAAC;QAC5CJ,gBAAgB,EAAEA,gBAAgB;QAClCC,gBAAgB,EAAEA;OACnB;KACF;IACD,OAAO,IAAI,CAACH,gBAAgB,CAACE,gBAAgB,EAAE,CAACQ,WAAW,CAAC,EAAEhB,GAAG,EAAE1B,IAAI,CAAC;EAC1E;EAEO,MAAM4C,aAAa,CACxBrB,aAAqB,EACrBC,gBAAwB,EACxBqB,cAAoB,EACpBC,UAAkB,EAClBC,aAAqB,EACrBC,aAAiC,EACjC;EACAC,gBAAoC,EACpCvB,GAA6B,EACpB;IAAA,IAAT1B,IAAI,uEAAG,EAAE;IAET,MAAMkD,2BAA2B,GAAGD,gBAAgB,GAChDE,cAAI,CAACC,UAAU,CAACH,gBAAgB,CAAC,CAACI,QAAQ,CAAC,UAAa,CAAC,GACzDzD,SAAS;IACb,MAAM0D,WAAW,GAA4B;MAC3C1B,OAAO,EAAE,2CAA2C;MACpDC,KAAK,EAAE0B,gBAAW,CAACjB,WAAW,CAAC;QAC7BQ,UAAU,EAAEA,UAAU;QACtBC,aAAa,EAAEA,aAAa;QAC5BS,MAAM,EAAEjC,aAAa;QACrBkC,QAAQ,EAAEjC,gBAAgB;QAC1BkC,KAAK,EAAEb,cAAc;QACrBG,aAAa,EAAEA,aAAa;QAC5BC,gBAAgB,EAAEC;OACnB;KACF;IACD,OAAO,IAAI,CAAClB,gBAAgB,CAACT,aAAa,EAAE,CAAC+B,WAAW,CAAC,EAAE5B,GAAG,EAAE1B,IAAI,CAAC;EACvE;EAEO,MAAMgC,gBAAgB,CAC3BlC,aAAqB,EACrBC,QAAiC,EACjC2B,GAA6B,EACpB;IAAA,IAAT1B,IAAI,uEAAG,EAAE;IAET,IAAI2D,OAAe;IACnB,IAAIjC,GAAG,IAAI,MAAM,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;MAC5C,yBAAa,EAAC,IAAI,CAACpC,QAAQ,EAAE,oEAAoE,CAAC;MAClG,MAAMsE,aAAa,GAAG,MAAM,IAAI,CAAC/D,QAAQ,CAACC,aAAa,EAAEC,QAAQ,EAAEC,IAAI,CAAC;MACxE,MAAM6D,UAAU,GAAG,OAAOnC,GAAG,KAAK,QAAQ,GAAGA,GAAG,GAAG,GAAG;MACtDiC,OAAO,GAAG,sBAAY,EAACG,IAAI,CAACC,KAAK,CAACH,aAAa,GAAGC,UAAU,CAAC,EAAE,IAAI,CAACvE,QAAQ,CAAC;KAC9E,MAAM;MACLqE,OAAO,GAAGjC,GAAG;;IAEf,MAAMsC,KAAK,GAAG,MAAM,IAAI,CAACC,IAAI,CAACnE,aAAa,EAAEC,QAAQ,EAAE4D,OAAO,EAAE3D,IAAI,CAAC;IACrE,MAAMkE,OAAO,GAAGC,UAAK,CAACC,MAAM,CAACJ,KAAK,CAAC,CAACK,MAAM,EAAE;IAC5C,OAAO,IAAI,CAACC,WAAW,CAACJ,OAAO,EAAE,IAAI,CAAC9E,kBAAkB,EAAE,IAAI,CAACC,uBAAuB,CAAC;EACzF;EAEA;;;;;;;;;;EAUO,MAAM4E,IAAI,CACfnE,aAAqB,EACrBC,QAAiC,EACjC2B,GAAW,EACX1B,IAAY,EACZuE,kBAA+B;IAE/B,IAAIC,UAAsB;IAC1B,IAAID,kBAAkB,EAAE;MACtBC,UAAU,GAAGD,kBAAkB;KAChC,MAAM;MACL,MAAM;QAAEE,aAAa;QAAE7D;MAAQ,CAAE,GAAG,MAAM,IAAI,CAACC,WAAW,CAACf,aAAa,CAAC;MACzE,MAAM4E,OAAO,GAAG,MAAM,IAAI,CAACC,UAAU,EAAE;MACvCH,UAAU,GAAG;QACXC,aAAa,EAAEA,aAAa;QAC5B7D,QAAQ,EAAEA,QAAQ;QAClB8D,OAAO,EAAEA;OACV;;IAGH,OAAO,yCAAqB,EAAC,IAAI,CAAC3F,MAAM,CAAC,GACrC,IAAI,CAAC6F,UAAU,CAAC9E,aAAa,EAAEC,QAAQ,EAAE2B,GAAG,EAAE1B,IAAI,EAAEwE,UAAU,CAAC,GAC/D,IAAI,CAACK,SAAS,CAAC/E,aAAa,EAAEC,QAAQ,EAAE2B,GAAG,EAAE1B,IAAI,EAAEwE,UAAU,CAAC;EACpE;EAEQ,MAAMK,SAAS,CACrB/E,aAAqB,EACrBC,QAAiC,EACjC2B,GAAW,EACX1B,IAAY,QACoC;IAAA,IAAhD;MAAEyE,aAAa;MAAE7D,QAAQ;MAAE8D;IAAO,CAAc;IAEhD,kBAAM,EAAC,CAAC,yCAAqB,EAAC,IAAI,CAAC3F,MAAM,CAAC,CAAC;IAC3C,MAAMsB,iBAAiB,GAAG,CAAC,MAAM,IAAI,CAACtB,MAAM,CAACuB,WAAW,EAAE,EAAEC,IAAI,CAC7DC,OAAO,IAAKA,OAAO,CAACC,OAAO,KAAKX,aAAa,CAC/C;IACD,IAAI,CAACO,iBAAiB,EAAE;MACtB,MAAM,IAAIK,KAAK,CAAC,wCAAwC,CAAC;;IAE3D,MAAMC,MAAM,GAAG,gCAAY,EAAC,iCAAqB,EAACN,iBAAiB,CAACM,MAAM,CAAC,CAAC;IAC5E,MAAMmE,QAAQ,GAAGC,kBAAQ,CAACC,2BAA2B;IACrD,MAAMC,IAAI,GAAGlF,QAAQ,CAACG,GAAG,CAAEgF,GAAG,IAAK,IAAI,CAAChG,UAAU,CAACiG,OAAO,CAACD,GAAG,CAAC,CAAC;IAChE,MAAME,OAAO,GAAG,uBAAgB,EAACH,IAAI,EAAEvD,GAAG,EAAEgD,OAAO,EAAE1E,IAAI,EAAEyE,aAAa,EAAE7D,QAAQ,CAAC;IACnF,MAAM;MAAEyE,SAAS;MAAEC;IAAM,CAAE,GAAG,MAAM,IAAI,CAACvG,MAAM,CAAC8F,SAAS,CAAC/E,aAAa,EAAEsF,OAAO,CAAC;IACjF,MAAMG,YAAY,GAAG;MACnBxF,QAAQ,EAAEuF,MAAM,CAACL,IAAI,CAAC/E,GAAG,CAAEgF,GAAG,IAAK,IAAI,CAAChG,UAAU,CAACsG,SAAS,CAACN,GAAG,CAAC,CAAC;MAClElF,IAAI,EAAEsF,MAAM,CAACtF;KACd;IACD,MAAMyF,wBAAwB,GAAuB;MACnD7D,OAAO,EAAE,2BAA2B;MACpCC,KAAK,EAAE0D;KACR;IACD,MAAMG,iBAAiB,GAAG,IAAI,CAACzG,QAAQ,CAACmF,MAAM,CAACqB,wBAAwB,CAAC;IACxE,MAAME,cAAc,GAAG1E,YAAK,CAACC,UAAU,CAACoE,MAAM,CAAC5D,GAAG,CAACkE,GAAG,CAAC,CAACvE,QAAQ,EAAE;IAClE,MAAMwE,cAAc,GAAG5E,YAAK,CAACC,UAAU,CAACoE,MAAM,CAAC1E,QAAQ,CAAC,CAACS,QAAQ,EAAE;IACnE,MAAMyE,mBAAmB,GAAG,qCAAiB,EAC3C,CAAC;MAAEnF,MAAM;MAAEC,QAAQ,EAAEiF;IAAc,CAAE,CAAC,EACtCP,MAAM,CAAC5D,GAAG,CAACD,MAAM,EACjBkE,cAAc,EACdL,MAAM,CAAC5D,GAAG,CAACqE,OAAO,EAClBT,MAAM,CAAC5D,GAAG,CAACsE,KAAK,EAChBlB,QAAQ,CACT;IACD,OAAOX,UAAK,CAAC7B,WAAW,CAAC;MACvB2D,SAAS,EAAEP,iBAAiB;MAC5BQ,aAAa,EAAEJ,mBAAmB;MAClCK,UAAU,EAAE,CAAC,yBAAU,EAACd,SAAS,CAACA,SAAS,CAAC;KAC7C,CAAC;EACJ;EAEQ,MAAMT,UAAU,CACtB9E,aAAqB,EACrBC,QAAiC,EACjC2B,GAAW,EACX1B,IAAY,SACoC;IAAA,IAAhD;MAAEyE,aAAa;MAAE7D,QAAQ;MAAE8D;IAAO,CAAc;IAEhD,kBAAM,EAAC,yCAAqB,EAAC,IAAI,CAAC3F,MAAM,CAAC,CAAC;IAC1C,MAAMsB,iBAAiB,GAAG,CAAC,MAAM,IAAI,CAACtB,MAAM,CAACuB,WAAW,EAAE,EAAEC,IAAI,CAC7DC,OAAO,IAAKA,OAAO,CAACC,OAAO,KAAKX,aAAa,CAC/C;IACD,IAAI,CAACO,iBAAiB,EAAE;MACtB,MAAM,IAAIK,KAAK,CAAC,wCAAwC,CAAC;;IAE3D,MAAMC,MAAM,GAAG,gCAAY,EAAC,iCAAqB,EAACN,iBAAiB,CAACM,MAAM,CAAC,CAAC;IAC5E,MAAMyF,kBAAkB,GAAuB;MAC7CxE,OAAO,EAAE,2BAA2B;MACpCC,KAAK,EAAE;QACL9B,QAAQ,EAAEA,QAAQ;QAClBC,IAAI,EAAEA;;KAET;IACD,MAAMqG,WAAW,GAAG,IAAI,CAACpH,QAAQ,CAACmF,MAAM,CAACgC,kBAAkB,CAAC;IAC5D,MAAME,QAAQ,GAAGrF,YAAK,CAACC,UAAU,CAACQ,GAAG,CAACkE,GAAG,CAAC,CAACvE,QAAQ,EAAE;IACrD,MAAM6E,aAAa,GAAG,qCAAiB,EACrC,CAAC;MAAEvF,MAAM;MAAEC;IAAQ,CAAE,CAAC,EACtBc,GAAG,CAACD,MAAM,EACV6E,QAAQ,EACR5E,GAAG,CAACqE,OAAO,EACXrE,GAAG,CAACsE,KAAK,CACV;IACD,MAAMZ,OAAO,GAAG,+BAAW,EAACiB,WAAW,EAAEH,aAAa,EAAExB,OAAO,EAAED,aAAa,CAAC;IAC/E,MAAM;MAAEY,SAAS;MAAEC;IAAM,CAAE,GAAG,MAAM,IAAI,CAACvG,MAAM,CAAC6F,UAAU,CAAC9E,aAAa,EAAEsF,OAAO,CAAC;IAClF,OAAOjB,UAAK,CAAC7B,WAAW,CAAC;MACvB2D,SAAS,EAAEX,MAAM,CAACW,SAAS;MAC3BC,aAAa,EAAEZ,MAAM,CAACY,aAAa;MACnCC,UAAU,EAAE,CAAC,yBAAU,EAACd,SAAS,CAACA,SAAS,CAAC;KAC7C,CAAC;EACJ;;AArTFjH","names":["exports","coin_1","modules_1","createDefaultRegistry","proto_signing_1","createDefaultTypes","prefix","SigningStargateClient","stargateclient_1","constructor","tmClient","signer","options","registry","aminoTypes","aminotypes_1","broadcastTimeoutMs","broadcastPollIntervalMs","gasPrice","connectWithSigner","endpoint","tendermint_rpc_1","connect","offline","undefined","simulate","signerAddress","messages","memo","anyMsgs","map","m","encodeAsAny","accountFromSigner","getAccounts","find","account","address","Error","pubkey","sequence","getSequence","gasInfo","forceGetQueryClient","tx","math_1","fromString","gasUsed","toString","toNumber","sendTokens","senderAddress","recipientAddress","amount","fee","sendMsg","typeUrl","value","fromAddress","toAddress","signAndBroadcast","delegateTokens","delegatorAddress","validatorAddress","delegateMsg","tx_2","fromPartial","undelegateTokens","undelegateMsg","withdrawRewards","withdrawMsg","tx_1","sendIbcTokens","transferAmount","sourcePort","sourceChannel","timeoutHeight","timeoutTimestamp","timeoutTimestampNanoseconds","long_1","fromNumber","multiply","transferMsg","tx_4","sender","receiver","token","usedFee","gasEstimation","multiplier","Math","round","txRaw","sign","txBytes","tx_3","encode","finish","broadcastTx","explicitSignerData","signerData","accountNumber","chainId","getChainId","signDirect","signAmino","signMode","signing_1","SIGN_MODE_LEGACY_AMINO_JSON","msgs","msg","toAmino","signDoc","signature","signed","signedTxBody","fromAmino","signedTxBodyEncodeObject","signedTxBodyBytes","signedGasLimit","gas","signedSequence","signedAuthInfoBytes","granter","payer","bodyBytes","authInfoBytes","signatures","txBodyEncodeObject","txBodyBytes","gasLimit"],"sources":["../src/signingstargateclient.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}