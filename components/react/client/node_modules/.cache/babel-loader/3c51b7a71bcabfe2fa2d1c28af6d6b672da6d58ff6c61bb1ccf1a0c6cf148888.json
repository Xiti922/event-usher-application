{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getHandler = void 0;\nconst router_1 = require(\"@keplr-wallet/router\");\nconst messages_1 = require(\"./messages\");\nconst getHandler = service => {\n  return (env, msg) => {\n    switch (msg.constructor) {\n      case messages_1.LedgerGetWebHIDFlagMsg:\n        return handleLedgerGetWebHIDFlagMsg(service)(env, msg);\n      case messages_1.LedgerSetWebHIDFlagMsg:\n        return handleLedgerSetWebHIDFlagMsg(service)(env, msg);\n      default:\n        throw new router_1.KeplrError(\"ledger\", 111, \"Unknown msg type\");\n    }\n  };\n};\nexports.getHandler = getHandler;\nconst handleLedgerGetWebHIDFlagMsg = service => {\n  return (_env, _msg) => __awaiter(void 0, void 0, void 0, function* () {\n    return yield service.getWebHIDFlag();\n  });\n};\nconst handleLedgerSetWebHIDFlagMsg = service => {\n  return (_env, msg) => __awaiter(void 0, void 0, void 0, function* () {\n    return yield service.setWebHIDFlag(msg.flag);\n  });\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAOA;AAGO,MAAMA,UAAU,GACrBC,OAAsB,IACpB;EACF,OAAO,CAACC,GAAQ,EAAEC,GAAqB,KAAI;IACzC,QAAQA,GAAG,CAACC,WAAW;MACrB,KAAKC,iCAAsB;QACzB,OAAOC,4BAA4B,CAACL,OAAO,CAAC,CAC1CC,GAAG,EACHC,GAA6B,CAC9B;MACH,KAAKE,iCAAsB;QACzB,OAAOE,4BAA4B,CAACN,OAAO,CAAC,CAC1CC,GAAG,EACHC,GAA6B,CAC9B;MACH;QACE,MAAM,IAAIK,mBAAU,CAAC,QAAQ,EAAE,GAAG,EAAE,kBAAkB,CAAC;IAAC;EAE9D,CAAC;AACH,CAAC;AAnBYC,kBAAU;AAqBvB,MAAMH,4BAA4B,GAEcL,OAAO,IAAI;EACzD,OAAO,CAAOS,IAAI,EAAEC,IAAI,KAAIC;IAC1B,OAAO,MAAMX,OAAO,CAACY,aAAa,EAAE;EACtC,CAAC;AACH,CAAC;AAED,MAAMN,4BAA4B,GAEcN,OAAO,IAAI;EACzD,OAAO,CAAOS,IAAI,EAAEP,GAAG,KAAIS;IACzB,OAAO,MAAMX,OAAO,CAACa,aAAa,CAACX,GAAG,CAACY,IAAI,CAAC;EAC9C,CAAC;AACH,CAAC","names":["getHandler","service","env","msg","constructor","messages_1","handleLedgerGetWebHIDFlagMsg","handleLedgerSetWebHIDFlagMsg","router_1","exports","_env","_msg","__awaiter","getWebHIDFlag","setWebHIDFlag","flag"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/@keplr-wallet/background/src/ledger/handler.ts"],"sourcesContent":["import {\n  Env,\n  Handler,\n  InternalHandler,\n  KeplrError,\n  Message,\n} from \"@keplr-wallet/router\";\nimport { LedgerGetWebHIDFlagMsg, LedgerSetWebHIDFlagMsg } from \"./messages\";\nimport { LedgerService } from \"./service\";\n\nexport const getHandler: (service: LedgerService) => Handler = (\n  service: LedgerService\n) => {\n  return (env: Env, msg: Message<unknown>) => {\n    switch (msg.constructor) {\n      case LedgerGetWebHIDFlagMsg:\n        return handleLedgerGetWebHIDFlagMsg(service)(\n          env,\n          msg as LedgerGetWebHIDFlagMsg\n        );\n      case LedgerSetWebHIDFlagMsg:\n        return handleLedgerSetWebHIDFlagMsg(service)(\n          env,\n          msg as LedgerSetWebHIDFlagMsg\n        );\n      default:\n        throw new KeplrError(\"ledger\", 111, \"Unknown msg type\");\n    }\n  };\n};\n\nconst handleLedgerGetWebHIDFlagMsg: (\n  service: LedgerService\n) => InternalHandler<LedgerGetWebHIDFlagMsg> = (service) => {\n  return async (_env, _msg) => {\n    return await service.getWebHIDFlag();\n  };\n};\n\nconst handleLedgerSetWebHIDFlagMsg: (\n  service: LedgerService\n) => InternalHandler<LedgerSetWebHIDFlagMsg> = (service) => {\n  return async (_env, msg) => {\n    return await service.setWebHIDFlag(msg.flag);\n  };\n};\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}