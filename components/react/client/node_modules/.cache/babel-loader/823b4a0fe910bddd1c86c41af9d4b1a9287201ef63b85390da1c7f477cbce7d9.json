{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.KeplrEnigmaUtils = void 0;\n/**\n * KeplrEnigmaUtils duplicates the public methods that are supported on secretjs's EnigmaUtils class.\n */\nclass KeplrEnigmaUtils {\n  constructor(chainId, keplr) {\n    this.chainId = chainId;\n    this.keplr = keplr;\n  }\n  getPubkey() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return yield this.keplr.getEnigmaPubKey(this.chainId);\n    });\n  }\n  getTxEncryptionKey(nonce) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return yield this.keplr.getEnigmaTxEncryptionKey(this.chainId, nonce);\n    });\n  }\n  encrypt(contractCodeHash,\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  msg) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return yield this.keplr.enigmaEncrypt(this.chainId, contractCodeHash, msg);\n    });\n  }\n  decrypt(ciphertext, nonce) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return yield this.keplr.enigmaDecrypt(this.chainId, ciphertext, nonce);\n    });\n  }\n}\nexports.KeplrEnigmaUtils = KeplrEnigmaUtils;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;;AAGA,MAAaA,gBAAgB;EAC3BC,YACqBC,OAAe,EACfC,KAAY;IADZ,YAAO,GAAPD,OAAO;IACP,UAAK,GAALC,KAAK;EACvB;EAEGC,SAAS;;MACb,OAAO,MAAM,IAAI,CAACD,KAAK,CAACE,eAAe,CAAC,IAAI,CAACH,OAAO,CAAC;IACvD,CAAC;;EAEKI,kBAAkB,CAACC,KAAiB;;MACxC,OAAO,MAAM,IAAI,CAACJ,KAAK,CAACK,wBAAwB,CAAC,IAAI,CAACN,OAAO,EAAEK,KAAK,CAAC;IACvE,CAAC;;EAEKE,OAAO,CACXC,gBAAwB;EACxB;EACAC,GAAW;;MAEX,OAAO,MAAM,IAAI,CAACR,KAAK,CAACS,aAAa,CAAC,IAAI,CAACV,OAAO,EAAEQ,gBAAgB,EAAEC,GAAG,CAAC;IAC5E,CAAC;;EAEKE,OAAO,CACXC,UAAsB,EACtBP,KAAiB;;MAEjB,OAAO,MAAM,IAAI,CAACJ,KAAK,CAACY,aAAa,CAAC,IAAI,CAACb,OAAO,EAAEY,UAAU,EAAEP,KAAK,CAAC;IACxE,CAAC;;;AA3BHS","names":["KeplrEnigmaUtils","constructor","chainId","keplr","getPubkey","getEnigmaPubKey","getTxEncryptionKey","nonce","getEnigmaTxEncryptionKey","encrypt","contractCodeHash","msg","enigmaEncrypt","decrypt","ciphertext","enigmaDecrypt","exports"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/@keplr-wallet/provider/src/enigma.ts"],"sourcesContent":["import { SecretUtils } from \"secretjs/types/enigmautils\";\nimport { Keplr } from \"@keplr-wallet/types\";\n\n/**\n * KeplrEnigmaUtils duplicates the public methods that are supported on secretjs's EnigmaUtils class.\n */\nexport class KeplrEnigmaUtils implements SecretUtils {\n  constructor(\n    protected readonly chainId: string,\n    protected readonly keplr: Keplr\n  ) {}\n\n  async getPubkey(): Promise<Uint8Array> {\n    return await this.keplr.getEnigmaPubKey(this.chainId);\n  }\n\n  async getTxEncryptionKey(nonce: Uint8Array): Promise<Uint8Array> {\n    return await this.keplr.getEnigmaTxEncryptionKey(this.chainId, nonce);\n  }\n\n  async encrypt(\n    contractCodeHash: string,\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    msg: object\n  ): Promise<Uint8Array> {\n    return await this.keplr.enigmaEncrypt(this.chainId, contractCodeHash, msg);\n  }\n\n  async decrypt(\n    ciphertext: Uint8Array,\n    nonce: Uint8Array\n  ): Promise<Uint8Array> {\n    return await this.keplr.enigmaDecrypt(this.chainId, ciphertext, nonce);\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}