{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CosmosQueriesImpl = exports.CosmosQueries = void 0;\nconst account_1 = require(\"./account\");\nconst supply_1 = require(\"./supply\");\nconst staking_1 = require(\"./staking\");\nconst governance_1 = require(\"./governance\");\nconst ibc_1 = require(\"./ibc\");\nconst sifchain_1 = require(\"./supply/sifchain\");\nconst balance_1 = require(\"./balance\");\nconst iris_minting_1 = require(\"./supply/iris-minting\");\nconst osmosis_1 = require(\"./supply/osmosis\");\nconst distribution_1 = require(\"./distribution\");\nconst status_1 = require(\"./status\");\nconst juno_1 = require(\"./supply/juno\");\nexports.CosmosQueries = {\n  use() {\n    return (queriesSetBase, kvStore, chainId, chainGetter) => {\n      return {\n        cosmos: new CosmosQueriesImpl(queriesSetBase, kvStore, chainId, chainGetter)\n      };\n    };\n  }\n};\nclass CosmosQueriesImpl {\n  constructor(base, kvStore, chainId, chainGetter) {\n    this.queryRPCStatus = new status_1.ObservableQueryRPCStatus(kvStore, chainId, chainGetter);\n    this.querySifchainAPY = new sifchain_1.ObservableQuerySifchainLiquidityAPY(kvStore, chainId);\n    base.queryBalances.addBalanceRegistry(new balance_1.ObservableQueryCosmosBalanceRegistry(kvStore));\n    this.queryAccount = new account_1.ObservableQueryAccount(kvStore, chainId, chainGetter);\n    this.querySpendableBalances = new balance_1.ObservableQuerySpendableBalances(kvStore, chainId, chainGetter);\n    this.queryMint = new supply_1.ObservableQueryMintingInfation(kvStore, chainId, chainGetter);\n    this.queryPool = new staking_1.ObservableQueryStakingPool(kvStore, chainId, chainGetter);\n    this.queryStakingParams = new staking_1.ObservableQueryStakingParams(kvStore, chainId, chainGetter);\n    this.querySupplyTotal = new supply_1.ObservableQuerySupplyTotal(kvStore, chainId, chainGetter);\n    const osmosisMintParams = new osmosis_1.ObservableQueryOsmosisMintParmas(kvStore, chainId, chainGetter);\n    this.queryDistributionParams = new distribution_1.ObservableQueryDistributionParams(kvStore, chainId, chainGetter);\n    this.queryInflation = new supply_1.ObservableQueryInflation(chainId, chainGetter, this.queryMint, this.queryPool, this.querySupplyTotal, new iris_minting_1.ObservableQueryIrisMintingInfation(kvStore, chainId, chainGetter), this.querySifchainAPY, new osmosis_1.ObservableQueryOsmosisEpochs(kvStore, chainId, chainGetter), new osmosis_1.ObservableQueryOsmosisEpochProvisions(kvStore, chainId, chainGetter, osmosisMintParams), osmosisMintParams, new juno_1.ObservableQueryJunoAnnualProvisions(kvStore, chainId, chainGetter), this.queryDistributionParams);\n    this.queryRewards = new staking_1.ObservableQueryRewards(kvStore, chainId, chainGetter);\n    this.queryDelegations = new staking_1.ObservableQueryDelegations(kvStore, chainId, chainGetter);\n    this.queryUnbondingDelegations = new staking_1.ObservableQueryUnbondingDelegations(kvStore, chainId, chainGetter);\n    this.queryValidators = new staking_1.ObservableQueryValidators(kvStore, chainId, chainGetter);\n    this.queryGovernance = new governance_1.ObservableQueryGovernance(kvStore, chainId, chainGetter, this.queryPool);\n    this.queryProposalVote = new governance_1.ObservableQueryProposalVote(kvStore, chainId, chainGetter);\n    this.queryIBCClientState = new ibc_1.ObservableQueryIBCClientState(kvStore, chainId, chainGetter);\n    this.queryIBCChannel = new ibc_1.ObservableQueryIBCChannel(kvStore, chainId, chainGetter);\n    this.queryIBCDenomTrace = new ibc_1.ObservableQueryDenomTrace(kvStore, chainId, chainGetter);\n  }\n}\nexports.CosmosQueriesImpl = CosmosQueriesImpl;","map":{"version":3,"mappings":"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","names":["exports","use","queriesSetBase","kvStore","chainId","chainGetter","cosmos","CosmosQueriesImpl","constructor","base","queryRPCStatus","status_1","querySifchainAPY","sifchain_1","queryBalances","addBalanceRegistry","balance_1","queryAccount","account_1","querySpendableBalances","queryMint","supply_1","queryPool","staking_1","queryStakingParams","querySupplyTotal","osmosisMintParams","osmosis_1","queryDistributionParams","distribution_1","queryInflation","iris_minting_1","juno_1","queryRewards","queryDelegations","queryUnbondingDelegations","queryValidators","queryGovernance","governance_1","queryProposalVote","queryIBCClientState","ibc_1","queryIBCChannel","queryIBCDenomTrace"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/@keplr-wallet/stores/src/query/cosmos/queries.ts"],"sourcesContent":["import { QueriesSetBase } from \"../queries\";\nimport { KVStore } from \"@keplr-wallet/common\";\nimport { ChainGetter } from \"../../common\";\nimport { ObservableQueryAccount } from \"./account\";\nimport {\n  ObservableQueryInflation,\n  ObservableQueryMintingInfation,\n  ObservableQuerySupplyTotal,\n} from \"./supply\";\nimport {\n  ObservableQueryDelegations,\n  ObservableQueryRewards,\n  ObservableQueryStakingParams,\n  ObservableQueryStakingPool,\n  ObservableQueryUnbondingDelegations,\n  ObservableQueryValidators,\n} from \"./staking\";\nimport {\n  ObservableQueryGovernance,\n  ObservableQueryProposalVote,\n} from \"./governance\";\nimport {\n  ObservableQueryDenomTrace,\n  ObservableQueryIBCChannel,\n  ObservableQueryIBCClientState,\n} from \"./ibc\";\nimport { ObservableQuerySifchainLiquidityAPY } from \"./supply/sifchain\";\nimport {\n  ObservableQueryCosmosBalanceRegistry,\n  ObservableQuerySpendableBalances,\n} from \"./balance\";\nimport { ObservableQueryIrisMintingInfation } from \"./supply/iris-minting\";\nimport { DeepReadonly } from \"utility-types\";\nimport {\n  ObservableQueryOsmosisEpochProvisions,\n  ObservableQueryOsmosisEpochs,\n  ObservableQueryOsmosisMintParmas,\n} from \"./supply/osmosis\";\nimport { ObservableQueryDistributionParams } from \"./distribution\";\nimport { ObservableQueryRPCStatus } from \"./status\";\nimport { ObservableQueryJunoAnnualProvisions } from \"./supply/juno\";\n\nexport interface CosmosQueries {\n  cosmos: CosmosQueriesImpl;\n}\n\nexport const CosmosQueries = {\n  use(): (\n    queriesSetBase: QueriesSetBase,\n    kvStore: KVStore,\n    chainId: string,\n    chainGetter: ChainGetter\n  ) => CosmosQueries {\n    return (\n      queriesSetBase: QueriesSetBase,\n      kvStore: KVStore,\n      chainId: string,\n      chainGetter: ChainGetter\n    ) => {\n      return {\n        cosmos: new CosmosQueriesImpl(\n          queriesSetBase,\n          kvStore,\n          chainId,\n          chainGetter\n        ),\n      };\n    };\n  },\n};\n\nexport class CosmosQueriesImpl {\n  public readonly queryRPCStatus: DeepReadonly<ObservableQueryRPCStatus>;\n\n  public readonly queryAccount: DeepReadonly<ObservableQueryAccount>;\n  public readonly querySpendableBalances: DeepReadonly<ObservableQuerySpendableBalances>;\n  public readonly queryMint: DeepReadonly<ObservableQueryMintingInfation>;\n  public readonly queryPool: DeepReadonly<ObservableQueryStakingPool>;\n  public readonly queryStakingParams: DeepReadonly<ObservableQueryStakingParams>;\n  public readonly querySupplyTotal: DeepReadonly<ObservableQuerySupplyTotal>;\n  public readonly queryDistributionParams: DeepReadonly<ObservableQueryDistributionParams>;\n  public readonly queryInflation: DeepReadonly<ObservableQueryInflation>;\n  public readonly queryRewards: DeepReadonly<ObservableQueryRewards>;\n  public readonly queryDelegations: DeepReadonly<ObservableQueryDelegations>;\n  public readonly queryUnbondingDelegations: DeepReadonly<ObservableQueryUnbondingDelegations>;\n  public readonly queryValidators: DeepReadonly<ObservableQueryValidators>;\n  public readonly queryGovernance: DeepReadonly<ObservableQueryGovernance>;\n  public readonly queryProposalVote: DeepReadonly<ObservableQueryProposalVote>;\n\n  public readonly queryIBCClientState: DeepReadonly<ObservableQueryIBCClientState>;\n  public readonly queryIBCChannel: DeepReadonly<ObservableQueryIBCChannel>;\n  public readonly queryIBCDenomTrace: DeepReadonly<ObservableQueryDenomTrace>;\n\n  public readonly querySifchainAPY: DeepReadonly<ObservableQuerySifchainLiquidityAPY>;\n\n  constructor(\n    base: QueriesSetBase,\n    kvStore: KVStore,\n    chainId: string,\n    chainGetter: ChainGetter\n  ) {\n    this.queryRPCStatus = new ObservableQueryRPCStatus(\n      kvStore,\n      chainId,\n      chainGetter\n    );\n\n    this.querySifchainAPY = new ObservableQuerySifchainLiquidityAPY(\n      kvStore,\n      chainId\n    );\n\n    base.queryBalances.addBalanceRegistry(\n      new ObservableQueryCosmosBalanceRegistry(kvStore)\n    );\n\n    this.queryAccount = new ObservableQueryAccount(\n      kvStore,\n      chainId,\n      chainGetter\n    );\n    this.querySpendableBalances = new ObservableQuerySpendableBalances(\n      kvStore,\n      chainId,\n      chainGetter\n    );\n    this.queryMint = new ObservableQueryMintingInfation(\n      kvStore,\n      chainId,\n      chainGetter\n    );\n    this.queryPool = new ObservableQueryStakingPool(\n      kvStore,\n      chainId,\n      chainGetter\n    );\n    this.queryStakingParams = new ObservableQueryStakingParams(\n      kvStore,\n      chainId,\n      chainGetter\n    );\n    this.querySupplyTotal = new ObservableQuerySupplyTotal(\n      kvStore,\n      chainId,\n      chainGetter\n    );\n\n    const osmosisMintParams = new ObservableQueryOsmosisMintParmas(\n      kvStore,\n      chainId,\n      chainGetter\n    );\n\n    this.queryDistributionParams = new ObservableQueryDistributionParams(\n      kvStore,\n      chainId,\n      chainGetter\n    );\n\n    this.queryInflation = new ObservableQueryInflation(\n      chainId,\n      chainGetter,\n      this.queryMint,\n      this.queryPool,\n      this.querySupplyTotal,\n      new ObservableQueryIrisMintingInfation(kvStore, chainId, chainGetter),\n      this.querySifchainAPY,\n      new ObservableQueryOsmosisEpochs(kvStore, chainId, chainGetter),\n      new ObservableQueryOsmosisEpochProvisions(\n        kvStore,\n        chainId,\n        chainGetter,\n        osmosisMintParams\n      ),\n      osmosisMintParams,\n      new ObservableQueryJunoAnnualProvisions(kvStore, chainId, chainGetter),\n      this.queryDistributionParams\n    );\n    this.queryRewards = new ObservableQueryRewards(\n      kvStore,\n      chainId,\n      chainGetter\n    );\n    this.queryDelegations = new ObservableQueryDelegations(\n      kvStore,\n      chainId,\n      chainGetter\n    );\n    this.queryUnbondingDelegations = new ObservableQueryUnbondingDelegations(\n      kvStore,\n      chainId,\n      chainGetter\n    );\n    this.queryValidators = new ObservableQueryValidators(\n      kvStore,\n      chainId,\n      chainGetter\n    );\n    this.queryGovernance = new ObservableQueryGovernance(\n      kvStore,\n      chainId,\n      chainGetter,\n      this.queryPool\n    );\n    this.queryProposalVote = new ObservableQueryProposalVote(\n      kvStore,\n      chainId,\n      chainGetter\n    );\n\n    this.queryIBCClientState = new ObservableQueryIBCClientState(\n      kvStore,\n      chainId,\n      chainGetter\n    );\n    this.queryIBCChannel = new ObservableQueryIBCChannel(\n      kvStore,\n      chainId,\n      chainGetter\n    );\n    this.queryIBCDenomTrace = new ObservableQueryDenomTrace(\n      kvStore,\n      chainId,\n      chainGetter\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}