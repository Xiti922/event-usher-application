{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodePubkey = exports.anyToSinglePubkey = exports.encodePubkey = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nconst amino_1 = require(\"@cosmjs/amino\");\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst math_1 = require(\"@cosmjs/math\");\nconst keys_1 = require(\"cosmjs-types/cosmos/crypto/ed25519/keys\");\nconst keys_2 = require(\"cosmjs-types/cosmos/crypto/multisig/keys\");\nconst keys_3 = require(\"cosmjs-types/cosmos/crypto/secp256k1/keys\");\nconst any_1 = require(\"cosmjs-types/google/protobuf/any\");\n/**\n * Takes a pubkey in the Amino JSON object style (type/value wrapper)\n * and convertes it into a protobuf `Any`.\n *\n * This is the reverse operation to `decodePubkey`.\n */\nfunction encodePubkey(pubkey) {\n  if ((0, amino_1.isSecp256k1Pubkey)(pubkey)) {\n    const pubkeyProto = keys_3.PubKey.fromPartial({\n      key: (0, encoding_1.fromBase64)(pubkey.value)\n    });\n    return any_1.Any.fromPartial({\n      typeUrl: \"/cosmos.crypto.secp256k1.PubKey\",\n      value: Uint8Array.from(keys_3.PubKey.encode(pubkeyProto).finish())\n    });\n  } else if ((0, amino_1.isEd25519Pubkey)(pubkey)) {\n    const pubkeyProto = keys_1.PubKey.fromPartial({\n      key: (0, encoding_1.fromBase64)(pubkey.value)\n    });\n    return any_1.Any.fromPartial({\n      typeUrl: \"/cosmos.crypto.ed25519.PubKey\",\n      value: Uint8Array.from(keys_1.PubKey.encode(pubkeyProto).finish())\n    });\n  } else if ((0, amino_1.isMultisigThresholdPubkey)(pubkey)) {\n    const pubkeyProto = keys_2.LegacyAminoPubKey.fromPartial({\n      threshold: math_1.Uint53.fromString(pubkey.value.threshold).toNumber(),\n      publicKeys: pubkey.value.pubkeys.map(encodePubkey)\n    });\n    return any_1.Any.fromPartial({\n      typeUrl: \"/cosmos.crypto.multisig.LegacyAminoPubKey\",\n      value: Uint8Array.from(keys_2.LegacyAminoPubKey.encode(pubkeyProto).finish())\n    });\n  } else {\n    throw new Error(`Pubkey type ${pubkey.type} not recognized`);\n  }\n}\nexports.encodePubkey = encodePubkey;\n/**\n * Decodes a single pubkey (i.e. not a multisig pubkey) from `Any` into\n * `SinglePubkey`.\n *\n * In most cases you probably want to use `decodePubkey`, but `anyToSinglePubkey`\n * might be preferred in CosmJS 0.29.x due to https://github.com/cosmos/cosmjs/issues/1289.\n */\nfunction anyToSinglePubkey(pubkey) {\n  switch (pubkey.typeUrl) {\n    case \"/cosmos.crypto.secp256k1.PubKey\":\n      {\n        const {\n          key\n        } = keys_3.PubKey.decode(pubkey.value);\n        return (0, amino_1.encodeSecp256k1Pubkey)(key);\n      }\n    case \"/cosmos.crypto.ed25519.PubKey\":\n      {\n        const {\n          key\n        } = keys_1.PubKey.decode(pubkey.value);\n        return (0, amino_1.encodeEd25519Pubkey)(key);\n      }\n    default:\n      throw new Error(`Pubkey type_url ${pubkey.typeUrl} not recognized as single public key type`);\n  }\n}\nexports.anyToSinglePubkey = anyToSinglePubkey;\nfunction decodePubkey(pubkey) {\n  if (!pubkey || !pubkey.value) {\n    return null;\n  }\n  switch (pubkey.typeUrl) {\n    case \"/cosmos.crypto.secp256k1.PubKey\":\n    case \"/cosmos.crypto.ed25519.PubKey\":\n      {\n        return anyToSinglePubkey(pubkey);\n      }\n    case \"/cosmos.crypto.multisig.LegacyAminoPubKey\":\n      {\n        const {\n          threshold,\n          publicKeys\n        } = keys_2.LegacyAminoPubKey.decode(pubkey.value);\n        const out = {\n          type: \"tendermint/PubKeyMultisigThreshold\",\n          value: {\n            threshold: threshold.toString(),\n            pubkeys: publicKeys.map(anyToSinglePubkey)\n          }\n        };\n        return out;\n      }\n    default:\n      throw new Error(`Pubkey type_url ${pubkey.typeUrl} not recognized`);\n  }\n}\nexports.decodePubkey = decodePubkey;","map":{"version":3,"mappings":"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","names":["encodePubkey","pubkey","pubkeyProto","keys_3","fromPartial","key","value","any_1","typeUrl","Uint8Array","from","encode","finish","keys_1","keys_2","threshold","math_1","fromString","toNumber","publicKeys","pubkeys","map","Error","type","exports","anyToSinglePubkey","decode","decodePubkey","out","toString"],"sources":["../src/pubkey.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}