{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GetSecret20ViewingKey = exports.RemoveTokenMsg = exports.AddTokenMsg = exports.SuggestTokenMsg = exports.GetTokensMsg = void 0;\nconst router_1 = require(\"@keplr-wallet/router\");\nconst constants_1 = require(\"./constants\");\nclass GetTokensMsg extends router_1.Message {\n  constructor(chainId) {\n    super();\n    this.chainId = chainId;\n  }\n  static type() {\n    return \"get-tokens\";\n  }\n  validateBasic() {\n    if (!this.chainId) {\n      throw new router_1.KeplrError(\"tokens\", 100, \"Chain id is empty\");\n    }\n  }\n  route() {\n    return constants_1.ROUTE;\n  }\n  type() {\n    return GetTokensMsg.type();\n  }\n}\nexports.GetTokensMsg = GetTokensMsg;\nclass SuggestTokenMsg extends router_1.Message {\n  constructor(chainId, contractAddress, viewingKey) {\n    super();\n    this.chainId = chainId;\n    this.contractAddress = contractAddress;\n    this.viewingKey = viewingKey;\n  }\n  static type() {\n    return \"suggest-token\";\n  }\n  approveExternal() {\n    return true;\n  }\n  validateBasic() {\n    if (!this.chainId) {\n      throw new router_1.KeplrError(\"tokens\", 100, \"Chain id is empty\");\n    }\n    if (!this.contractAddress) {\n      throw new router_1.KeplrError(\"tokens\", 101, \"Contract address is empty\");\n    }\n  }\n  route() {\n    return constants_1.ROUTE;\n  }\n  type() {\n    return SuggestTokenMsg.type();\n  }\n}\nexports.SuggestTokenMsg = SuggestTokenMsg;\nclass AddTokenMsg extends router_1.Message {\n  constructor(chainId, currency) {\n    super();\n    this.chainId = chainId;\n    this.currency = currency;\n  }\n  static type() {\n    return \"add-token\";\n  }\n  validateBasic() {\n    if (!this.chainId) {\n      throw new router_1.KeplrError(\"tokens\", 100, \"Chain id is empty\");\n    }\n  }\n  route() {\n    return constants_1.ROUTE;\n  }\n  type() {\n    return AddTokenMsg.type();\n  }\n}\nexports.AddTokenMsg = AddTokenMsg;\nclass RemoveTokenMsg extends router_1.Message {\n  constructor(chainId, currency) {\n    super();\n    this.chainId = chainId;\n    this.currency = currency;\n  }\n  static type() {\n    return \"remove-token\";\n  }\n  validateBasic() {\n    if (!this.chainId) {\n      throw new router_1.KeplrError(\"tokens\", 100, \"Chain id is empty\");\n    }\n  }\n  route() {\n    return constants_1.ROUTE;\n  }\n  type() {\n    return RemoveTokenMsg.type();\n  }\n}\nexports.RemoveTokenMsg = RemoveTokenMsg;\nclass GetSecret20ViewingKey extends router_1.Message {\n  constructor(chainId, contractAddress) {\n    super();\n    this.chainId = chainId;\n    this.contractAddress = contractAddress;\n  }\n  static type() {\n    return \"get-secret20-viewing-key\";\n  }\n  validateBasic() {\n    if (!this.chainId) {\n      throw new router_1.KeplrError(\"tokens\", 100, \"Chain id is empty\");\n    }\n    if (!this.contractAddress) {\n      throw new router_1.KeplrError(\"tokens\", 101, \"Contract address is empty\");\n    }\n  }\n  approveExternal() {\n    return true;\n  }\n  route() {\n    return constants_1.ROUTE;\n  }\n  type() {\n    return GetSecret20ViewingKey.type();\n  }\n}\nexports.GetSecret20ViewingKey = GetSecret20ViewingKey;","map":{"version":3,"mappings":"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","names":["GetTokensMsg","router_1","constructor","chainId","type","validateBasic","route","constants_1","exports","SuggestTokenMsg","contractAddress","viewingKey","approveExternal","AddTokenMsg","currency","RemoveTokenMsg","GetSecret20ViewingKey"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/@keplr-wallet/background/src/tokens/messages.ts"],"sourcesContent":["import { KeplrError, Message } from \"@keplr-wallet/router\";\nimport { ROUTE } from \"./constants\";\nimport { AppCurrency } from \"@keplr-wallet/types\";\n\nexport class GetTokensMsg extends Message<AppCurrency[]> {\n  public static type() {\n    return \"get-tokens\";\n  }\n\n  constructor(public readonly chainId: string) {\n    super();\n  }\n\n  validateBasic(): void {\n    if (!this.chainId) {\n      throw new KeplrError(\"tokens\", 100, \"Chain id is empty\");\n    }\n  }\n\n  route(): string {\n    return ROUTE;\n  }\n\n  type(): string {\n    return GetTokensMsg.type();\n  }\n}\n\nexport class SuggestTokenMsg extends Message<void> {\n  public static type() {\n    return \"suggest-token\";\n  }\n\n  constructor(\n    public readonly chainId: string,\n    public readonly contractAddress: string,\n    public readonly viewingKey?: string\n  ) {\n    super();\n  }\n\n  approveExternal(): boolean {\n    return true;\n  }\n\n  validateBasic(): void {\n    if (!this.chainId) {\n      throw new KeplrError(\"tokens\", 100, \"Chain id is empty\");\n    }\n\n    if (!this.contractAddress) {\n      throw new KeplrError(\"tokens\", 101, \"Contract address is empty\");\n    }\n  }\n\n  route(): string {\n    return ROUTE;\n  }\n\n  type(): string {\n    return SuggestTokenMsg.type();\n  }\n}\n\nexport class AddTokenMsg extends Message<void> {\n  public static type() {\n    return \"add-token\";\n  }\n\n  constructor(\n    public readonly chainId: string,\n    public readonly currency: AppCurrency\n  ) {\n    super();\n  }\n\n  validateBasic(): void {\n    if (!this.chainId) {\n      throw new KeplrError(\"tokens\", 100, \"Chain id is empty\");\n    }\n  }\n\n  route(): string {\n    return ROUTE;\n  }\n\n  type(): string {\n    return AddTokenMsg.type();\n  }\n}\n\nexport class RemoveTokenMsg extends Message<void> {\n  public static type() {\n    return \"remove-token\";\n  }\n\n  constructor(\n    public readonly chainId: string,\n    public readonly currency: AppCurrency\n  ) {\n    super();\n  }\n\n  validateBasic(): void {\n    if (!this.chainId) {\n      throw new KeplrError(\"tokens\", 100, \"Chain id is empty\");\n    }\n  }\n\n  route(): string {\n    return ROUTE;\n  }\n\n  type(): string {\n    return RemoveTokenMsg.type();\n  }\n}\n\nexport class GetSecret20ViewingKey extends Message<string> {\n  public static type() {\n    return \"get-secret20-viewing-key\";\n  }\n\n  constructor(\n    public readonly chainId: string,\n    public readonly contractAddress: string\n  ) {\n    super();\n  }\n\n  validateBasic(): void {\n    if (!this.chainId) {\n      throw new KeplrError(\"tokens\", 100, \"Chain id is empty\");\n    }\n\n    if (!this.contractAddress) {\n      throw new KeplrError(\"tokens\", 101, \"Contract address is empty\");\n    }\n  }\n\n  approveExternal(): boolean {\n    return true;\n  }\n\n  route(): string {\n    return ROUTE;\n  }\n\n  type(): string {\n    return GetSecret20ViewingKey.type();\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}