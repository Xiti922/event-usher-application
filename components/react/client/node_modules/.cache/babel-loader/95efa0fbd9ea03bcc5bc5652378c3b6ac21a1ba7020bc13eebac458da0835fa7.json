{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExportKeyRingDatasMsg = exports.CheckPasswordMsg = exports.SetKeyStoreCoinTypeMsg = exports.GetIsKeyStoreCoinTypeSetMsg = exports.ChangeKeyRingMsg = exports.GetMultiKeyStoreInfoMsg = exports.RequestSignDirectMsg = exports.RequestVerifyADR36AminoSignDoc = exports.RequestSignAminoMsg = exports.GetKeyMsg = exports.UnlockKeyRingMsg = exports.LockKeyRingMsg = exports.AddLedgerKeyMsg = exports.AddPrivateKeyMsg = exports.CreateLedgerKeyMsg = exports.CreatePrivateKeyMsg = exports.AddMnemonicKeyMsg = exports.CreateMnemonicKeyMsg = exports.ShowKeyRingMsg = exports.UpdateNameKeyRingMsg = exports.DeleteKeyRingMsg = exports.RestoreKeyRingMsg = void 0;\nconst router_1 = require(\"@keplr-wallet/router\");\nconst constants_1 = require(\"./constants\");\nconst keyring_1 = require(\"./keyring\");\nconst cosmos_1 = require(\"@keplr-wallet/cosmos\");\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst bip39 = require(\"bip39\");\nconst tx_1 = require(\"@keplr-wallet/proto-types/cosmos/tx/v1beta1/tx\");\nclass RestoreKeyRingMsg extends router_1.Message {\n  static type() {\n    return \"restore-keyring\";\n  }\n  constructor() {\n    super();\n  }\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  validateBasic() {}\n  route() {\n    return constants_1.ROUTE;\n  }\n  type() {\n    return RestoreKeyRingMsg.type();\n  }\n}\nexports.RestoreKeyRingMsg = RestoreKeyRingMsg;\nclass DeleteKeyRingMsg extends router_1.Message {\n  constructor(index, password) {\n    super();\n    this.index = index;\n    this.password = password;\n  }\n  static type() {\n    return \"delete-keyring\";\n  }\n  validateBasic() {\n    if (!Number.isInteger(this.index)) {\n      throw new router_1.KeplrError(\"keyring\", 201, \"Invalid index\");\n    }\n    if (!this.password) {\n      throw new router_1.KeplrError(\"keyring\", 274, \"password not set\");\n    }\n  }\n  route() {\n    return constants_1.ROUTE;\n  }\n  type() {\n    return DeleteKeyRingMsg.type();\n  }\n}\nexports.DeleteKeyRingMsg = DeleteKeyRingMsg;\nclass UpdateNameKeyRingMsg extends router_1.Message {\n  constructor(index, name) {\n    super();\n    this.index = index;\n    this.name = name;\n  }\n  static type() {\n    return \"update-name-keyring\";\n  }\n  validateBasic() {\n    if (!Number.isInteger(this.index)) {\n      throw new router_1.KeplrError(\"keyring\", 201, \"Invalid index\");\n    }\n    if (!this.name) {\n      throw new router_1.KeplrError(\"keyring\", 273, \"name not set\");\n    }\n  }\n  route() {\n    return constants_1.ROUTE;\n  }\n  type() {\n    return UpdateNameKeyRingMsg.type();\n  }\n}\nexports.UpdateNameKeyRingMsg = UpdateNameKeyRingMsg;\nclass ShowKeyRingMsg extends router_1.Message {\n  constructor(index, password) {\n    super();\n    this.index = index;\n    this.password = password;\n  }\n  static type() {\n    return \"show-keyring\";\n  }\n  validateBasic() {\n    if (!Number.isInteger(this.index)) {\n      throw new router_1.KeplrError(\"keyring\", 201, \"Invalid index\");\n    }\n    if (!this.password) {\n      throw new router_1.KeplrError(\"keyring\", 274, \"password not set\");\n    }\n  }\n  route() {\n    return constants_1.ROUTE;\n  }\n  type() {\n    return ShowKeyRingMsg.type();\n  }\n}\nexports.ShowKeyRingMsg = ShowKeyRingMsg;\nclass CreateMnemonicKeyMsg extends router_1.Message {\n  constructor(kdf, mnemonic, password, meta, bip44HDPath) {\n    super();\n    this.kdf = kdf;\n    this.mnemonic = mnemonic;\n    this.password = password;\n    this.meta = meta;\n    this.bip44HDPath = bip44HDPath;\n  }\n  static type() {\n    return \"create-mnemonic-key\";\n  }\n  validateBasic() {\n    if (this.kdf !== \"scrypt\" && this.kdf !== \"sha256\" && this.kdf !== \"pbkdf2\") {\n      throw new router_1.KeplrError(\"keyring\", 202, \"Invalid kdf\");\n    }\n    if (!this.mnemonic) {\n      throw new router_1.KeplrError(\"keyring\", 272, \"mnemonic not set\");\n    }\n    if (!this.password) {\n      throw new router_1.KeplrError(\"keyring\", 274, \"password not set\");\n    }\n    // Validate mnemonic.\n    // Checksome is not validate in this method.\n    // Keeper should handle the case of invalid checksome.\n    try {\n      bip39.mnemonicToEntropy(this.mnemonic);\n    } catch (e) {\n      if (e.message !== \"Invalid mnemonic checksum\") {\n        throw e;\n      }\n    }\n    keyring_1.KeyRing.validateBIP44Path(this.bip44HDPath);\n  }\n  route() {\n    return constants_1.ROUTE;\n  }\n  type() {\n    return CreateMnemonicKeyMsg.type();\n  }\n}\nexports.CreateMnemonicKeyMsg = CreateMnemonicKeyMsg;\nclass AddMnemonicKeyMsg extends router_1.Message {\n  constructor(kdf, mnemonic, meta, bip44HDPath) {\n    super();\n    this.kdf = kdf;\n    this.mnemonic = mnemonic;\n    this.meta = meta;\n    this.bip44HDPath = bip44HDPath;\n  }\n  static type() {\n    return \"add-mnemonic-key\";\n  }\n  validateBasic() {\n    if (this.kdf !== \"scrypt\" && this.kdf !== \"sha256\" && this.kdf !== \"pbkdf2\") {\n      throw new router_1.KeplrError(\"keyring\", 202, \"Invalid kdf\");\n    }\n    if (!this.mnemonic) {\n      throw new router_1.KeplrError(\"keyring\", 272, \"mnemonic not set\");\n    }\n    // Validate mnemonic.\n    // Checksome is not validate in this method.\n    // Keeper should handle the case of invalid checksome.\n    try {\n      bip39.mnemonicToEntropy(this.mnemonic);\n    } catch (e) {\n      if (e.message !== \"Invalid mnemonic checksum\") {\n        throw e;\n      }\n    }\n    keyring_1.KeyRing.validateBIP44Path(this.bip44HDPath);\n  }\n  route() {\n    return constants_1.ROUTE;\n  }\n  type() {\n    return AddMnemonicKeyMsg.type();\n  }\n}\nexports.AddMnemonicKeyMsg = AddMnemonicKeyMsg;\nclass CreatePrivateKeyMsg extends router_1.Message {\n  constructor(kdf, privateKey, password, meta) {\n    super();\n    this.kdf = kdf;\n    this.privateKey = privateKey;\n    this.password = password;\n    this.meta = meta;\n  }\n  static type() {\n    return \"create-private-key\";\n  }\n  validateBasic() {\n    if (this.kdf !== \"scrypt\" && this.kdf !== \"sha256\" && this.kdf !== \"pbkdf2\") {\n      throw new router_1.KeplrError(\"keyring\", 202, \"Invalid kdf\");\n    }\n    if (!this.privateKey || this.privateKey.length === 0) {\n      throw new router_1.KeplrError(\"keyring\", 275, \"private key not set\");\n    }\n    if (this.privateKey.length !== 32) {\n      throw new router_1.KeplrError(\"keyring\", 260, \"invalid length of private key\");\n    }\n    if (!this.password) {\n      throw new router_1.KeplrError(\"keyring\", 274, \"password not set\");\n    }\n  }\n  route() {\n    return constants_1.ROUTE;\n  }\n  type() {\n    return CreatePrivateKeyMsg.type();\n  }\n}\nexports.CreatePrivateKeyMsg = CreatePrivateKeyMsg;\nclass CreateLedgerKeyMsg extends router_1.Message {\n  constructor(kdf, password, meta, bip44HDPath) {\n    super();\n    this.kdf = kdf;\n    this.password = password;\n    this.meta = meta;\n    this.bip44HDPath = bip44HDPath;\n  }\n  static type() {\n    return \"create-ledger-key\";\n  }\n  validateBasic() {\n    if (this.kdf !== \"scrypt\" && this.kdf !== \"sha256\" && this.kdf !== \"pbkdf2\") {\n      throw new router_1.KeplrError(\"keyring\", 202, \"Invalid kdf\");\n    }\n    if (!this.password) {\n      throw new router_1.KeplrError(\"keyring\", 274, \"password not set\");\n    }\n    keyring_1.KeyRing.validateBIP44Path(this.bip44HDPath);\n  }\n  route() {\n    return constants_1.ROUTE;\n  }\n  type() {\n    return CreateLedgerKeyMsg.type();\n  }\n}\nexports.CreateLedgerKeyMsg = CreateLedgerKeyMsg;\nclass AddPrivateKeyMsg extends router_1.Message {\n  constructor(kdf, privateKey, meta) {\n    super();\n    this.kdf = kdf;\n    this.privateKey = privateKey;\n    this.meta = meta;\n  }\n  static type() {\n    return \"add-private-key\";\n  }\n  validateBasic() {\n    if (this.kdf !== \"scrypt\" && this.kdf !== \"sha256\" && this.kdf !== \"pbkdf2\") {\n      throw new router_1.KeplrError(\"keyring\", 202, \"Invalid kdf\");\n    }\n    if (!this.privateKey || this.privateKey.length === 0) {\n      throw new router_1.KeplrError(\"keyring\", 275, \"private key not set\");\n    }\n    if (this.privateKey.length !== 32) {\n      throw new router_1.KeplrError(\"keyring\", 260, \"invalid length of private key\");\n    }\n  }\n  route() {\n    return constants_1.ROUTE;\n  }\n  type() {\n    return AddPrivateKeyMsg.type();\n  }\n}\nexports.AddPrivateKeyMsg = AddPrivateKeyMsg;\nclass AddLedgerKeyMsg extends router_1.Message {\n  constructor(kdf, meta, bip44HDPath) {\n    super();\n    this.kdf = kdf;\n    this.meta = meta;\n    this.bip44HDPath = bip44HDPath;\n  }\n  static type() {\n    return \"add-ledger-key\";\n  }\n  validateBasic() {\n    if (this.kdf !== \"scrypt\" && this.kdf !== \"sha256\" && this.kdf !== \"pbkdf2\") {\n      throw new router_1.KeplrError(\"keyring\", 202, \"Invalid kdf\");\n    }\n    keyring_1.KeyRing.validateBIP44Path(this.bip44HDPath);\n  }\n  route() {\n    return constants_1.ROUTE;\n  }\n  type() {\n    return AddLedgerKeyMsg.type();\n  }\n}\nexports.AddLedgerKeyMsg = AddLedgerKeyMsg;\nclass LockKeyRingMsg extends router_1.Message {\n  static type() {\n    return \"lock-keyring\";\n  }\n  constructor() {\n    super();\n  }\n  validateBasic() {\n    // noop\n  }\n  route() {\n    return constants_1.ROUTE;\n  }\n  type() {\n    return LockKeyRingMsg.type();\n  }\n}\nexports.LockKeyRingMsg = LockKeyRingMsg;\nclass UnlockKeyRingMsg extends router_1.Message {\n  constructor() {\n    let password = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    super();\n    this.password = password;\n  }\n  static type() {\n    return \"unlock-keyring\";\n  }\n  validateBasic() {\n    if (!this.password) {\n      throw new router_1.KeplrError(\"keyring\", 274, \"password not set\");\n    }\n  }\n  route() {\n    return constants_1.ROUTE;\n  }\n  type() {\n    return UnlockKeyRingMsg.type();\n  }\n}\nexports.UnlockKeyRingMsg = UnlockKeyRingMsg;\nclass GetKeyMsg extends router_1.Message {\n  constructor(chainId) {\n    super();\n    this.chainId = chainId;\n  }\n  static type() {\n    return \"get-key\";\n  }\n  validateBasic() {\n    if (!this.chainId) {\n      throw new router_1.KeplrError(\"keyring\", 270, \"chain id not set\");\n    }\n  }\n  approveExternal() {\n    return true;\n  }\n  route() {\n    return constants_1.ROUTE;\n  }\n  type() {\n    return GetKeyMsg.type();\n  }\n}\nexports.GetKeyMsg = GetKeyMsg;\nclass RequestSignAminoMsg extends router_1.Message {\n  constructor(chainId, signer, signDoc) {\n    let signOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    super();\n    this.chainId = chainId;\n    this.signer = signer;\n    this.signDoc = signDoc;\n    this.signOptions = signOptions;\n  }\n  static type() {\n    return \"request-sign-amino\";\n  }\n  validateBasic() {\n    if (!this.chainId) {\n      throw new router_1.KeplrError(\"keyring\", 270, \"chain id not set\");\n    }\n    if (!this.signer) {\n      throw new router_1.KeplrError(\"keyring\", 230, \"signer not set\");\n    }\n    // Validate bech32 address.\n    cosmos_1.Bech32Address.validate(this.signer);\n    // Check and validate the ADR-36 sign doc.\n    // ADR-36 sign doc doesn't have the chain id\n    if (!cosmos_1.checkAndValidateADR36AminoSignDoc(this.signDoc)) {\n      if (this.signOptions.ethSignType) {\n        throw new Error(\"Eth sign type can be requested with only ADR-36 amino sign doc\");\n      }\n      if (this.signDoc.chain_id !== this.chainId) {\n        throw new router_1.KeplrError(\"keyring\", 234, \"Chain id in the message is not matched with the requested chain id\");\n      }\n    } else {\n      if (this.signDoc.msgs[0].value.signer !== this.signer) {\n        throw new router_1.KeplrError(\"keyring\", 233, \"Unmatched signer in sign doc\");\n      }\n    }\n    if (!this.signOptions) {\n      throw new router_1.KeplrError(\"keyring\", 235, \"Sign options are null\");\n    }\n  }\n  approveExternal() {\n    return true;\n  }\n  route() {\n    return constants_1.ROUTE;\n  }\n  type() {\n    return RequestSignAminoMsg.type();\n  }\n}\nexports.RequestSignAminoMsg = RequestSignAminoMsg;\nclass RequestVerifyADR36AminoSignDoc extends router_1.Message {\n  constructor(chainId, signer, data, signature) {\n    super();\n    this.chainId = chainId;\n    this.signer = signer;\n    this.data = data;\n    this.signature = signature;\n  }\n  static type() {\n    return \"request-verify-adr-36-amino-doc\";\n  }\n  validateBasic() {\n    if (!this.chainId) {\n      throw new router_1.KeplrError(\"keyring\", 270, \"chain id not set\");\n    }\n    if (!this.signer) {\n      throw new router_1.KeplrError(\"keyring\", 230, \"signer not set\");\n    }\n    if (!this.signature) {\n      throw new router_1.KeplrError(\"keyring\", 271, \"Signature not set\");\n    }\n    // Validate bech32 address.\n    cosmos_1.Bech32Address.validate(this.signer);\n  }\n  approveExternal() {\n    return true;\n  }\n  route() {\n    return constants_1.ROUTE;\n  }\n  type() {\n    return RequestVerifyADR36AminoSignDoc.type();\n  }\n}\nexports.RequestVerifyADR36AminoSignDoc = RequestVerifyADR36AminoSignDoc;\nclass RequestSignDirectMsg extends router_1.Message {\n  constructor(chainId, signer, signDoc) {\n    let signOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    super();\n    this.chainId = chainId;\n    this.signer = signer;\n    this.signDoc = signDoc;\n    this.signOptions = signOptions;\n  }\n  static type() {\n    return \"request-sign-direct\";\n  }\n  validateBasic() {\n    if (!this.chainId) {\n      throw new router_1.KeplrError(\"keyring\", 270, \"chain id not set\");\n    }\n    if (!this.signer) {\n      throw new router_1.KeplrError(\"keyring\", 230, \"signer not set\");\n    }\n    // Validate bech32 address.\n    cosmos_1.Bech32Address.validate(this.signer);\n    const signDoc = tx_1.SignDoc.fromPartial({\n      bodyBytes: this.signDoc.bodyBytes,\n      authInfoBytes: this.signDoc.authInfoBytes,\n      chainId: this.signDoc.chainId,\n      accountNumber: this.signDoc.accountNumber\n    });\n    if (signDoc.chainId !== this.chainId) {\n      throw new router_1.KeplrError(\"keyring\", 234, \"Chain id in the message is not matched with the requested chain id\");\n    }\n    if (!this.signOptions) {\n      throw new router_1.KeplrError(\"keyring\", 235, \"Sign options are null\");\n    }\n  }\n  approveExternal() {\n    return true;\n  }\n  route() {\n    return constants_1.ROUTE;\n  }\n  type() {\n    return RequestSignDirectMsg.type();\n  }\n}\nexports.RequestSignDirectMsg = RequestSignDirectMsg;\nclass GetMultiKeyStoreInfoMsg extends router_1.Message {\n  static type() {\n    return \"get-multi-key-store-info\";\n  }\n  constructor() {\n    super();\n  }\n  validateBasic() {\n    // noop\n  }\n  route() {\n    return constants_1.ROUTE;\n  }\n  type() {\n    return GetMultiKeyStoreInfoMsg.type();\n  }\n}\nexports.GetMultiKeyStoreInfoMsg = GetMultiKeyStoreInfoMsg;\nclass ChangeKeyRingMsg extends router_1.Message {\n  constructor(index) {\n    super();\n    this.index = index;\n  }\n  static type() {\n    return \"change-keyring\";\n  }\n  validateBasic() {\n    if (this.index < 0) {\n      throw new router_1.KeplrError(\"keyring\", 200, \"Index is negative\");\n    }\n    if (!Number.isInteger(this.index)) {\n      throw new router_1.KeplrError(\"keyring\", 201, \"Invalid index\");\n    }\n  }\n  route() {\n    return constants_1.ROUTE;\n  }\n  type() {\n    return ChangeKeyRingMsg.type();\n  }\n}\nexports.ChangeKeyRingMsg = ChangeKeyRingMsg;\n// Return the list of selectable path.\n// If coin type was set for the key store, will return empty array.\nclass GetIsKeyStoreCoinTypeSetMsg extends router_1.Message {\n  constructor(chainId, paths) {\n    super();\n    this.chainId = chainId;\n    this.paths = paths;\n  }\n  static type() {\n    return \"get-is-keystore-coin-type-set\";\n  }\n  validateBasic() {\n    if (!this.chainId) {\n      throw new router_1.KeplrError(\"keyring\", 270, \"chain id not set\");\n    }\n    if (this.paths.length === 0) {\n      throw new router_1.KeplrError(\"keyring\", 250, \"empty bip44 path list\");\n    }\n  }\n  route() {\n    return constants_1.ROUTE;\n  }\n  type() {\n    return GetIsKeyStoreCoinTypeSetMsg.type();\n  }\n}\nexports.GetIsKeyStoreCoinTypeSetMsg = GetIsKeyStoreCoinTypeSetMsg;\nclass SetKeyStoreCoinTypeMsg extends router_1.Message {\n  constructor(chainId, coinType) {\n    super();\n    this.chainId = chainId;\n    this.coinType = coinType;\n  }\n  static type() {\n    return \"set-keystore-coin-type\";\n  }\n  validateBasic() {\n    if (!this.chainId) {\n      throw new router_1.KeplrError(\"keyring\", 270, \"chain id not set\");\n    }\n    if (this.coinType < 0) {\n      throw new router_1.KeplrError(\"keyring\", 240, \"coin type can not be negative\");\n    }\n    if (!Number.isInteger(this.coinType)) {\n      throw new router_1.KeplrError(\"keyring\", 241, \"coin type should be integer\");\n    }\n  }\n  route() {\n    return constants_1.ROUTE;\n  }\n  type() {\n    return SetKeyStoreCoinTypeMsg.type();\n  }\n}\nexports.SetKeyStoreCoinTypeMsg = SetKeyStoreCoinTypeMsg;\nclass CheckPasswordMsg extends router_1.Message {\n  constructor(password) {\n    super();\n    this.password = password;\n  }\n  static type() {\n    return \"check-keyring-password\";\n  }\n  validateBasic() {\n    if (!this.password) {\n      throw new router_1.KeplrError(\"keyring\", 274, \"password not set\");\n    }\n  }\n  route() {\n    return constants_1.ROUTE;\n  }\n  type() {\n    return CheckPasswordMsg.type();\n  }\n}\nexports.CheckPasswordMsg = CheckPasswordMsg;\nclass ExportKeyRingDatasMsg extends router_1.Message {\n  constructor(password) {\n    super();\n    this.password = password;\n  }\n  static type() {\n    return \"export-keyring-datas\";\n  }\n  validateBasic() {\n    if (!this.password) {\n      throw new router_1.KeplrError(\"keyring\", 274, \"password not set\");\n    }\n  }\n  route() {\n    return constants_1.ROUTE;\n  }\n  type() {\n    return ExportKeyRingDatasMsg.type();\n  }\n}\nexports.ExportKeyRingDatasMsg = ExportKeyRingDatasMsg;","map":{"version":3,"mappings":"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","names":["bip39","require","RestoreKeyRingMsg","router_1","type","constructor","validateBasic","route","constants_1","exports","DeleteKeyRingMsg","index","password","Number","isInteger","UpdateNameKeyRingMsg","name","ShowKeyRingMsg","CreateMnemonicKeyMsg","kdf","mnemonic","meta","bip44HDPath","mnemonicToEntropy","e","message","keyring_1","validateBIP44Path","AddMnemonicKeyMsg","CreatePrivateKeyMsg","privateKey","length","CreateLedgerKeyMsg","AddPrivateKeyMsg","AddLedgerKeyMsg","LockKeyRingMsg","UnlockKeyRingMsg","GetKeyMsg","chainId","approveExternal","RequestSignAminoMsg","signer","signDoc","signOptions","cosmos_1","validate","ethSignType","Error","chain_id","msgs","value","RequestVerifyADR36AminoSignDoc","data","signature","RequestSignDirectMsg","tx_1","fromPartial","bodyBytes","authInfoBytes","accountNumber","GetMultiKeyStoreInfoMsg","ChangeKeyRingMsg","GetIsKeyStoreCoinTypeSetMsg","paths","SetKeyStoreCoinTypeMsg","coinType","CheckPasswordMsg","ExportKeyRingDatasMsg"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/@keplr-wallet/background/src/keyring/messages.ts"],"sourcesContent":["import { KeplrError, Message } from \"@keplr-wallet/router\";\nimport { ROUTE } from \"./constants\";\nimport {\n  KeyRing,\n  KeyRingStatus,\n  MultiKeyStoreInfoWithSelected,\n} from \"./keyring\";\nimport { BIP44HDPath, ExportKeyRingData } from \"./types\";\n\nimport {\n  Bech32Address,\n  checkAndValidateADR36AminoSignDoc,\n} from \"@keplr-wallet/cosmos\";\nimport { BIP44, EthSignType, KeplrSignOptions, Key } from \"@keplr-wallet/types\";\n\nimport { StdSignDoc, AminoSignResponse, StdSignature } from \"@cosmjs/launchpad\";\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst bip39 = require(\"bip39\");\nimport { SignDoc } from \"@keplr-wallet/proto-types/cosmos/tx/v1beta1/tx\";\n\nexport class RestoreKeyRingMsg extends Message<{\n  status: KeyRingStatus;\n  multiKeyStoreInfo: MultiKeyStoreInfoWithSelected;\n}> {\n  public static type() {\n    return \"restore-keyring\";\n  }\n\n  constructor() {\n    super();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  validateBasic(): void {}\n\n  route(): string {\n    return ROUTE;\n  }\n\n  type(): string {\n    return RestoreKeyRingMsg.type();\n  }\n}\n\nexport class DeleteKeyRingMsg extends Message<{\n  status: KeyRingStatus;\n  multiKeyStoreInfo: MultiKeyStoreInfoWithSelected;\n}> {\n  public static type() {\n    return \"delete-keyring\";\n  }\n\n  constructor(public readonly index: number, public readonly password: string) {\n    super();\n  }\n\n  validateBasic(): void {\n    if (!Number.isInteger(this.index)) {\n      throw new KeplrError(\"keyring\", 201, \"Invalid index\");\n    }\n\n    if (!this.password) {\n      throw new KeplrError(\"keyring\", 274, \"password not set\");\n    }\n  }\n\n  route(): string {\n    return ROUTE;\n  }\n\n  type(): string {\n    return DeleteKeyRingMsg.type();\n  }\n}\n\nexport class UpdateNameKeyRingMsg extends Message<{\n  multiKeyStoreInfo: MultiKeyStoreInfoWithSelected;\n}> {\n  public static type() {\n    return \"update-name-keyring\";\n  }\n\n  constructor(public readonly index: number, public readonly name: string) {\n    super();\n  }\n\n  validateBasic(): void {\n    if (!Number.isInteger(this.index)) {\n      throw new KeplrError(\"keyring\", 201, \"Invalid index\");\n    }\n\n    if (!this.name) {\n      throw new KeplrError(\"keyring\", 273, \"name not set\");\n    }\n  }\n\n  route(): string {\n    return ROUTE;\n  }\n\n  type(): string {\n    return UpdateNameKeyRingMsg.type();\n  }\n}\n\nexport class ShowKeyRingMsg extends Message<string> {\n  public static type() {\n    return \"show-keyring\";\n  }\n\n  constructor(public readonly index: number, public readonly password: string) {\n    super();\n  }\n\n  validateBasic(): void {\n    if (!Number.isInteger(this.index)) {\n      throw new KeplrError(\"keyring\", 201, \"Invalid index\");\n    }\n\n    if (!this.password) {\n      throw new KeplrError(\"keyring\", 274, \"password not set\");\n    }\n  }\n\n  route(): string {\n    return ROUTE;\n  }\n\n  type(): string {\n    return ShowKeyRingMsg.type();\n  }\n}\n\nexport class CreateMnemonicKeyMsg extends Message<{\n  status: KeyRingStatus;\n  multiKeyStoreInfo: MultiKeyStoreInfoWithSelected;\n}> {\n  public static type() {\n    return \"create-mnemonic-key\";\n  }\n\n  constructor(\n    public readonly kdf: \"scrypt\" | \"sha256\" | \"pbkdf2\",\n    public readonly mnemonic: string,\n    public readonly password: string,\n    public readonly meta: Record<string, string>,\n    public readonly bip44HDPath: BIP44HDPath\n  ) {\n    super();\n  }\n\n  validateBasic(): void {\n    if (\n      this.kdf !== \"scrypt\" &&\n      this.kdf !== \"sha256\" &&\n      this.kdf !== \"pbkdf2\"\n    ) {\n      throw new KeplrError(\"keyring\", 202, \"Invalid kdf\");\n    }\n\n    if (!this.mnemonic) {\n      throw new KeplrError(\"keyring\", 272, \"mnemonic not set\");\n    }\n\n    if (!this.password) {\n      throw new KeplrError(\"keyring\", 274, \"password not set\");\n    }\n\n    // Validate mnemonic.\n    // Checksome is not validate in this method.\n    // Keeper should handle the case of invalid checksome.\n    try {\n      bip39.mnemonicToEntropy(this.mnemonic);\n    } catch (e) {\n      if (e.message !== \"Invalid mnemonic checksum\") {\n        throw e;\n      }\n    }\n\n    KeyRing.validateBIP44Path(this.bip44HDPath);\n  }\n\n  route(): string {\n    return ROUTE;\n  }\n\n  type(): string {\n    return CreateMnemonicKeyMsg.type();\n  }\n}\n\nexport class AddMnemonicKeyMsg extends Message<{\n  multiKeyStoreInfo: MultiKeyStoreInfoWithSelected;\n}> {\n  public static type() {\n    return \"add-mnemonic-key\";\n  }\n\n  constructor(\n    public readonly kdf: \"scrypt\" | \"sha256\" | \"pbkdf2\",\n    public readonly mnemonic: string,\n    public readonly meta: Record<string, string>,\n    public readonly bip44HDPath: BIP44HDPath\n  ) {\n    super();\n  }\n\n  validateBasic(): void {\n    if (\n      this.kdf !== \"scrypt\" &&\n      this.kdf !== \"sha256\" &&\n      this.kdf !== \"pbkdf2\"\n    ) {\n      throw new KeplrError(\"keyring\", 202, \"Invalid kdf\");\n    }\n\n    if (!this.mnemonic) {\n      throw new KeplrError(\"keyring\", 272, \"mnemonic not set\");\n    }\n\n    // Validate mnemonic.\n    // Checksome is not validate in this method.\n    // Keeper should handle the case of invalid checksome.\n    try {\n      bip39.mnemonicToEntropy(this.mnemonic);\n    } catch (e) {\n      if (e.message !== \"Invalid mnemonic checksum\") {\n        throw e;\n      }\n    }\n\n    KeyRing.validateBIP44Path(this.bip44HDPath);\n  }\n\n  route(): string {\n    return ROUTE;\n  }\n\n  type(): string {\n    return AddMnemonicKeyMsg.type();\n  }\n}\n\nexport class CreatePrivateKeyMsg extends Message<{\n  status: KeyRingStatus;\n  multiKeyStoreInfo: MultiKeyStoreInfoWithSelected;\n}> {\n  public static type() {\n    return \"create-private-key\";\n  }\n\n  constructor(\n    public readonly kdf: \"scrypt\" | \"sha256\" | \"pbkdf2\",\n    public readonly privateKey: Uint8Array,\n    public readonly password: string,\n    public readonly meta: Record<string, string>\n  ) {\n    super();\n  }\n\n  validateBasic(): void {\n    if (\n      this.kdf !== \"scrypt\" &&\n      this.kdf !== \"sha256\" &&\n      this.kdf !== \"pbkdf2\"\n    ) {\n      throw new KeplrError(\"keyring\", 202, \"Invalid kdf\");\n    }\n\n    if (!this.privateKey || this.privateKey.length === 0) {\n      throw new KeplrError(\"keyring\", 275, \"private key not set\");\n    }\n\n    if (this.privateKey.length !== 32) {\n      throw new KeplrError(\"keyring\", 260, \"invalid length of private key\");\n    }\n\n    if (!this.password) {\n      throw new KeplrError(\"keyring\", 274, \"password not set\");\n    }\n  }\n\n  route(): string {\n    return ROUTE;\n  }\n\n  type(): string {\n    return CreatePrivateKeyMsg.type();\n  }\n}\n\nexport class CreateLedgerKeyMsg extends Message<{\n  status: KeyRingStatus;\n  multiKeyStoreInfo: MultiKeyStoreInfoWithSelected;\n}> {\n  public static type() {\n    return \"create-ledger-key\";\n  }\n\n  constructor(\n    public readonly kdf: \"scrypt\" | \"sha256\" | \"pbkdf2\",\n    public readonly password: string,\n    public readonly meta: Record<string, string>,\n    public readonly bip44HDPath: BIP44HDPath\n  ) {\n    super();\n  }\n\n  validateBasic(): void {\n    if (\n      this.kdf !== \"scrypt\" &&\n      this.kdf !== \"sha256\" &&\n      this.kdf !== \"pbkdf2\"\n    ) {\n      throw new KeplrError(\"keyring\", 202, \"Invalid kdf\");\n    }\n\n    if (!this.password) {\n      throw new KeplrError(\"keyring\", 274, \"password not set\");\n    }\n\n    KeyRing.validateBIP44Path(this.bip44HDPath);\n  }\n\n  route(): string {\n    return ROUTE;\n  }\n\n  type(): string {\n    return CreateLedgerKeyMsg.type();\n  }\n}\n\nexport class AddPrivateKeyMsg extends Message<{\n  multiKeyStoreInfo: MultiKeyStoreInfoWithSelected;\n}> {\n  public static type() {\n    return \"add-private-key\";\n  }\n\n  constructor(\n    public readonly kdf: \"scrypt\" | \"sha256\" | \"pbkdf2\",\n    public readonly privateKey: Uint8Array,\n    public readonly meta: Record<string, string>\n  ) {\n    super();\n  }\n\n  validateBasic(): void {\n    if (\n      this.kdf !== \"scrypt\" &&\n      this.kdf !== \"sha256\" &&\n      this.kdf !== \"pbkdf2\"\n    ) {\n      throw new KeplrError(\"keyring\", 202, \"Invalid kdf\");\n    }\n\n    if (!this.privateKey || this.privateKey.length === 0) {\n      throw new KeplrError(\"keyring\", 275, \"private key not set\");\n    }\n\n    if (this.privateKey.length !== 32) {\n      throw new KeplrError(\"keyring\", 260, \"invalid length of private key\");\n    }\n  }\n\n  route(): string {\n    return ROUTE;\n  }\n\n  type(): string {\n    return AddPrivateKeyMsg.type();\n  }\n}\n\nexport class AddLedgerKeyMsg extends Message<{\n  multiKeyStoreInfo: MultiKeyStoreInfoWithSelected;\n}> {\n  public static type() {\n    return \"add-ledger-key\";\n  }\n\n  constructor(\n    public readonly kdf: \"scrypt\" | \"sha256\" | \"pbkdf2\",\n    public readonly meta: Record<string, string>,\n    public readonly bip44HDPath: BIP44HDPath\n  ) {\n    super();\n  }\n\n  validateBasic(): void {\n    if (\n      this.kdf !== \"scrypt\" &&\n      this.kdf !== \"sha256\" &&\n      this.kdf !== \"pbkdf2\"\n    ) {\n      throw new KeplrError(\"keyring\", 202, \"Invalid kdf\");\n    }\n\n    KeyRing.validateBIP44Path(this.bip44HDPath);\n  }\n\n  route(): string {\n    return ROUTE;\n  }\n\n  type(): string {\n    return AddLedgerKeyMsg.type();\n  }\n}\n\nexport class LockKeyRingMsg extends Message<{ status: KeyRingStatus }> {\n  public static type() {\n    return \"lock-keyring\";\n  }\n\n  constructor() {\n    super();\n  }\n\n  validateBasic(): void {\n    // noop\n  }\n\n  route(): string {\n    return ROUTE;\n  }\n\n  type(): string {\n    return LockKeyRingMsg.type();\n  }\n}\n\nexport class UnlockKeyRingMsg extends Message<{ status: KeyRingStatus }> {\n  public static type() {\n    return \"unlock-keyring\";\n  }\n\n  constructor(public readonly password = \"\") {\n    super();\n  }\n\n  validateBasic(): void {\n    if (!this.password) {\n      throw new KeplrError(\"keyring\", 274, \"password not set\");\n    }\n  }\n\n  route(): string {\n    return ROUTE;\n  }\n\n  type(): string {\n    return UnlockKeyRingMsg.type();\n  }\n}\n\nexport class GetKeyMsg extends Message<Key> {\n  public static type() {\n    return \"get-key\";\n  }\n\n  constructor(public readonly chainId: string) {\n    super();\n  }\n\n  validateBasic(): void {\n    if (!this.chainId) {\n      throw new KeplrError(\"keyring\", 270, \"chain id not set\");\n    }\n  }\n\n  approveExternal(): boolean {\n    return true;\n  }\n\n  route(): string {\n    return ROUTE;\n  }\n\n  type(): string {\n    return GetKeyMsg.type();\n  }\n}\n\nexport class RequestSignAminoMsg extends Message<AminoSignResponse> {\n  public static type() {\n    return \"request-sign-amino\";\n  }\n\n  constructor(\n    public readonly chainId: string,\n    public readonly signer: string,\n    public readonly signDoc: StdSignDoc,\n    public readonly signOptions: KeplrSignOptions & {\n      // Hack option field to detect the sign arbitrary for string\n      isADR36WithString?: boolean;\n      ethSignType?: EthSignType;\n    } = {}\n  ) {\n    super();\n  }\n\n  validateBasic(): void {\n    if (!this.chainId) {\n      throw new KeplrError(\"keyring\", 270, \"chain id not set\");\n    }\n\n    if (!this.signer) {\n      throw new KeplrError(\"keyring\", 230, \"signer not set\");\n    }\n\n    // Validate bech32 address.\n    Bech32Address.validate(this.signer);\n\n    // Check and validate the ADR-36 sign doc.\n    // ADR-36 sign doc doesn't have the chain id\n    if (!checkAndValidateADR36AminoSignDoc(this.signDoc)) {\n      if (this.signOptions.ethSignType) {\n        throw new Error(\n          \"Eth sign type can be requested with only ADR-36 amino sign doc\"\n        );\n      }\n\n      if (this.signDoc.chain_id !== this.chainId) {\n        throw new KeplrError(\n          \"keyring\",\n          234,\n          \"Chain id in the message is not matched with the requested chain id\"\n        );\n      }\n    } else {\n      if (this.signDoc.msgs[0].value.signer !== this.signer) {\n        throw new KeplrError(\"keyring\", 233, \"Unmatched signer in sign doc\");\n      }\n    }\n\n    if (!this.signOptions) {\n      throw new KeplrError(\"keyring\", 235, \"Sign options are null\");\n    }\n  }\n\n  approveExternal(): boolean {\n    return true;\n  }\n\n  route(): string {\n    return ROUTE;\n  }\n\n  type(): string {\n    return RequestSignAminoMsg.type();\n  }\n}\n\nexport class RequestVerifyADR36AminoSignDoc extends Message<boolean> {\n  public static type() {\n    return \"request-verify-adr-36-amino-doc\";\n  }\n\n  constructor(\n    public readonly chainId: string,\n    public readonly signer: string,\n    public readonly data: Uint8Array,\n    public readonly signature: StdSignature\n  ) {\n    super();\n  }\n\n  validateBasic(): void {\n    if (!this.chainId) {\n      throw new KeplrError(\"keyring\", 270, \"chain id not set\");\n    }\n\n    if (!this.signer) {\n      throw new KeplrError(\"keyring\", 230, \"signer not set\");\n    }\n\n    if (!this.signature) {\n      throw new KeplrError(\"keyring\", 271, \"Signature not set\");\n    }\n\n    // Validate bech32 address.\n    Bech32Address.validate(this.signer);\n  }\n\n  approveExternal(): boolean {\n    return true;\n  }\n\n  route(): string {\n    return ROUTE;\n  }\n\n  type(): string {\n    return RequestVerifyADR36AminoSignDoc.type();\n  }\n}\n\nexport class RequestSignDirectMsg extends Message<{\n  readonly signed: {\n    bodyBytes: Uint8Array;\n    authInfoBytes: Uint8Array;\n    chainId: string;\n    accountNumber: string;\n  };\n  readonly signature: StdSignature;\n}> {\n  public static type() {\n    return \"request-sign-direct\";\n  }\n\n  constructor(\n    public readonly chainId: string,\n    public readonly signer: string,\n    public readonly signDoc: {\n      bodyBytes?: Uint8Array;\n      authInfoBytes?: Uint8Array;\n      chainId?: string;\n      accountNumber?: string;\n    },\n    public readonly signOptions: KeplrSignOptions = {}\n  ) {\n    super();\n  }\n\n  validateBasic(): void {\n    if (!this.chainId) {\n      throw new KeplrError(\"keyring\", 270, \"chain id not set\");\n    }\n\n    if (!this.signer) {\n      throw new KeplrError(\"keyring\", 230, \"signer not set\");\n    }\n\n    // Validate bech32 address.\n    Bech32Address.validate(this.signer);\n\n    const signDoc = SignDoc.fromPartial({\n      bodyBytes: this.signDoc.bodyBytes,\n      authInfoBytes: this.signDoc.authInfoBytes,\n      chainId: this.signDoc.chainId,\n      accountNumber: this.signDoc.accountNumber,\n    });\n\n    if (signDoc.chainId !== this.chainId) {\n      throw new KeplrError(\n        \"keyring\",\n        234,\n        \"Chain id in the message is not matched with the requested chain id\"\n      );\n    }\n\n    if (!this.signOptions) {\n      throw new KeplrError(\"keyring\", 235, \"Sign options are null\");\n    }\n  }\n\n  approveExternal(): boolean {\n    return true;\n  }\n\n  route(): string {\n    return ROUTE;\n  }\n\n  type(): string {\n    return RequestSignDirectMsg.type();\n  }\n}\n\nexport class GetMultiKeyStoreInfoMsg extends Message<{\n  multiKeyStoreInfo: MultiKeyStoreInfoWithSelected;\n}> {\n  public static type() {\n    return \"get-multi-key-store-info\";\n  }\n\n  constructor() {\n    super();\n  }\n\n  validateBasic(): void {\n    // noop\n  }\n\n  route(): string {\n    return ROUTE;\n  }\n\n  type(): string {\n    return GetMultiKeyStoreInfoMsg.type();\n  }\n}\n\nexport class ChangeKeyRingMsg extends Message<{\n  multiKeyStoreInfo: MultiKeyStoreInfoWithSelected;\n}> {\n  public static type() {\n    return \"change-keyring\";\n  }\n\n  constructor(public readonly index: number) {\n    super();\n  }\n\n  validateBasic(): void {\n    if (this.index < 0) {\n      throw new KeplrError(\"keyring\", 200, \"Index is negative\");\n    }\n\n    if (!Number.isInteger(this.index)) {\n      throw new KeplrError(\"keyring\", 201, \"Invalid index\");\n    }\n  }\n\n  route(): string {\n    return ROUTE;\n  }\n\n  type(): string {\n    return ChangeKeyRingMsg.type();\n  }\n}\n\n// Return the list of selectable path.\n// If coin type was set for the key store, will return empty array.\nexport class GetIsKeyStoreCoinTypeSetMsg extends Message<\n  {\n    readonly path: BIP44;\n    readonly bech32Address: string;\n  }[]\n> {\n  public static type() {\n    return \"get-is-keystore-coin-type-set\";\n  }\n\n  constructor(public readonly chainId: string, public readonly paths: BIP44[]) {\n    super();\n  }\n\n  validateBasic(): void {\n    if (!this.chainId) {\n      throw new KeplrError(\"keyring\", 270, \"chain id not set\");\n    }\n\n    if (this.paths.length === 0) {\n      throw new KeplrError(\"keyring\", 250, \"empty bip44 path list\");\n    }\n  }\n\n  route(): string {\n    return ROUTE;\n  }\n\n  type(): string {\n    return GetIsKeyStoreCoinTypeSetMsg.type();\n  }\n}\n\nexport class SetKeyStoreCoinTypeMsg extends Message<KeyRingStatus> {\n  public static type() {\n    return \"set-keystore-coin-type\";\n  }\n\n  constructor(\n    public readonly chainId: string,\n    public readonly coinType: number\n  ) {\n    super();\n  }\n\n  validateBasic(): void {\n    if (!this.chainId) {\n      throw new KeplrError(\"keyring\", 270, \"chain id not set\");\n    }\n\n    if (this.coinType < 0) {\n      throw new KeplrError(\"keyring\", 240, \"coin type can not be negative\");\n    }\n\n    if (!Number.isInteger(this.coinType)) {\n      throw new KeplrError(\"keyring\", 241, \"coin type should be integer\");\n    }\n  }\n\n  route(): string {\n    return ROUTE;\n  }\n\n  type(): string {\n    return SetKeyStoreCoinTypeMsg.type();\n  }\n}\n\nexport class CheckPasswordMsg extends Message<boolean> {\n  public static type() {\n    return \"check-keyring-password\";\n  }\n\n  constructor(public readonly password: string) {\n    super();\n  }\n\n  validateBasic(): void {\n    if (!this.password) {\n      throw new KeplrError(\"keyring\", 274, \"password not set\");\n    }\n  }\n\n  route(): string {\n    return ROUTE;\n  }\n\n  type(): string {\n    return CheckPasswordMsg.type();\n  }\n}\n\nexport class ExportKeyRingDatasMsg extends Message<ExportKeyRingData[]> {\n  public static type() {\n    return \"export-keyring-datas\";\n  }\n\n  constructor(public readonly password: string) {\n    super();\n  }\n\n  validateBasic(): void {\n    if (!this.password) {\n      throw new KeplrError(\"keyring\", 274, \"password not set\");\n    }\n  }\n\n  route(): string {\n    return ROUTE;\n  }\n\n  type(): string {\n    return ExportKeyRingDatasMsg.type();\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}