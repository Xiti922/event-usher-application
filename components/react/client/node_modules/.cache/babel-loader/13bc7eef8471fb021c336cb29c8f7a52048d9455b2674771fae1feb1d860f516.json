{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ProtoSignDocDecoder = void 0;\nconst proto_1 = require(\"../proto\");\nconst codec_1 = require(\"../codec\");\nclass ProtoSignDocDecoder {\n  constructor(signDoc) {\n    let protoCodec = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : codec_1.defaultProtoCodec;\n    this.signDoc = signDoc;\n    this.protoCodec = protoCodec;\n  }\n  static decode(bytes) {\n    return new ProtoSignDocDecoder(proto_1.cosmos.tx.v1beta1.SignDoc.decode(bytes));\n  }\n  get txBody() {\n    if (!this._txBody) {\n      this._txBody = proto_1.cosmos.tx.v1beta1.TxBody.decode(this.signDoc.bodyBytes);\n    }\n    return this._txBody;\n  }\n  get txMsgs() {\n    const msgs = [];\n    for (const msg of this.txBody.messages) {\n      msgs.push(this.protoCodec.unpackAny(msg));\n    }\n    return msgs;\n  }\n  get authInfo() {\n    if (!this._authInfo) {\n      this._authInfo = proto_1.cosmos.tx.v1beta1.AuthInfo.decode(this.signDoc.authInfoBytes);\n    }\n    return this._authInfo;\n  }\n  get chainId() {\n    return this.signDoc.chainId;\n  }\n  get accountNumber() {\n    return this.signDoc.accountNumber.toString();\n  }\n  toBytes() {\n    return proto_1.cosmos.tx.v1beta1.SignDoc.encode(this.signDoc).finish();\n  }\n  toJSON() {\n    return {\n      txBody: Object.assign(Object.assign({}, this.txBody.toJSON()), {\n        messages: this.txMsgs.map(msg => {\n          if (msg && msg.toJSON) {\n            return msg.toJSON();\n          }\n          return msg;\n        })\n      }),\n      authInfo: this.authInfo.toJSON(),\n      chainId: this.chainId,\n      accountNumber: this.accountNumber\n    };\n  }\n}\nexports.ProtoSignDocDecoder = ProtoSignDocDecoder;","map":{"version":3,"mappings":";;;;;;AAAA;AAEA;AAEA,MAAaA,mBAAmB;EAQ9BC,YACkBC,OAAgB,EAC6B;IAAA,IAA1CC,iFAAyBC,yBAAiB;IAD7C,YAAO,GAAPF,OAAO;IACJ,eAAU,GAAVC,UAAU;EAC5B;EAVI,OAAOE,MAAM,CAACC,KAAiB;IACpC,OAAO,IAAIN,mBAAmB,CAACO,cAAM,CAACC,EAAE,CAACC,OAAO,CAACC,OAAO,CAACL,MAAM,CAACC,KAAK,CAAC,CAAC;EACzE;EAUA,IAAIK,MAAM;IACR,IAAI,CAAC,IAAI,CAACC,OAAO,EAAE;MACjB,IAAI,CAACA,OAAO,GAAGL,cAAM,CAACC,EAAE,CAACC,OAAO,CAACI,MAAM,CAACR,MAAM,CAAC,IAAI,CAACH,OAAO,CAACY,SAAS,CAAC;;IAGxE,OAAO,IAAI,CAACF,OAAO;EACrB;EAEA,IAAIG,MAAM;IACR,MAAMC,IAAI,GAAU,EAAE;IACtB,KAAK,MAAMC,GAAG,IAAI,IAAI,CAACN,MAAM,CAACO,QAAQ,EAAE;MACtCF,IAAI,CAACG,IAAI,CAAC,IAAI,CAAChB,UAAU,CAACiB,SAAS,CAACH,GAAG,CAAC,CAAC;;IAG3C,OAAOD,IAAI;EACb;EAEA,IAAIK,QAAQ;IACV,IAAI,CAAC,IAAI,CAACC,SAAS,EAAE;MACnB,IAAI,CAACA,SAAS,GAAGf,cAAM,CAACC,EAAE,CAACC,OAAO,CAACc,QAAQ,CAAClB,MAAM,CAChD,IAAI,CAACH,OAAO,CAACsB,aAAa,CAC3B;;IAGH,OAAO,IAAI,CAACF,SAAS;EACvB;EAEA,IAAIG,OAAO;IACT,OAAO,IAAI,CAACvB,OAAO,CAACuB,OAAO;EAC7B;EAEA,IAAIC,aAAa;IACf,OAAO,IAAI,CAACxB,OAAO,CAACwB,aAAa,CAACC,QAAQ,EAAE;EAC9C;EAEAC,OAAO;IACL,OAAOrB,cAAM,CAACC,EAAE,CAACC,OAAO,CAACC,OAAO,CAACmB,MAAM,CAAC,IAAI,CAAC3B,OAAO,CAAC,CAAC4B,MAAM,EAAE;EAChE;EAEAC,MAAM;IACJ,OAAO;MACLpB,MAAM,kCACD,IAAI,CAACA,MAAM,CAACoB,MAAM,EAAE,GACpB;QACDb,QAAQ,EAAE,IAAI,CAACH,MAAM,CAACiB,GAAG,CAAEf,GAAG,IAAI;UAChC,IAAIA,GAAG,IAAIA,GAAG,CAACc,MAAM,EAAE;YACrB,OAAOd,GAAG,CAACc,MAAM,EAAE;;UAErB,OAAOd,GAAG;QACZ,CAAC;OACF,CACF;MACDI,QAAQ,EAAE,IAAI,CAACA,QAAQ,CAACU,MAAM,EAAE;MAChCN,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBC,aAAa,EAAE,IAAI,CAACA;KACrB;EACH;;AArEFO","names":["ProtoSignDocDecoder","constructor","signDoc","protoCodec","codec_1","decode","bytes","proto_1","tx","v1beta1","SignDoc","txBody","_txBody","TxBody","bodyBytes","txMsgs","msgs","msg","messages","push","unpackAny","authInfo","_authInfo","AuthInfo","authInfoBytes","chainId","accountNumber","toString","toBytes","encode","finish","toJSON","map","exports"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/@keplr-wallet/cosmos/src/stargate/decoder/index.ts"],"sourcesContent":["import { cosmos } from \"../proto\";\nimport SignDoc = cosmos.tx.v1beta1.SignDoc;\nimport { defaultProtoCodec, ProtoCodec } from \"../codec\";\n\nexport class ProtoSignDocDecoder {\n  public static decode(bytes: Uint8Array): ProtoSignDocDecoder {\n    return new ProtoSignDocDecoder(cosmos.tx.v1beta1.SignDoc.decode(bytes));\n  }\n\n  protected _txBody?: cosmos.tx.v1beta1.TxBody;\n  protected _authInfo?: cosmos.tx.v1beta1.AuthInfo;\n\n  constructor(\n    public readonly signDoc: SignDoc,\n    protected readonly protoCodec: ProtoCodec = defaultProtoCodec\n  ) {}\n\n  get txBody(): cosmos.tx.v1beta1.TxBody {\n    if (!this._txBody) {\n      this._txBody = cosmos.tx.v1beta1.TxBody.decode(this.signDoc.bodyBytes);\n    }\n\n    return this._txBody;\n  }\n\n  get txMsgs(): any[] {\n    const msgs: any[] = [];\n    for (const msg of this.txBody.messages) {\n      msgs.push(this.protoCodec.unpackAny(msg));\n    }\n\n    return msgs;\n  }\n\n  get authInfo(): cosmos.tx.v1beta1.AuthInfo {\n    if (!this._authInfo) {\n      this._authInfo = cosmos.tx.v1beta1.AuthInfo.decode(\n        this.signDoc.authInfoBytes\n      );\n    }\n\n    return this._authInfo;\n  }\n\n  get chainId(): string {\n    return this.signDoc.chainId;\n  }\n\n  get accountNumber(): string {\n    return this.signDoc.accountNumber.toString();\n  }\n\n  toBytes(): Uint8Array {\n    return cosmos.tx.v1beta1.SignDoc.encode(this.signDoc).finish();\n  }\n\n  toJSON(): any {\n    return {\n      txBody: {\n        ...this.txBody.toJSON(),\n        ...{\n          messages: this.txMsgs.map((msg) => {\n            if (msg && msg.toJSON) {\n              return msg.toJSON();\n            }\n            return msg;\n          }),\n        },\n      },\n      authInfo: this.authInfo.toJSON(),\n      chainId: this.chainId,\n      accountNumber: this.accountNumber,\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}