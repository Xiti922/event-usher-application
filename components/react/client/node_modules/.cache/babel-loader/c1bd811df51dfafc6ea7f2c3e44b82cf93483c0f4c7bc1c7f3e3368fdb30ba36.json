{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Mnemonic = void 0;\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst bip39 = require(\"bip39\");\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst bip32 = require(\"bip32\");\nconst buffer_1 = require(\"buffer/\");\nclass Mnemonic {\n  static generateWallet(rng) {\n    let path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : `m/44'/118'/0'/0/0`;\n    let password = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n    let strength = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 256;\n    return __awaiter(this, void 0, void 0, function* () {\n      const mnemonic = yield Mnemonic.generateSeed(rng, strength);\n      const privKey = Mnemonic.generateWalletFromMnemonic(mnemonic, path, password);\n      return {\n        privKey,\n        mnemonic\n      };\n    });\n  }\n  static validateMnemonic(mnemonic) {\n    bip39.validateMnemonic(mnemonic);\n  }\n  static generateSeed(rng) {\n    let strength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 128;\n    return __awaiter(this, void 0, void 0, function* () {\n      if (strength % 32 !== 0) {\n        throw new TypeError(\"invalid entropy\");\n      }\n      let bytes = new Uint8Array(strength / 8);\n      bytes = yield rng(bytes);\n      return bip39.entropyToMnemonic(buffer_1.Buffer.from(bytes).toString(\"hex\"));\n    });\n  }\n  static generateWalletFromMnemonic(mnemonic) {\n    let path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : `m/44'/118'/0'/0/0`;\n    let password = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n    const seed = bip39.mnemonicToSeedSync(mnemonic, password);\n    const masterKey = bip32.fromSeed(seed);\n    const hd = masterKey.derivePath(path);\n    const privateKey = hd.privateKey;\n    if (!privateKey) {\n      throw new Error(\"null hd key\");\n    }\n    return privateKey;\n  }\n}\nexports.Mnemonic = Mnemonic;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC;AAC9B;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAO,CAAC;AAE9B;AAmBA,MAAaE,QAAQ;EACnB,OAAaC,cAAc,CACzBC,GAAQ,EAGc;IAAA,IAFtBC,2EAAe,mBAAmB;IAAA,IAClCC,+EAAmB,EAAE;IAAA,IACrBC,+EAAmB,GAAG;;MAEtB,MAAMC,QAAQ,GAAG,MAAMN,QAAQ,CAACO,YAAY,CAACL,GAAG,EAAEG,QAAQ,CAAC;MAC3D,MAAMG,OAAO,GAAGR,QAAQ,CAACS,0BAA0B,CACjDH,QAAQ,EACRH,IAAI,EACJC,QAAQ,CACT;MAED,OAAO;QACLI,OAAO;QACPF;OACD;IACH,CAAC;;EAED,OAAOI,gBAAgB,CAACJ,QAAgB;IACtCT,KAAK,CAACa,gBAAgB,CAACJ,QAAQ,CAAC;EAClC;EAEA,OAAaC,YAAY,CAACL,GAAQ,EAAwB;IAAA,IAAtBG,+EAAmB,GAAG;;MACxD,IAAIA,QAAQ,GAAG,EAAE,KAAK,CAAC,EAAE;QACvB,MAAM,IAAIM,SAAS,CAAC,iBAAiB,CAAC;;MAExC,IAAIC,KAAK,GAAG,IAAIC,UAAU,CAACR,QAAQ,GAAG,CAAC,CAAC;MACxCO,KAAK,GAAG,MAAMV,GAAG,CAACU,KAAK,CAAC;MACxB,OAAOf,KAAK,CAACiB,iBAAiB,CAACC,eAAM,CAACC,IAAI,CAACJ,KAAK,CAAC,CAACK,QAAQ,CAAC,KAAK,CAAC,CAAC;IACpE,CAAC;;EAED,OAAOR,0BAA0B,CAC/BH,QAAgB,EAEK;IAAA,IADrBH,2EAAe,mBAAmB;IAAA,IAClCC,+EAAmB,EAAE;IAErB,MAAMc,IAAI,GAAGrB,KAAK,CAACsB,kBAAkB,CAACb,QAAQ,EAAEF,QAAQ,CAAC;IACzD,MAAMgB,SAAS,GAAGrB,KAAK,CAACsB,QAAQ,CAACH,IAAI,CAAC;IACtC,MAAMI,EAAE,GAAGF,SAAS,CAACG,UAAU,CAACpB,IAAI,CAAC;IAErC,MAAMqB,UAAU,GAAGF,EAAE,CAACE,UAAU;IAChC,IAAI,CAACA,UAAU,EAAE;MACf,MAAM,IAAIC,KAAK,CAAC,aAAa,CAAC;;IAEhC,OAAOD,UAAU;EACnB;;AA/CFE","names":["bip39","require","bip32","Mnemonic","generateWallet","rng","path","password","strength","mnemonic","generateSeed","privKey","generateWalletFromMnemonic","validateMnemonic","TypeError","bytes","Uint8Array","entropyToMnemonic","buffer_1","from","toString","seed","mnemonicToSeedSync","masterKey","fromSeed","hd","derivePath","privateKey","Error","exports"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/@keplr-wallet/crypto/src/mnemonic.ts"],"sourcesContent":["// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst bip39 = require(\"bip39\");\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst bip32 = require(\"bip32\");\n\nimport { Buffer } from \"buffer/\";\n\nexport type RNG = <\n  T extends\n    | Int8Array\n    | Int16Array\n    | Int32Array\n    | Uint8Array\n    | Uint16Array\n    | Uint32Array\n    | Uint8ClampedArray\n    | Float32Array\n    | Float64Array\n    | DataView\n    | null\n>(\n  array: T\n) => Promise<T>;\n\nexport class Mnemonic {\n  static async generateWallet(\n    rng: RNG,\n    path: string = `m/44'/118'/0'/0/0`,\n    password: string = \"\",\n    strength: number = 256\n  ): Promise<{ privKey: Uint8Array; mnemonic: string }> {\n    const mnemonic = await Mnemonic.generateSeed(rng, strength);\n    const privKey = Mnemonic.generateWalletFromMnemonic(\n      mnemonic,\n      path,\n      password\n    );\n\n    return {\n      privKey,\n      mnemonic,\n    };\n  }\n\n  static validateMnemonic(mnemonic: string) {\n    bip39.validateMnemonic(mnemonic);\n  }\n\n  static async generateSeed(rng: RNG, strength: number = 128): Promise<string> {\n    if (strength % 32 !== 0) {\n      throw new TypeError(\"invalid entropy\");\n    }\n    let bytes = new Uint8Array(strength / 8);\n    bytes = await rng(bytes);\n    return bip39.entropyToMnemonic(Buffer.from(bytes).toString(\"hex\"));\n  }\n\n  static generateWalletFromMnemonic(\n    mnemonic: string,\n    path: string = `m/44'/118'/0'/0/0`,\n    password: string = \"\"\n  ): Uint8Array {\n    const seed = bip39.mnemonicToSeedSync(mnemonic, password);\n    const masterKey = bip32.fromSeed(seed);\n    const hd = masterKey.derivePath(path);\n\n    const privateKey = hd.privateKey;\n    if (!privateKey) {\n      throw new Error(\"null hd key\");\n    }\n    return privateKey;\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}