{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ObservableQueryOsmosisMintParmas = void 0;\nconst chain_query_1 = require(\"../../../chain-query\");\nconst mobx_1 = require(\"mobx\");\nconst unit_1 = require(\"@keplr-wallet/unit\");\nclass ObservableQueryOsmosisMintParmas extends chain_query_1.ObservableChainQuery {\n  constructor(kvStore, chainId, chainGetter) {\n    super(kvStore, chainId, chainGetter, `/osmosis/mint/v1beta1/params`);\n    mobx_1.makeObservable(this);\n  }\n  get mintDenom() {\n    var _a;\n    return (_a = this.response) === null || _a === void 0 ? void 0 : _a.data.params.mint_denom;\n  }\n  get epochIdentifier() {\n    var _a;\n    return (_a = this.response) === null || _a === void 0 ? void 0 : _a.data.params.epoch_identifier;\n  }\n  get distributionProportions() {\n    if (!this.response) {\n      return {\n        staking: new unit_1.Dec(0),\n        poolIncentives: new unit_1.Dec(0),\n        developerRewards: new unit_1.Dec(0)\n      };\n    }\n    return {\n      staking: new unit_1.Dec(this.response.data.params.distribution_proportions.staking),\n      poolIncentives: new unit_1.Dec(this.response.data.params.distribution_proportions.pool_incentives),\n      developerRewards: new unit_1.Dec(this.response.data.params.distribution_proportions.developer_rewards)\n    };\n  }\n}\n__decorate([mobx_1.computed], ObservableQueryOsmosisMintParmas.prototype, \"distributionProportions\", null);\nexports.ObservableQueryOsmosisMintParmas = ObservableQueryOsmosisMintParmas;","map":{"version":3,"mappings":";;;;;;;;;;;;;AACA;AAGA;AACA;AAEA,MAAaA,gCAAiC,SAAQC,kCAAgC;EACpFC,YAAYC,OAAgB,EAAEC,OAAe,EAAEC,WAAwB;IACrE,KAAK,CAACF,OAAO,EAAEC,OAAO,EAAEC,WAAW,EAAE,8BAA8B,CAAC;IAEpEC,qBAAc,CAAC,IAAI,CAAC;EACtB;EAEA,IAAIC,SAAS;;IACX,aAAO,IAAI,CAACC,QAAQ,0CAAEC,IAAI,CAACC,MAAM,CAACC,UAAU;EAC9C;EAEA,IAAIC,eAAe;;IACjB,aAAO,IAAI,CAACJ,QAAQ,0CAAEC,IAAI,CAACC,MAAM,CAACG,gBAAgB;EACpD;EAGA,IAAIC,uBAAuB;IAKzB,IAAI,CAAC,IAAI,CAACN,QAAQ,EAAE;MAClB,OAAO;QACLO,OAAO,EAAE,IAAIC,UAAG,CAAC,CAAC,CAAC;QACnBC,cAAc,EAAE,IAAID,UAAG,CAAC,CAAC,CAAC;QAC1BE,gBAAgB,EAAE,IAAIF,UAAG,CAAC,CAAC;OAC5B;;IAGH,OAAO;MACLD,OAAO,EAAE,IAAIC,UAAG,CACd,IAAI,CAACR,QAAQ,CAACC,IAAI,CAACC,MAAM,CAACS,wBAAwB,CAACJ,OAAO,CAC3D;MACDE,cAAc,EAAE,IAAID,UAAG,CACrB,IAAI,CAACR,QAAQ,CAACC,IAAI,CAACC,MAAM,CAACS,wBAAwB,CAACC,eAAe,CACnE;MACDF,gBAAgB,EAAE,IAAIF,UAAG,CACvB,IAAI,CAACR,QAAQ,CAACC,IAAI,CAACC,MAAM,CAACS,wBAAwB,CAACE,iBAAiB;KAEvE;EACH;;AAxBAC,YADChB,eAAQ,+EAyBR;AAxCHiB","names":["ObservableQueryOsmosisMintParmas","chain_query_1","constructor","kvStore","chainId","chainGetter","mobx_1","mintDenom","response","data","params","mint_denom","epochIdentifier","epoch_identifier","distributionProportions","staking","unit_1","poolIncentives","developerRewards","distribution_proportions","pool_incentives","developer_rewards","__decorate","exports"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/@keplr-wallet/stores/src/query/cosmos/supply/osmosis/params.ts"],"sourcesContent":["import { ChainGetter } from \"../../../../common\";\nimport { ObservableChainQuery } from \"../../../chain-query\";\nimport { MintParmas } from \"./types\";\nimport { KVStore } from \"@keplr-wallet/common\";\nimport { computed, makeObservable } from \"mobx\";\nimport { Dec } from \"@keplr-wallet/unit\";\n\nexport class ObservableQueryOsmosisMintParmas extends ObservableChainQuery<MintParmas> {\n  constructor(kvStore: KVStore, chainId: string, chainGetter: ChainGetter) {\n    super(kvStore, chainId, chainGetter, `/osmosis/mint/v1beta1/params`);\n\n    makeObservable(this);\n  }\n\n  get mintDenom(): string | undefined {\n    return this.response?.data.params.mint_denom;\n  }\n\n  get epochIdentifier(): string | undefined {\n    return this.response?.data.params.epoch_identifier;\n  }\n\n  @computed\n  get distributionProportions(): {\n    staking: Dec;\n    poolIncentives: Dec;\n    developerRewards: Dec;\n  } {\n    if (!this.response) {\n      return {\n        staking: new Dec(0),\n        poolIncentives: new Dec(0),\n        developerRewards: new Dec(0),\n      };\n    }\n\n    return {\n      staking: new Dec(\n        this.response.data.params.distribution_proportions.staking\n      ),\n      poolIncentives: new Dec(\n        this.response.data.params.distribution_proportions.pool_incentives\n      ),\n      developerRewards: new Dec(\n        this.response.data.params.distribution_proportions.developer_rewards\n      ),\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}