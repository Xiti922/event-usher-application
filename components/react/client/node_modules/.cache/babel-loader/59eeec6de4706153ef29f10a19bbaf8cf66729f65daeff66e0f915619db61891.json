{"ast":null,"code":"\"use strict\";\n\n/**\n * formatter.js\n */\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar encoder = __importStar(require(\"./encoder\"));\nvar PemArmorString = {\n  'public': 'PUBLIC KEY',\n  'private': 'PRIVATE KEY',\n  'encryptedPrivate': 'ENCRYPTED PRIVATE KEY',\n  'certificate': 'CERTIFICATE',\n  'certRequest': 'CERTIFICATE REQUEST'\n};\n/**\n * Convert PEM armored string to Uint8Array\n * @param keydataB64Pem\n * @return {Uint8Array}\n */\nexports.pemToBin = function (keydataB64Pem) {\n  var keydataB64 = dearmorPem(keydataB64Pem);\n  return encoder.decodeBase64(keydataB64);\n};\n/**\n * Convert ArrayBuffer or TypedArray to PEM armored string with a specified type\n * @param keydata\n * @param type\n * @return {string}\n */\nexports.binToPem = function (keydata, type) {\n  var keydataB64 = encoder.encodeBase64(keydata);\n  return formatAsPem(keydataB64, type);\n};\n/**\n * Armor the given Base64 string and return PEM formatted string\n * @param str\n * @param type\n * @return {string}\n */\nvar formatAsPem = function (str, type) {\n  var typeString = PemArmorString[type];\n  var finalString = \"-----BEGIN \" + typeString + \"-----\\n\";\n  while (str.length > 0) {\n    finalString += str.substring(0, 64) + \"\\n\";\n    str = str.substring(64);\n  }\n  finalString = finalString + \"-----END \" + typeString + \"-----\";\n  return finalString;\n};\n/**\n * Dearmor the given PEM string and return Base64 string\n * @param str\n * @return {string}\n */\nvar dearmorPem = function (str) {\n  // const beginRegExp = RegExp('^-----[\\s]*BEGIN[^-]*KEY-----$', 'gm');\n  // const endRegExp = RegExp('^-----[\\s]*END[^-]*KEY-----$', 'gm');\n  var beginRegExp = RegExp('^-----[\\s]*BEGIN[^-]*-----$', 'gm');\n  var endRegExp = RegExp('^-----[\\s]*END[^-]*-----$', 'gm');\n  // check if the object starts from 'begin'\n  try {\n    var dearmored = str.split(beginRegExp)[1].split(endRegExp)[0];\n    dearmored = dearmored.replace(/\\r?\\n/g, '');\n    return dearmored;\n  } catch (e) {\n    throw new Error('Invalid format as PEM');\n  }\n};","map":{"version":3,"names":["__importStar","mod","__esModule","result","k","Object","hasOwnProperty","call","defineProperty","exports","value","encoder","require","PemArmorString","pemToBin","keydataB64Pem","keydataB64","dearmorPem","decodeBase64","binToPem","keydata","type","encodeBase64","formatAsPem","str","typeString","finalString","length","substring","beginRegExp","RegExp","endRegExp","dearmored","split","replace","e","Error"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/js-encoding-utils/dist/formatter.js"],"sourcesContent":["\"use strict\";\n/**\n * formatter.js\n */\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar encoder = __importStar(require(\"./encoder\"));\nvar PemArmorString = {\n    'public': 'PUBLIC KEY',\n    'private': 'PRIVATE KEY',\n    'encryptedPrivate': 'ENCRYPTED PRIVATE KEY',\n    'certificate': 'CERTIFICATE',\n    'certRequest': 'CERTIFICATE REQUEST'\n};\n/**\n * Convert PEM armored string to Uint8Array\n * @param keydataB64Pem\n * @return {Uint8Array}\n */\nexports.pemToBin = function (keydataB64Pem) {\n    var keydataB64 = dearmorPem(keydataB64Pem);\n    return encoder.decodeBase64(keydataB64);\n};\n/**\n * Convert ArrayBuffer or TypedArray to PEM armored string with a specified type\n * @param keydata\n * @param type\n * @return {string}\n */\nexports.binToPem = function (keydata, type) {\n    var keydataB64 = encoder.encodeBase64(keydata);\n    return formatAsPem(keydataB64, type);\n};\n/**\n * Armor the given Base64 string and return PEM formatted string\n * @param str\n * @param type\n * @return {string}\n */\nvar formatAsPem = function (str, type) {\n    var typeString = PemArmorString[type];\n    var finalString = \"-----BEGIN \" + typeString + \"-----\\n\";\n    while (str.length > 0) {\n        finalString += str.substring(0, 64) + \"\\n\";\n        str = str.substring(64);\n    }\n    finalString = finalString + \"-----END \" + typeString + \"-----\";\n    return finalString;\n};\n/**\n * Dearmor the given PEM string and return Base64 string\n * @param str\n * @return {string}\n */\nvar dearmorPem = function (str) {\n    // const beginRegExp = RegExp('^-----[\\s]*BEGIN[^-]*KEY-----$', 'gm');\n    // const endRegExp = RegExp('^-----[\\s]*END[^-]*KEY-----$', 'gm');\n    var beginRegExp = RegExp('^-----[\\s]*BEGIN[^-]*-----$', 'gm');\n    var endRegExp = RegExp('^-----[\\s]*END[^-]*-----$', 'gm');\n    // check if the object starts from 'begin'\n    try {\n        var dearmored = str.split(beginRegExp)[1].split(endRegExp)[0];\n        dearmored = dearmored.replace(/\\r?\\n/g, '');\n        return dearmored;\n    }\n    catch (e) {\n        throw new Error('Invalid format as PEM');\n    }\n};\n//# sourceMappingURL=formatter.js.map"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA,IAAIA,YAAY,GAAI,IAAI,IAAI,IAAI,CAACA,YAAY,IAAK,UAAUC,GAAG,EAAE;EAC7D,IAAIA,GAAG,IAAIA,GAAG,CAACC,UAAU,EAAE,OAAOD,GAAG;EACrC,IAAIE,MAAM,GAAG,CAAC,CAAC;EACf,IAAIF,GAAG,IAAI,IAAI,EAAE,KAAK,IAAIG,CAAC,IAAIH,GAAG,EAAE,IAAII,MAAM,CAACC,cAAc,CAACC,IAAI,CAACN,GAAG,EAAEG,CAAC,CAAC,EAAED,MAAM,CAACC,CAAC,CAAC,GAAGH,GAAG,CAACG,CAAC,CAAC;EAC9FD,MAAM,CAAC,SAAS,CAAC,GAAGF,GAAG;EACvB,OAAOE,MAAM;AACjB,CAAC;AACDE,MAAM,CAACG,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,IAAIC,OAAO,GAAGX,YAAY,CAACY,OAAO,CAAC,WAAW,CAAC,CAAC;AAChD,IAAIC,cAAc,GAAG;EACjB,QAAQ,EAAE,YAAY;EACtB,SAAS,EAAE,aAAa;EACxB,kBAAkB,EAAE,uBAAuB;EAC3C,aAAa,EAAE,aAAa;EAC5B,aAAa,EAAE;AACnB,CAAC;AACD;AACA;AACA;AACA;AACA;AACAJ,OAAO,CAACK,QAAQ,GAAG,UAAUC,aAAa,EAAE;EACxC,IAAIC,UAAU,GAAGC,UAAU,CAACF,aAAa,CAAC;EAC1C,OAAOJ,OAAO,CAACO,YAAY,CAACF,UAAU,CAAC;AAC3C,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACAP,OAAO,CAACU,QAAQ,GAAG,UAAUC,OAAO,EAAEC,IAAI,EAAE;EACxC,IAAIL,UAAU,GAAGL,OAAO,CAACW,YAAY,CAACF,OAAO,CAAC;EAC9C,OAAOG,WAAW,CAACP,UAAU,EAAEK,IAAI,CAAC;AACxC,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,IAAIE,WAAW,GAAG,UAAUC,GAAG,EAAEH,IAAI,EAAE;EACnC,IAAII,UAAU,GAAGZ,cAAc,CAACQ,IAAI,CAAC;EACrC,IAAIK,WAAW,GAAG,aAAa,GAAGD,UAAU,GAAG,SAAS;EACxD,OAAOD,GAAG,CAACG,MAAM,GAAG,CAAC,EAAE;IACnBD,WAAW,IAAIF,GAAG,CAACI,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,IAAI;IAC1CJ,GAAG,GAAGA,GAAG,CAACI,SAAS,CAAC,EAAE,CAAC;EAC3B;EACAF,WAAW,GAAGA,WAAW,GAAG,WAAW,GAAGD,UAAU,GAAG,OAAO;EAC9D,OAAOC,WAAW;AACtB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,IAAIT,UAAU,GAAG,UAAUO,GAAG,EAAE;EAC5B;EACA;EACA,IAAIK,WAAW,GAAGC,MAAM,CAAC,6BAA6B,EAAE,IAAI,CAAC;EAC7D,IAAIC,SAAS,GAAGD,MAAM,CAAC,2BAA2B,EAAE,IAAI,CAAC;EACzD;EACA,IAAI;IACA,IAAIE,SAAS,GAAGR,GAAG,CAACS,KAAK,CAACJ,WAAW,CAAC,CAAC,CAAC,CAAC,CAACI,KAAK,CAACF,SAAS,CAAC,CAAC,CAAC,CAAC;IAC7DC,SAAS,GAAGA,SAAS,CAACE,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;IAC3C,OAAOF,SAAS;EACpB,CAAC,CACD,OAAOG,CAAC,EAAE;IACN,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EAC5C;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}