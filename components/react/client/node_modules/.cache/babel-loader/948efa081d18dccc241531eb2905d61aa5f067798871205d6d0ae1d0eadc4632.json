{"ast":null,"code":"\"use strict\";\n\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst block_1 = require(\"../../internals/block\");\n/**\n * Polyfill for the AES-CTR (counter) mode of operation.\n *\n * Uses a non-constant-time (lookup table-based) AES polyfill.\n * See polyfill/aes.ts for more information on the security impact.\n *\n * Note that CTR mode is malleable and generally should not be used without\n * authentication. Instead, use an authenticated encryption mode, like AES-SIV!\n */\nclass PolyfillAesCtr {\n  constructor(cipher) {\n    // Set cipher.\n    this._cipher = cipher;\n    // Allocate space for counter.\n    this._counter = new block_1.default();\n    // Allocate buffer for encrypted block.\n    this._buffer = new block_1.default();\n  }\n  clear() {\n    this._buffer.clear();\n    this._counter.clear();\n    this._cipher.clear();\n    return this;\n  }\n  encryptCtr(iv, plaintext) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (iv.length !== block_1.default.SIZE) {\n        throw new Error(\"CTR: iv length must be equal to cipher block size\");\n      }\n      // Copy IV to counter, overwriting it.\n      this._counter.data.set(iv);\n      // Set buffer position to length of buffer\n      // so that the first cipher block is generated.\n      let bufferPos = block_1.default.SIZE;\n      const result = new Uint8Array(plaintext.length);\n      for (let i = 0; i < plaintext.length; i++) {\n        if (bufferPos === block_1.default.SIZE) {\n          this._buffer.copy(this._counter);\n          this._cipher.encryptBlock(this._buffer);\n          bufferPos = 0;\n          incrementCounter(this._counter);\n        }\n        result[i] = plaintext[i] ^ this._buffer.data[bufferPos++];\n      }\n      return result;\n    });\n  }\n}\nexports.default = PolyfillAesCtr;\n// Increment an AES-CTR mode counter, intentionally wrapping/overflowing\nfunction incrementCounter(counter) {\n  let carry = 1;\n  for (let i = block_1.default.SIZE - 1; i >= 0; i--) {\n    carry += counter.data[i] & 0xff | 0;\n    counter.data[i] = carry & 0xff;\n    carry >>>= 8;\n  }\n}","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","block_1","require","PolyfillAesCtr","constructor","cipher","_cipher","_counter","default","_buffer","clear","encryptCtr","iv","plaintext","length","SIZE","Error","data","set","bufferPos","Uint8Array","i","copy","encryptBlock","incrementCounter","counter","carry"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/miscreant/release/providers/polyfill/aes_ctr.js"],"sourcesContent":["\"use strict\";\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst block_1 = require(\"../../internals/block\");\n/**\n * Polyfill for the AES-CTR (counter) mode of operation.\n *\n * Uses a non-constant-time (lookup table-based) AES polyfill.\n * See polyfill/aes.ts for more information on the security impact.\n *\n * Note that CTR mode is malleable and generally should not be used without\n * authentication. Instead, use an authenticated encryption mode, like AES-SIV!\n */\nclass PolyfillAesCtr {\n    constructor(cipher) {\n        // Set cipher.\n        this._cipher = cipher;\n        // Allocate space for counter.\n        this._counter = new block_1.default();\n        // Allocate buffer for encrypted block.\n        this._buffer = new block_1.default();\n    }\n    clear() {\n        this._buffer.clear();\n        this._counter.clear();\n        this._cipher.clear();\n        return this;\n    }\n    encryptCtr(iv, plaintext) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (iv.length !== block_1.default.SIZE) {\n                throw new Error(\"CTR: iv length must be equal to cipher block size\");\n            }\n            // Copy IV to counter, overwriting it.\n            this._counter.data.set(iv);\n            // Set buffer position to length of buffer\n            // so that the first cipher block is generated.\n            let bufferPos = block_1.default.SIZE;\n            const result = new Uint8Array(plaintext.length);\n            for (let i = 0; i < plaintext.length; i++) {\n                if (bufferPos === block_1.default.SIZE) {\n                    this._buffer.copy(this._counter);\n                    this._cipher.encryptBlock(this._buffer);\n                    bufferPos = 0;\n                    incrementCounter(this._counter);\n                }\n                result[i] = plaintext[i] ^ this._buffer.data[bufferPos++];\n            }\n            return result;\n        });\n    }\n}\nexports.default = PolyfillAesCtr;\n// Increment an AES-CTR mode counter, intentionally wrapping/overflowing\nfunction incrementCounter(counter) {\n    let carry = 1;\n    for (let i = block_1.default.SIZE - 1; i >= 0; i--) {\n        carry += (counter.data[i] & 0xff) | 0;\n        counter.data[i] = carry & 0xff;\n        carry >>>= 8;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}