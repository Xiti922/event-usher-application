{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CheckURLIsPhishingMsg = void 0;\nconst router_1 = require(\"@keplr-wallet/router\");\nconst constants_1 = require(\"./constants\");\nconst utils_1 = require(\"./utils\");\nclass CheckURLIsPhishingMsg extends router_1.Message {\n  static type() {\n    return \"check-url-is-phishing\";\n  }\n  constructor() {\n    super();\n  }\n  validateBasic() {\n    const url = new URL(this.origin);\n    // Will throw an error if url has not second level domain.\n    utils_1.parseDomainUntilSecondLevel(url.origin);\n  }\n  approveExternal() {\n    return true;\n  }\n  route() {\n    return constants_1.ROUTE;\n  }\n  type() {\n    return CheckURLIsPhishingMsg.type();\n  }\n}\nexports.CheckURLIsPhishingMsg = CheckURLIsPhishingMsg;","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AACA;AAEA,MAAaA,qBAAsB,SAAQC,gBAAgB;EAClD,OAAOC,IAAI;IAChB,OAAO,uBAAuB;EAChC;EAEAC;IACE,KAAK,EAAE;EACT;EAEAC,aAAa;IACX,MAAMC,GAAG,GAAG,IAAIC,GAAG,CAAC,IAAI,CAACC,MAAM,CAAC;IAEhC;IACAC,mCAA2B,CAACH,GAAG,CAACE,MAAM,CAAC;EACzC;EAEAE,eAAe;IACb,OAAO,IAAI;EACb;EAEAC,KAAK;IACH,OAAOC,iBAAK;EACd;EAEAT,IAAI;IACF,OAAOF,qBAAqB,CAACE,IAAI,EAAE;EACrC;;AA1BFU","names":["CheckURLIsPhishingMsg","router_1","type","constructor","validateBasic","url","URL","origin","utils_1","approveExternal","route","constants_1","exports"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/@keplr-wallet/background/src/phishing-list/messages.ts"],"sourcesContent":["import { Message } from \"@keplr-wallet/router\";\nimport { ROUTE } from \"./constants\";\nimport { parseDomainUntilSecondLevel } from \"./utils\";\n\nexport class CheckURLIsPhishingMsg extends Message<boolean> {\n  public static type() {\n    return \"check-url-is-phishing\";\n  }\n\n  constructor() {\n    super();\n  }\n\n  validateBasic(): void {\n    const url = new URL(this.origin);\n\n    // Will throw an error if url has not second level domain.\n    parseDomainUntilSecondLevel(url.origin);\n  }\n\n  approveExternal(): boolean {\n    return true;\n  }\n\n  route(): string {\n    return ROUTE;\n  }\n\n  type(): string {\n    return CheckURLIsPhishingMsg.type();\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}