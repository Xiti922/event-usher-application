{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SecretQueriesImpl = exports.SecretQueries = void 0;\nconst contract_hash_1 = require(\"./contract-hash\");\nconst secret20_contract_info_1 = require(\"./secret20-contract-info\");\nconst secret20_balance_1 = require(\"./secret20-balance\");\nexports.SecretQueries = {\n  use(options) {\n    return (queriesSetBase, kvStore, chainId, chainGetter) => {\n      return {\n        secret: new SecretQueriesImpl(queriesSetBase, kvStore, chainId, chainGetter, options.apiGetter)\n      };\n    };\n  }\n};\nclass SecretQueriesImpl {\n  constructor(base, kvStore, chainId, chainGetter, apiGetter) {\n    this.querySecretContractCodeHash = new contract_hash_1.ObservableQuerySecretContractCodeHash(kvStore, chainId, chainGetter);\n    base.queryBalances.addBalanceRegistry(new secret20_balance_1.ObservableQuerySecret20BalanceRegistry(kvStore, apiGetter, this.querySecretContractCodeHash));\n    this.querySecret20ContractInfo = new secret20_contract_info_1.ObservableQuerySecret20ContractInfo(kvStore, chainId, chainGetter, apiGetter, this.querySecretContractCodeHash);\n  }\n}\nexports.SecretQueriesImpl = SecretQueriesImpl;","map":{"version":3,"mappings":";;;;;;AAGA;AACA;AAEA;AAOaA,qBAAa,GAAG;EAC3BC,GAAG,CAACC,OAEH;IAMC,OAAO,CACLC,cAA8B,EAC9BC,OAAgB,EAChBC,OAAe,EACfC,WAAwB,KACtB;MACF,OAAO;QACLC,MAAM,EAAE,IAAIC,iBAAiB,CAC3BL,cAAc,EACdC,OAAO,EACPC,OAAO,EACPC,WAAW,EACXJ,OAAO,CAACO,SAAS;OAEpB;IACH,CAAC;EACH;CACD;AAED,MAAaD,iBAAiB;EAI5BE,YACEC,IAAoB,EACpBP,OAAgB,EAChBC,OAAe,EACfC,WAAwB,EACxBG,SAA2C;IAE3C,IAAI,CAACG,2BAA2B,GAAG,IAAIC,qDAAqC,CAC1ET,OAAO,EACPC,OAAO,EACPC,WAAW,CACZ;IAEDK,IAAI,CAACG,aAAa,CAACC,kBAAkB,CACnC,IAAIC,yDAAsC,CACxCZ,OAAO,EACPK,SAAS,EACT,IAAI,CAACG,2BAA2B,CACjC,CACF;IAED,IAAI,CAACK,yBAAyB,GAAG,IAAIC,4DAAmC,CACtEd,OAAO,EACPC,OAAO,EACPC,WAAW,EACXG,SAAS,EACT,IAAI,CAACG,2BAA2B,CACjC;EACH;;AAhCFZ","names":["exports","use","options","queriesSetBase","kvStore","chainId","chainGetter","secret","SecretQueriesImpl","apiGetter","constructor","base","querySecretContractCodeHash","contract_hash_1","queryBalances","addBalanceRegistry","secret20_balance_1","querySecret20ContractInfo","secret20_contract_info_1"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/@keplr-wallet/stores/src/query/secret-wasm/queries.ts"],"sourcesContent":["import { QueriesSetBase } from \"../queries\";\nimport { ChainGetter } from \"../../common\";\nimport { KVStore } from \"@keplr-wallet/common\";\nimport { ObservableQuerySecretContractCodeHash } from \"./contract-hash\";\nimport { ObservableQuerySecret20ContractInfo } from \"./secret20-contract-info\";\nimport { DeepReadonly } from \"utility-types\";\nimport { ObservableQuerySecret20BalanceRegistry } from \"./secret20-balance\";\nimport { Keplr } from \"@keplr-wallet/types\";\n\nexport interface SecretQueries {\n  secret: SecretQueriesImpl;\n}\n\nexport const SecretQueries = {\n  use(options: {\n    apiGetter: () => Promise<Keplr | undefined>;\n  }): (\n    queriesSetBase: QueriesSetBase,\n    kvStore: KVStore,\n    chainId: string,\n    chainGetter: ChainGetter\n  ) => SecretQueries {\n    return (\n      queriesSetBase: QueriesSetBase,\n      kvStore: KVStore,\n      chainId: string,\n      chainGetter: ChainGetter\n    ) => {\n      return {\n        secret: new SecretQueriesImpl(\n          queriesSetBase,\n          kvStore,\n          chainId,\n          chainGetter,\n          options.apiGetter\n        ),\n      };\n    };\n  },\n};\n\nexport class SecretQueriesImpl {\n  public readonly querySecretContractCodeHash: DeepReadonly<ObservableQuerySecretContractCodeHash>;\n  public readonly querySecret20ContractInfo: DeepReadonly<ObservableQuerySecret20ContractInfo>;\n\n  constructor(\n    base: QueriesSetBase,\n    kvStore: KVStore,\n    chainId: string,\n    chainGetter: ChainGetter,\n    apiGetter: () => Promise<Keplr | undefined>\n  ) {\n    this.querySecretContractCodeHash = new ObservableQuerySecretContractCodeHash(\n      kvStore,\n      chainId,\n      chainGetter\n    );\n\n    base.queryBalances.addBalanceRegistry(\n      new ObservableQuerySecret20BalanceRegistry(\n        kvStore,\n        apiGetter,\n        this.querySecretContractCodeHash\n      )\n    );\n\n    this.querySecret20ContractInfo = new ObservableQuerySecret20ContractInfo(\n      kvStore,\n      chainId,\n      chainGetter,\n      apiGetter,\n      this.querySecretContractCodeHash\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}