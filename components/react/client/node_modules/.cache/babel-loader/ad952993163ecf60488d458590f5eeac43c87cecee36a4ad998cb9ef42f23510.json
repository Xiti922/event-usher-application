{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RatePretty = void 0;\nconst int_pretty_1 = require(\"./int-pretty\");\n/**\n * RatePretty treats `Dec` in rate form for easy calculation, and displays it as a percentage to the user by using toString().\n * By default, if the value is less than maxDeciamls, it is displayed using an inequality sign (Ex. < 0.001%)\n */\nclass RatePretty {\n  constructor(amount) {\n    this.amount = amount;\n    this._options = {\n      separator: \"\",\n      symbol: \"%\"\n    };\n    this.intPretty = new int_pretty_1.IntPretty(amount);\n    this.intPretty = this.intPretty.maxDecimals(3).shrink(false).trim(true).locale(true).inequalitySymbol(true);\n  }\n  get options() {\n    return Object.assign(Object.assign({}, this.intPretty.options), this._options);\n  }\n  separator(str) {\n    const pretty = this.clone();\n    pretty._options.separator = str;\n    return pretty;\n  }\n  symbol(str) {\n    const pretty = this.clone();\n    pretty._options.symbol = str;\n    return pretty;\n  }\n  moveDecimalPointLeft(delta) {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.moveDecimalPointLeft(delta);\n    return pretty;\n  }\n  moveDecimalPointRight(delta) {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.moveDecimalPointRight(delta);\n    return pretty;\n  }\n  maxDecimals(max) {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.maxDecimals(max);\n    return pretty;\n  }\n  inequalitySymbol(bool) {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.inequalitySymbol(bool);\n    return pretty;\n  }\n  inequalitySymbolSeparator(str) {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.inequalitySymbolSeparator(str);\n    return pretty;\n  }\n  trim(bool) {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.trim(bool);\n    return pretty;\n  }\n  shrink(bool) {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.shrink(bool);\n    return pretty;\n  }\n  locale(locale) {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.locale(locale);\n    return pretty;\n  }\n  /**\n   * Ready indicates the actual value is ready to show the users.\n   * Even if the ready option is false, it expects that the value can be shown to users (probably as 0).\n   * The method that returns prettied value may return `undefined` or `null` if the value is not ready.\n   * But, alternatively, it can return the 0 value that can be shown the users anyway, but indicates that the value is not ready.\n   * @param bool\n   */\n  ready(bool) {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.ready(bool);\n    return pretty;\n  }\n  get isReady() {\n    return this.intPretty.isReady;\n  }\n  add(target) {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.add(target);\n    return pretty;\n  }\n  sub(target) {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.sub(target);\n    return pretty;\n  }\n  mul(target) {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.mul(target);\n    return pretty;\n  }\n  quo(target) {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.quo(target);\n    return pretty;\n  }\n  toDec() {\n    return this.intPretty.toDec();\n  }\n  toString() {\n    return this.intPretty.moveDecimalPointRight(2).toStringWithSymbols(\"\", `${this._options.separator}${this._options.symbol}`);\n  }\n  clone() {\n    const pretty = new RatePretty(this.amount);\n    pretty._options = Object.assign({}, this._options);\n    pretty.intPretty = this.intPretty.clone();\n    return pretty;\n  }\n}\nexports.RatePretty = RatePretty;","map":{"version":3,"mappings":"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","names":["RatePretty","constructor","amount","separator","symbol","intPretty","int_pretty_1","maxDecimals","shrink","trim","locale","inequalitySymbol","options","_options","str","pretty","clone","moveDecimalPointLeft","delta","moveDecimalPointRight","max","bool","inequalitySymbolSeparator","ready","isReady","add","target","sub","mul","quo","toDec","toString","toStringWithSymbols","exports"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/@keplr-wallet/unit/src/rate-pretty.ts"],"sourcesContent":["import { IntPretty, IntPrettyOptions } from \"./int-pretty\";\nimport { Dec } from \"./decimal\";\nimport { DeepReadonly } from \"utility-types\";\nimport bigInteger from \"big-integer\";\n\nexport type RatePrettyOptions = {\n  separator: string;\n  symbol: string;\n};\n\n/**\n * RatePretty treats `Dec` in rate form for easy calculation, and displays it as a percentage to the user by using toString().\n * By default, if the value is less than maxDeciamls, it is displayed using an inequality sign (Ex. < 0.001%)\n */\nexport class RatePretty {\n  protected intPretty: IntPretty;\n\n  protected _options: RatePrettyOptions = {\n    separator: \"\",\n    symbol: \"%\",\n  };\n\n  constructor(protected amount: Dec | { toDec(): Dec } | bigInteger.BigNumber) {\n    this.intPretty = new IntPretty(amount);\n\n    this.intPretty = this.intPretty\n      .maxDecimals(3)\n      .shrink(false)\n      .trim(true)\n      .locale(true)\n      .inequalitySymbol(true);\n  }\n\n  get options(): DeepReadonly<\n    Omit<IntPrettyOptions, \"locale\"> & RatePrettyOptions\n  > {\n    return {\n      ...this.intPretty.options,\n      ...this._options,\n    };\n  }\n\n  separator(str: string): RatePretty {\n    const pretty = this.clone();\n    pretty._options.separator = str;\n    return pretty;\n  }\n\n  symbol(str: string): RatePretty {\n    const pretty = this.clone();\n    pretty._options.symbol = str;\n    return pretty;\n  }\n\n  moveDecimalPointLeft(delta: number): RatePretty {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.moveDecimalPointLeft(delta);\n    return pretty;\n  }\n\n  moveDecimalPointRight(delta: number): RatePretty {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.moveDecimalPointRight(delta);\n    return pretty;\n  }\n\n  maxDecimals(max: number): RatePretty {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.maxDecimals(max);\n    return pretty;\n  }\n\n  inequalitySymbol(bool: boolean): RatePretty {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.inequalitySymbol(bool);\n    return pretty;\n  }\n\n  inequalitySymbolSeparator(str: string): RatePretty {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.inequalitySymbolSeparator(str);\n    return pretty;\n  }\n\n  trim(bool: boolean): RatePretty {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.trim(bool);\n    return pretty;\n  }\n\n  shrink(bool: boolean): RatePretty {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.shrink(bool);\n    return pretty;\n  }\n\n  locale(locale: boolean): RatePretty {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.locale(locale);\n    return pretty;\n  }\n\n  /**\n   * Ready indicates the actual value is ready to show the users.\n   * Even if the ready option is false, it expects that the value can be shown to users (probably as 0).\n   * The method that returns prettied value may return `undefined` or `null` if the value is not ready.\n   * But, alternatively, it can return the 0 value that can be shown the users anyway, but indicates that the value is not ready.\n   * @param bool\n   */\n  ready(bool: boolean): RatePretty {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.ready(bool);\n    return pretty;\n  }\n\n  get isReady(): boolean {\n    return this.intPretty.isReady;\n  }\n\n  add(target: Dec | { toDec(): Dec }): RatePretty {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.add(target);\n    return pretty;\n  }\n\n  sub(target: Dec | { toDec(): Dec }): RatePretty {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.sub(target);\n    return pretty;\n  }\n\n  mul(target: Dec | { toDec(): Dec }): RatePretty {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.mul(target);\n    return pretty;\n  }\n\n  quo(target: Dec | { toDec(): Dec }): RatePretty {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.quo(target);\n    return pretty;\n  }\n\n  toDec(): Dec {\n    return this.intPretty.toDec();\n  }\n\n  toString(): string {\n    return this.intPretty\n      .moveDecimalPointRight(2)\n      .toStringWithSymbols(\n        \"\",\n        `${this._options.separator}${this._options.symbol}`\n      );\n  }\n\n  clone(): RatePretty {\n    const pretty = new RatePretty(this.amount);\n    pretty._options = {\n      ...this._options,\n    };\n    pretty.intPretty = this.intPretty.clone();\n    return pretty;\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}