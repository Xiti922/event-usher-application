{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CompactBitArray = exports.MultiSignature = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(require(\"long\"));\nconst minimal_1 = __importDefault(require(\"protobufjs/minimal\"));\nexports.protobufPackage = \"cosmos.crypto.multisig.v1beta1\";\nfunction createBaseMultiSignature() {\n  return {\n    signatures: []\n  };\n}\nexports.MultiSignature = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    for (const v of message.signatures) {\n      writer.uint32(10).bytes(v);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMultiSignature();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.signatures.push(reader.bytes());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    return {\n      signatures: Array.isArray(object === null || object === void 0 ? void 0 : object.signatures) ? object.signatures.map(e => bytesFromBase64(e)) : []\n    };\n  },\n  toJSON(message) {\n    const obj = {};\n    if (message.signatures) {\n      obj.signatures = message.signatures.map(e => base64FromBytes(e !== undefined ? e : new Uint8Array()));\n    } else {\n      obj.signatures = [];\n    }\n    return obj;\n  },\n  fromPartial(object) {\n    var _a;\n    const message = createBaseMultiSignature();\n    message.signatures = ((_a = object.signatures) === null || _a === void 0 ? void 0 : _a.map(e => e)) || [];\n    return message;\n  }\n};\nfunction createBaseCompactBitArray() {\n  return {\n    extraBitsStored: 0,\n    elems: new Uint8Array()\n  };\n}\nexports.CompactBitArray = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.extraBitsStored !== 0) {\n      writer.uint32(8).uint32(message.extraBitsStored);\n    }\n    if (message.elems.length !== 0) {\n      writer.uint32(18).bytes(message.elems);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseCompactBitArray();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.extraBitsStored = reader.uint32();\n          break;\n        case 2:\n          message.elems = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    return {\n      extraBitsStored: isSet(object.extraBitsStored) ? Number(object.extraBitsStored) : 0,\n      elems: isSet(object.elems) ? bytesFromBase64(object.elems) : new Uint8Array()\n    };\n  },\n  toJSON(message) {\n    const obj = {};\n    message.extraBitsStored !== undefined && (obj.extraBitsStored = Math.round(message.extraBitsStored));\n    message.elems !== undefined && (obj.elems = base64FromBytes(message.elems !== undefined ? message.elems : new Uint8Array()));\n    return obj;\n  },\n  fromPartial(object) {\n    var _a, _b;\n    const message = createBaseCompactBitArray();\n    message.extraBitsStored = (_a = object.extraBitsStored) !== null && _a !== void 0 ? _a : 0;\n    message.elems = (_b = object.elems) !== null && _b !== void 0 ? _b : new Uint8Array();\n    return message;\n  }\n};\nvar globalThis = (() => {\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  if (typeof self !== \"undefined\") return self;\n  if (typeof window !== \"undefined\") return window;\n  if (typeof global !== \"undefined\") return global;\n  throw \"Unable to locate global object\";\n})();\nconst atob = globalThis.atob || (b64 => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64) {\n  const bin = atob(b64);\n  const arr = new Uint8Array(bin.length);\n  for (let i = 0; i < bin.length; ++i) {\n    arr[i] = bin.charCodeAt(i);\n  }\n  return arr;\n}\nconst btoa = globalThis.btoa || (bin => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr) {\n  const bin = [];\n  for (const byte of arr) {\n    bin.push(String.fromCharCode(byte));\n  }\n  return btoa(bin.join(\"\"));\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n  minimal_1.default.util.Long = long_1.default;\n  minimal_1.default.configure();\n}\nfunction isSet(value) {\n  return value !== null && value !== undefined;\n}","map":{"version":3,"mappings":"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","names":["exports","createBaseMultiSignature","signatures","encode","message","writer","minimal_1","Writer","create","v","uint32","bytes","decode","input","length","reader","Reader","end","undefined","len","pos","tag","push","skipType","fromJSON","object","Array","isArray","map","e","bytesFromBase64","toJSON","obj","base64FromBytes","Uint8Array","fromPartial","createBaseCompactBitArray","extraBitsStored","elems","isSet","Number","Math","round","globalThis","self","window","global","atob","b64","Buffer","from","toString","bin","arr","i","charCodeAt","btoa","byte","String","fromCharCode","join","util","Long","long_1","configure","value"],"sources":["../../../../../src/cosmos/crypto/multisig/v1beta1/multisig.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}