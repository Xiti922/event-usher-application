{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LcdClient = exports.normalizeLcdApiArray = void 0;\n/* eslint-disable no-dupe-class-members, @typescript-eslint/ban-types, @typescript-eslint/naming-convention */\nconst utils_1 = require(\"@cosmjs/utils\");\nconst axios_1 = __importDefault(require(\"axios\"));\nconst base_1 = require(\"./base\");\nfunction normalizeLcdApiArray(backend) {\n  return backend || [];\n}\nexports.normalizeLcdApiArray = normalizeLcdApiArray;\n// We want to get message data from 500 errors\n// https://stackoverflow.com/questions/56577124/how-to-handle-500-error-message-with-axios\n// this should be chained to catch one error and throw a more informative one\nfunction parseAxiosError(err) {\n  var _a;\n  // use the error message sent from server, not default 500 msg\n  if ((_a = err.response) === null || _a === void 0 ? void 0 : _a.data) {\n    let errorText;\n    const data = err.response.data;\n    // expect { error: string }, but otherwise dump\n    if (data.error && typeof data.error === \"string\") {\n      errorText = data.error;\n    } else if (typeof data === \"string\") {\n      errorText = data;\n    } else {\n      errorText = JSON.stringify(data);\n    }\n    throw new Error(`${errorText} (HTTP ${err.response.status})`);\n  } else {\n    throw err;\n  }\n}\n/**\n * A client to the LCD's (light client daemon) API.\n * This light client connects to Tendermint (i.e. the chain), encodes/decodes Amino data for us and provides a convenient JSON interface.\n *\n * This _JSON over HTTP_ API is sometimes referred to as \"REST\" or \"RPC\", which are both misleading terms\n * for the same thing.\n *\n * Please note that the client to the LCD can not verify light client proofs. When using this,\n * you need to trust the API provider as well as the network connection between client and API.\n *\n * @see https://cosmos.network/rpc\n */\nclass LcdClient {\n  /**\n   * Creates a new client to interact with a Cosmos SDK light client daemon.\n   * This class tries to be a direct mapping onto the API. Some basic decoding and normalizatin is done\n   * but things like caching are done at a higher level.\n   *\n   * When building apps, you should not need to use this class directly. If you do, this indicates a missing feature\n   * in higher level components. Feel free to raise an issue in this case.\n   *\n   * @param apiUrl The URL of a Cosmos SDK light client daemon API (sometimes called REST server or REST API)\n   * @param broadcastMode Defines at which point of the transaction processing the broadcastTx method returns\n   */\n  constructor(apiUrl) {\n    let broadcastMode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : base_1.BroadcastMode.Block;\n    const headers = {\n      post: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    this.client = axios_1.default.create({\n      baseURL: apiUrl,\n      headers: headers\n    });\n    this.broadcastMode = broadcastMode;\n  }\n  static withExtensions(options) {\n    const client = new LcdClient(options.apiUrl, options.broadcastMode);\n    for (var _len = arguments.length, extensionSetups = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      extensionSetups[_key - 1] = arguments[_key];\n    }\n    const extensions = extensionSetups.map(setupExtension => setupExtension(client));\n    for (const extension of extensions) {\n      utils_1.assert(utils_1.isNonNullObject(extension), `Extension must be a non-null object`);\n      for (const [moduleKey, moduleValue] of Object.entries(extension)) {\n        utils_1.assert(utils_1.isNonNullObject(moduleValue), `Module must be a non-null object. Found type ${typeof moduleValue} for module \"${moduleKey}\".`);\n        const current = client[moduleKey] || {};\n        client[moduleKey] = Object.assign(Object.assign({}, current), moduleValue);\n      }\n    }\n    return client;\n  }\n  async get(path, params) {\n    const {\n      data\n    } = await this.client.get(path, {\n      params\n    }).catch(parseAxiosError);\n    if (data === null) {\n      throw new Error(\"Received null response from server\");\n    }\n    return data;\n  }\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  async post(path, params) {\n    if (!utils_1.isNonNullObject(params)) throw new Error(\"Got unexpected type of params. Expected object.\");\n    const {\n      data\n    } = await this.client.post(path, params).catch(parseAxiosError);\n    if (data === null) {\n      throw new Error(\"Received null response from server\");\n    }\n    return data;\n  }\n  // The /blocks endpoints\n  async blocksLatest() {\n    const responseData = await this.get(\"/blocks/latest\");\n    if (!responseData.block) {\n      throw new Error(\"Unexpected response data format\");\n    }\n    return responseData;\n  }\n  async blocks(height) {\n    const responseData = await this.get(`/blocks/${height}`);\n    if (!responseData.block) {\n      throw new Error(\"Unexpected response data format\");\n    }\n    return responseData;\n  }\n  // The /node_info endpoint\n  async nodeInfo() {\n    const responseData = await this.get(\"/node_info\");\n    if (!responseData.node_info) {\n      throw new Error(\"Unexpected response data format\");\n    }\n    return responseData;\n  }\n  // The /txs endpoints\n  async txById(id) {\n    const responseData = await this.get(`/txs/${id}`);\n    if (!responseData.tx) {\n      throw new Error(\"Unexpected response data format\");\n    }\n    return responseData;\n  }\n  async txsQuery(query) {\n    const responseData = await this.get(`/txs?${query}`);\n    if (!responseData.txs) {\n      throw new Error(\"Unexpected response data format\");\n    }\n    return responseData;\n  }\n  /** returns the amino-encoding of the transaction performed by the server */\n  async encodeTx(tx) {\n    const responseData = await this.post(\"/txs/encode\", tx);\n    if (!responseData.tx) {\n      throw new Error(\"Unexpected response data format\");\n    }\n    return responseData;\n  }\n  /**\n   * Broadcasts a signed transaction to the transaction pool.\n   * Depending on the client's broadcast mode, this might or might\n   * wait for checkTx or deliverTx to be executed before returning.\n   *\n   * @param tx a signed transaction as StdTx (i.e. not wrapped in type/value container)\n   */\n  async broadcastTx(tx) {\n    const params = {\n      tx: tx,\n      mode: this.broadcastMode\n    };\n    const responseData = await this.post(\"/txs\", params);\n    if (!responseData.txhash) {\n      throw new Error(\"Unexpected response data format\");\n    }\n    return responseData;\n  }\n}\nexports.LcdClient = LcdClient;","map":{"version":3,"mappings":"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","names":["normalizeLcdApiArray","backend","exports","parseAxiosError","err","response","data","errorText","error","JSON","stringify","Error","status","LcdClient","constructor","apiUrl","broadcastMode","base_1","Block","headers","post","client","axios_1","create","baseURL","withExtensions","options","extensionSetups","extensions","map","setupExtension","extension","utils_1","moduleKey","moduleValue","Object","entries","current","get","path","params","catch","blocksLatest","responseData","block","blocks","height","nodeInfo","node_info","txById","id","tx","txsQuery","query","txs","encodeTx","broadcastTx","mode","txhash"],"sources":["../../src/lcdapi/lcdclient.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}