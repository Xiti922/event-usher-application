{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.makeSignBytes = exports.makeSignDoc = exports.makeAuthInfoBytes = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nconst long_1 = __importDefault(require(\"long\"));\nconst signing_1 = require(\"./codec/cosmos/tx/signing/v1beta1/signing\");\nconst tx_1 = require(\"./codec/cosmos/tx/v1beta1/tx\");\n/**\n * Creates and serializes an AuthInfo document using SIGN_MODE_DIRECT.\n */\nfunction makeAuthInfoBytes(pubkeys, feeAmount, gasLimit, sequence) {\n  let signMode = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : signing_1.SignMode.SIGN_MODE_DIRECT;\n  const authInfo = {\n    signerInfos: pubkeys.map(pubkey => ({\n      publicKey: pubkey,\n      modeInfo: {\n        single: {\n          mode: signMode\n        }\n      },\n      sequence: long_1.default.fromNumber(sequence)\n    })),\n    fee: {\n      amount: [...feeAmount],\n      gasLimit: long_1.default.fromNumber(gasLimit)\n    }\n  };\n  return tx_1.AuthInfo.encode(tx_1.AuthInfo.fromPartial(authInfo)).finish();\n}\nexports.makeAuthInfoBytes = makeAuthInfoBytes;\nfunction makeSignDoc(bodyBytes, authInfoBytes, chainId, accountNumber) {\n  return {\n    bodyBytes: bodyBytes,\n    authInfoBytes: authInfoBytes,\n    chainId: chainId,\n    accountNumber: long_1.default.fromNumber(accountNumber)\n  };\n}\nexports.makeSignDoc = makeSignDoc;\nfunction makeSignBytes(_ref) {\n  let {\n    accountNumber,\n    authInfoBytes,\n    bodyBytes,\n    chainId\n  } = _ref;\n  const signDoc = tx_1.SignDoc.fromPartial({\n    accountNumber: accountNumber,\n    authInfoBytes: authInfoBytes,\n    bodyBytes: bodyBytes,\n    chainId: chainId\n  });\n  return tx_1.SignDoc.encode(signDoc).finish();\n}\nexports.makeSignBytes = makeSignBytes;","map":{"version":3,"mappings":";;;;;;;;;;;AAAA;AACA;AAGA;AACA;AAGA;;;AAGA,SAAgBA,iBAAiB,CAC/BC,OAAuB,EACvBC,SAA0B,EAC1BC,QAAgB,EAChBC,QAAgB,EACoB;EAAA,IAApCC,QAAQ,uEAAGC,kBAAQ,CAACC,gBAAgB;EAEpC,MAAMC,QAAQ,GAAG;IACfC,WAAW,EAAER,OAAO,CAACS,GAAG,CACrBC,MAAM,KAAkB;MACvBC,SAAS,EAAED,MAAM;MACjBE,QAAQ,EAAE;QACRC,MAAM,EAAE;UAAEC,IAAI,EAAEV;QAAQ;OACzB;MACDD,QAAQ,EAAEY,cAAI,CAACC,UAAU,CAACb,QAAQ;KACnC,CAAC,CACH;IACDc,GAAG,EAAE;MACHC,MAAM,EAAE,CAAC,GAAGjB,SAAS,CAAC;MACtBC,QAAQ,EAAEa,cAAI,CAACC,UAAU,CAACd,QAAQ;;GAErC;EACD,OAAOiB,aAAQ,CAACC,MAAM,CAACD,aAAQ,CAACE,WAAW,CAACd,QAAQ,CAAC,CAAC,CAACe,MAAM,EAAE;AACjE;AAvBAC;AAyBA,SAAgBC,WAAW,CACzBC,SAAqB,EACrBC,aAAyB,EACzBC,OAAe,EACfC,aAAqB;EAErB,OAAO;IACLH,SAAS,EAAEA,SAAS;IACpBC,aAAa,EAAEA,aAAa;IAC5BC,OAAO,EAAEA,OAAO;IAChBC,aAAa,EAAEb,cAAI,CAACC,UAAU,CAACY,aAAa;GAC7C;AACH;AAZAL;AAcA,SAAgBM,aAAa,OAA8D;EAAA,IAA7D;IAAED,aAAa;IAAEF,aAAa;IAAED,SAAS;IAAEE;EAAO,CAAW;EACzF,MAAMG,OAAO,GAAGX,YAAO,CAACE,WAAW,CAAC;IAClCO,aAAa,EAAEA,aAAa;IAC5BF,aAAa,EAAEA,aAAa;IAC5BD,SAAS,EAAEA,SAAS;IACpBE,OAAO,EAAEA;GACV,CAAC;EACF,OAAOR,YAAO,CAACC,MAAM,CAACU,OAAO,CAAC,CAACR,MAAM,EAAE;AACzC;AARAC","names":["makeAuthInfoBytes","pubkeys","feeAmount","gasLimit","sequence","signMode","signing_1","SIGN_MODE_DIRECT","authInfo","signerInfos","map","pubkey","publicKey","modeInfo","single","mode","long_1","fromNumber","fee","amount","tx_1","encode","fromPartial","finish","exports","makeSignDoc","bodyBytes","authInfoBytes","chainId","accountNumber","makeSignBytes","signDoc"],"sources":["../src/signing.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}