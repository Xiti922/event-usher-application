{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setupIbcExtension = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst math_1 = require(\"@cosmjs/math\");\nconst query_1 = require(\"cosmjs-types/ibc/applications/transfer/v1/query\");\nconst channel_1 = require(\"cosmjs-types/ibc/core/channel/v1/channel\");\nconst query_2 = require(\"cosmjs-types/ibc/core/channel/v1/query\");\nconst query_3 = require(\"cosmjs-types/ibc/core/client/v1/query\");\nconst query_4 = require(\"cosmjs-types/ibc/core/connection/v1/query\");\nconst tendermint_1 = require(\"cosmjs-types/ibc/lightclients/tendermint/v1/tendermint\");\nconst long_1 = __importDefault(require(\"long\"));\nconst queryclient_1 = require(\"../../queryclient\");\nfunction decodeTendermintClientStateAny(clientState) {\n  if ((clientState === null || clientState === void 0 ? void 0 : clientState.typeUrl) !== \"/ibc.lightclients.tendermint.v1.ClientState\") {\n    throw new Error(`Unexpected client state type: ${clientState === null || clientState === void 0 ? void 0 : clientState.typeUrl}`);\n  }\n  return tendermint_1.ClientState.decode(clientState.value);\n}\nfunction decodeTendermintConsensusStateAny(clientState) {\n  if ((clientState === null || clientState === void 0 ? void 0 : clientState.typeUrl) !== \"/ibc.lightclients.tendermint.v1.ConsensusState\") {\n    throw new Error(`Unexpected client state type: ${clientState === null || clientState === void 0 ? void 0 : clientState.typeUrl}`);\n  }\n  return tendermint_1.ConsensusState.decode(clientState.value);\n}\nfunction setupIbcExtension(base) {\n  const rpc = (0, queryclient_1.createProtobufRpcClient)(base);\n  // Use these services to get easy typed access to query methods\n  // These cannot be used for proof verification\n  const channelQueryService = new query_2.QueryClientImpl(rpc);\n  const clientQueryService = new query_3.QueryClientImpl(rpc);\n  const connectionQueryService = new query_4.QueryClientImpl(rpc);\n  const transferQueryService = new query_1.QueryClientImpl(rpc);\n  return {\n    ibc: {\n      channel: {\n        channel: async (portId, channelId) => channelQueryService.Channel({\n          portId: portId,\n          channelId: channelId\n        }),\n        channels: async paginationKey => channelQueryService.Channels({\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        }),\n        allChannels: async () => {\n          var _a;\n          const channels = [];\n          let response;\n          let key;\n          do {\n            response = await channelQueryService.Channels({\n              pagination: (0, queryclient_1.createPagination)(key)\n            });\n            channels.push(...response.channels);\n            key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n          } while (key && key.length);\n          return {\n            channels: channels,\n            height: response.height\n          };\n        },\n        connectionChannels: async (connection, paginationKey) => channelQueryService.ConnectionChannels({\n          connection: connection,\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        }),\n        allConnectionChannels: async connection => {\n          var _a;\n          const channels = [];\n          let response;\n          let key;\n          do {\n            response = await channelQueryService.ConnectionChannels({\n              connection: connection,\n              pagination: (0, queryclient_1.createPagination)(key)\n            });\n            channels.push(...response.channels);\n            key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n          } while (key && key.length);\n          return {\n            channels: channels,\n            height: response.height\n          };\n        },\n        clientState: async (portId, channelId) => channelQueryService.ChannelClientState({\n          portId: portId,\n          channelId: channelId\n        }),\n        consensusState: async (portId, channelId, revisionNumber, revisionHeight) => channelQueryService.ChannelConsensusState({\n          portId: portId,\n          channelId: channelId,\n          revisionNumber: long_1.default.fromNumber(revisionNumber, true),\n          revisionHeight: long_1.default.fromNumber(revisionHeight, true)\n        }),\n        packetCommitment: async (portId, channelId, sequence) => channelQueryService.PacketCommitment({\n          portId: portId,\n          channelId: channelId,\n          sequence: long_1.default.fromNumber(sequence, true)\n        }),\n        packetCommitments: async (portId, channelId, paginationKey) => channelQueryService.PacketCommitments({\n          channelId: channelId,\n          portId: portId,\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        }),\n        allPacketCommitments: async (portId, channelId) => {\n          var _a;\n          const commitments = [];\n          let response;\n          let key;\n          do {\n            response = await channelQueryService.PacketCommitments({\n              channelId: channelId,\n              portId: portId,\n              pagination: (0, queryclient_1.createPagination)(key)\n            });\n            commitments.push(...response.commitments);\n            key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n          } while (key && key.length);\n          return {\n            commitments: commitments,\n            height: response.height\n          };\n        },\n        packetReceipt: async (portId, channelId, sequence) => channelQueryService.PacketReceipt({\n          portId: portId,\n          channelId: channelId,\n          sequence: long_1.default.fromNumber(sequence, true)\n        }),\n        packetAcknowledgement: async (portId, channelId, sequence) => channelQueryService.PacketAcknowledgement({\n          portId: portId,\n          channelId: channelId,\n          sequence: long_1.default.fromNumber(sequence, true)\n        }),\n        packetAcknowledgements: async (portId, channelId, paginationKey) => {\n          const request = query_2.QueryPacketAcknowledgementsRequest.fromPartial({\n            portId: portId,\n            channelId: channelId,\n            pagination: (0, queryclient_1.createPagination)(paginationKey)\n          });\n          return channelQueryService.PacketAcknowledgements(request);\n        },\n        allPacketAcknowledgements: async (portId, channelId) => {\n          var _a;\n          const acknowledgements = [];\n          let response;\n          let key;\n          do {\n            const request = query_2.QueryPacketAcknowledgementsRequest.fromPartial({\n              channelId: channelId,\n              portId: portId,\n              pagination: (0, queryclient_1.createPagination)(key)\n            });\n            response = await channelQueryService.PacketAcknowledgements(request);\n            acknowledgements.push(...response.acknowledgements);\n            key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n          } while (key && key.length);\n          return {\n            acknowledgements: acknowledgements,\n            height: response.height\n          };\n        },\n        unreceivedPackets: async (portId, channelId, packetCommitmentSequences) => channelQueryService.UnreceivedPackets({\n          portId: portId,\n          channelId: channelId,\n          packetCommitmentSequences: packetCommitmentSequences.map(s => long_1.default.fromNumber(s, true))\n        }),\n        unreceivedAcks: async (portId, channelId, packetAckSequences) => channelQueryService.UnreceivedAcks({\n          portId: portId,\n          channelId: channelId,\n          packetAckSequences: packetAckSequences.map(s => long_1.default.fromNumber(s, true))\n        }),\n        nextSequenceReceive: async (portId, channelId) => channelQueryService.NextSequenceReceive({\n          portId: portId,\n          channelId: channelId\n        })\n      },\n      client: {\n        state: async clientId => clientQueryService.ClientState({\n          clientId\n        }),\n        states: async paginationKey => clientQueryService.ClientStates({\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        }),\n        allStates: async () => {\n          var _a;\n          const clientStates = [];\n          let response;\n          let key;\n          do {\n            response = await clientQueryService.ClientStates({\n              pagination: (0, queryclient_1.createPagination)(key)\n            });\n            clientStates.push(...response.clientStates);\n            key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n          } while (key && key.length);\n          return {\n            clientStates: clientStates\n          };\n        },\n        consensusState: async (clientId, consensusHeight) => clientQueryService.ConsensusState(query_3.QueryConsensusStateRequest.fromPartial({\n          clientId: clientId,\n          revisionHeight: consensusHeight !== undefined ? long_1.default.fromNumber(consensusHeight, true) : undefined,\n          latestHeight: consensusHeight === undefined\n        })),\n        consensusStates: async (clientId, paginationKey) => clientQueryService.ConsensusStates({\n          clientId: clientId,\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        }),\n        allConsensusStates: async clientId => {\n          var _a;\n          const consensusStates = [];\n          let response;\n          let key;\n          do {\n            response = await clientQueryService.ConsensusStates({\n              clientId: clientId,\n              pagination: (0, queryclient_1.createPagination)(key)\n            });\n            consensusStates.push(...response.consensusStates);\n            key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n          } while (key && key.length);\n          return {\n            consensusStates: consensusStates\n          };\n        },\n        params: async () => clientQueryService.ClientParams({}),\n        stateTm: async clientId => {\n          const response = await clientQueryService.ClientState({\n            clientId\n          });\n          return decodeTendermintClientStateAny(response.clientState);\n        },\n        statesTm: async paginationKey => {\n          const {\n            clientStates\n          } = await clientQueryService.ClientStates({\n            pagination: (0, queryclient_1.createPagination)(paginationKey)\n          });\n          return clientStates.map(_ref => {\n            let {\n              clientState\n            } = _ref;\n            return decodeTendermintClientStateAny(clientState);\n          });\n        },\n        allStatesTm: async () => {\n          var _a;\n          const clientStates = [];\n          let response;\n          let key;\n          do {\n            response = await clientQueryService.ClientStates({\n              pagination: (0, queryclient_1.createPagination)(key)\n            });\n            clientStates.push(...response.clientStates);\n            key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n          } while (key && key.length);\n          return clientStates.map(_ref2 => {\n            let {\n              clientState\n            } = _ref2;\n            return decodeTendermintClientStateAny(clientState);\n          });\n        },\n        consensusStateTm: async (clientId, consensusHeight) => {\n          const response = await clientQueryService.ConsensusState(query_3.QueryConsensusStateRequest.fromPartial({\n            clientId: clientId,\n            revisionHeight: consensusHeight === null || consensusHeight === void 0 ? void 0 : consensusHeight.revisionHeight,\n            revisionNumber: consensusHeight === null || consensusHeight === void 0 ? void 0 : consensusHeight.revisionNumber,\n            latestHeight: consensusHeight === undefined\n          }));\n          return decodeTendermintConsensusStateAny(response.consensusState);\n        }\n      },\n      connection: {\n        connection: async connectionId => connectionQueryService.Connection({\n          connectionId: connectionId\n        }),\n        connections: async paginationKey => connectionQueryService.Connections({\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        }),\n        allConnections: async () => {\n          var _a;\n          const connections = [];\n          let response;\n          let key;\n          do {\n            response = await connectionQueryService.Connections({\n              pagination: (0, queryclient_1.createPagination)(key)\n            });\n            connections.push(...response.connections);\n            key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n          } while (key && key.length);\n          return {\n            connections: connections,\n            height: response.height\n          };\n        },\n        clientConnections: async clientId => connectionQueryService.ClientConnections({\n          clientId: clientId\n        }),\n        clientState: async connectionId => connectionQueryService.ConnectionClientState({\n          connectionId: connectionId\n        }),\n        consensusState: async (connectionId, revisionHeight) => connectionQueryService.ConnectionConsensusState(query_4.QueryConnectionConsensusStateRequest.fromPartial({\n          connectionId: connectionId,\n          revisionHeight: long_1.default.fromNumber(revisionHeight, true)\n        }))\n      },\n      transfer: {\n        denomTrace: async hash => transferQueryService.DenomTrace({\n          hash: hash\n        }),\n        denomTraces: async paginationKey => transferQueryService.DenomTraces({\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        }),\n        allDenomTraces: async () => {\n          var _a;\n          const denomTraces = [];\n          let response;\n          let key;\n          do {\n            response = await transferQueryService.DenomTraces({\n              pagination: (0, queryclient_1.createPagination)(key)\n            });\n            denomTraces.push(...response.denomTraces);\n            key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n          } while (key && key.length);\n          return {\n            denomTraces: denomTraces\n          };\n        },\n        params: async () => transferQueryService.Params({})\n      },\n      verified: {\n        channel: {\n          channel: async (portId, channelId) => {\n            // keeper: https://github.com/cosmos/cosmos-sdk/blob/3bafd8255a502e5a9cee07391cf8261538245dfd/x/ibc/04-channel/keeper/keeper.go#L55-L65\n            // key: https://github.com/cosmos/cosmos-sdk/blob/ef0a7344af345882729598bc2958a21143930a6b/x/ibc/24-host/keys.go#L117-L120\n            const key = (0, encoding_1.toAscii)(`channelEnds/ports/${portId}/channels/${channelId}`);\n            const responseData = await base.queryVerified(\"ibc\", key);\n            return responseData.length ? channel_1.Channel.decode(responseData) : null;\n          },\n          packetCommitment: async (portId, channelId, sequence) => {\n            // keeper: https://github.com/cosmos/cosmos-sdk/blob/3bafd8255a502e5a9cee07391cf8261538245dfd/x/ibc/04-channel/keeper/keeper.go#L128-L133\n            // key: https://github.com/cosmos/cosmos-sdk/blob/ef0a7344af345882729598bc2958a21143930a6b/x/ibc/24-host/keys.go#L183-L185\n            const key = (0, encoding_1.toAscii)(`commitments/ports/${portId}/channels/${channelId}/packets/${sequence}`);\n            const responseData = await base.queryVerified(\"ibc\", key);\n            // keeper code doesn't parse, but returns raw\n            return responseData;\n          },\n          packetAcknowledgement: async (portId, channelId, sequence) => {\n            // keeper: https://github.com/cosmos/cosmos-sdk/blob/3bafd8255a502e5a9cee07391cf8261538245dfd/x/ibc/04-channel/keeper/keeper.go#L159-L166\n            // key: https://github.com/cosmos/cosmos-sdk/blob/ef0a7344af345882729598bc2958a21143930a6b/x/ibc/24-host/keys.go#L153-L156\n            const key = (0, encoding_1.toAscii)(`acks/ports/${portId}/channels/${channelId}/acknowledgements/${sequence}`);\n            const responseData = await base.queryVerified(\"ibc\", key);\n            // keeper code doesn't parse, but returns raw\n            return responseData;\n          },\n          nextSequenceReceive: async (portId, channelId) => {\n            // keeper: https://github.com/cosmos/cosmos-sdk/blob/3bafd8255a502e5a9cee07391cf8261538245dfd/x/ibc/04-channel/keeper/keeper.go#L92-L101\n            // key: https://github.com/cosmos/cosmos-sdk/blob/ef0a7344af345882729598bc2958a21143930a6b/x/ibc/24-host/keys.go#L133-L136\n            const key = (0, encoding_1.toAscii)(`seqAcks/ports/${portId}/channels/${channelId}/nextSequenceAck`);\n            const responseData = await base.queryVerified(\"ibc\", key);\n            return responseData.length ? math_1.Uint64.fromBytes(responseData).toNumber() : null;\n          }\n        }\n      }\n    }\n  };\n}\nexports.setupIbcExtension = setupIbcExtension;","map":{"version":3,"mappings":"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","names":["decodeTendermintClientStateAny","clientState","typeUrl","Error","tendermint_1","decode","value","decodeTendermintConsensusStateAny","setupIbcExtension","base","rpc","channelQueryService","query_2","clientQueryService","query_3","connectionQueryService","query_4","transferQueryService","query_1","ibc","channel","portId","channelId","Channel","channels","paginationKey","Channels","pagination","allChannels","response","key","push","nextKey","length","height","connectionChannels","connection","ConnectionChannels","allConnectionChannels","ChannelClientState","consensusState","revisionNumber","revisionHeight","ChannelConsensusState","long_1","fromNumber","packetCommitment","sequence","PacketCommitment","packetCommitments","PacketCommitments","allPacketCommitments","commitments","packetReceipt","PacketReceipt","packetAcknowledgement","PacketAcknowledgement","packetAcknowledgements","request","fromPartial","PacketAcknowledgements","allPacketAcknowledgements","acknowledgements","unreceivedPackets","packetCommitmentSequences","UnreceivedPackets","map","s","unreceivedAcks","packetAckSequences","UnreceivedAcks","nextSequenceReceive","NextSequenceReceive","client","state","clientId","ClientState","states","ClientStates","allStates","clientStates","consensusHeight","ConsensusState","undefined","latestHeight","consensusStates","ConsensusStates","allConsensusStates","params","ClientParams","stateTm","statesTm","allStatesTm","consensusStateTm","connectionId","Connection","connections","Connections","allConnections","clientConnections","ClientConnections","ConnectionClientState","ConnectionConsensusState","transfer","denomTrace","hash","DenomTrace","denomTraces","DenomTraces","allDenomTraces","Params","verified","responseData","queryVerified","channel_1","math_1","fromBytes","toNumber","exports"],"sources":["../../../src/modules/ibc/queries.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}