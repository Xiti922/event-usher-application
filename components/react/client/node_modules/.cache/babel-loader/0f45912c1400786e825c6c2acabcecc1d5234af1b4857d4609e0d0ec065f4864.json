{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CoinPretty = void 0;\nconst int_pretty_1 = require(\"./int-pretty\");\nconst decimal_1 = require(\"./decimal\");\nconst dec_utils_1 = require(\"./dec-utils\");\nclass CoinPretty {\n  constructor(_currency, amount) {\n    this._currency = _currency;\n    this.amount = amount;\n    this._options = {\n      separator: \" \",\n      upperCase: false,\n      lowerCase: false,\n      hideDenom: false\n    };\n    if (typeof this.amount === \"object\" && \"toDec\" in this.amount) {\n      this.amount = this.amount.toDec();\n    } else if (!(this.amount instanceof decimal_1.Dec)) {\n      this.amount = new decimal_1.Dec(this.amount);\n    }\n    this.intPretty = new int_pretty_1.IntPretty(this.amount.quoTruncate(dec_utils_1.DecUtils.getTenExponentNInPrecisionRange(_currency.coinDecimals))).maxDecimals(_currency.coinDecimals);\n  }\n  get options() {\n    return Object.assign(Object.assign({}, this._options), this.intPretty.options);\n  }\n  get denom() {\n    return this.currency.coinDenom;\n  }\n  get currency() {\n    return this._currency;\n  }\n  setCurrency(currency) {\n    const pretty = this.clone();\n    pretty.intPretty = this.intPretty.moveDecimalPointRight(this._currency.coinDecimals - currency.coinDecimals);\n    pretty._currency = currency;\n    return pretty;\n  }\n  separator(str) {\n    const pretty = this.clone();\n    pretty._options.separator = str;\n    return pretty;\n  }\n  upperCase(bool) {\n    const pretty = this.clone();\n    pretty._options.upperCase = bool;\n    pretty._options.lowerCase = !bool;\n    return pretty;\n  }\n  lowerCase(bool) {\n    const pretty = this.clone();\n    pretty._options.lowerCase = bool;\n    pretty._options.upperCase = !bool;\n    return pretty;\n  }\n  hideDenom(bool) {\n    const pretty = this.clone();\n    pretty._options.hideDenom = bool;\n    return pretty;\n  }\n  moveDecimalPointLeft(delta) {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.moveDecimalPointLeft(delta);\n    return pretty;\n  }\n  moveDecimalPointRight(delta) {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.moveDecimalPointRight(delta);\n    return pretty;\n  }\n  /**\n   * @deprecated Use`moveDecimalPointLeft`\n   */\n  increasePrecision(delta) {\n    return this.moveDecimalPointLeft(delta);\n  }\n  /**\n   * @deprecated Use`moveDecimalPointRight`\n   */\n  decreasePrecision(delta) {\n    return this.moveDecimalPointRight(delta);\n  }\n  maxDecimals(max) {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.maxDecimals(max);\n    return pretty;\n  }\n  inequalitySymbol(bool) {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.inequalitySymbol(bool);\n    return pretty;\n  }\n  inequalitySymbolSeparator(str) {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.inequalitySymbolSeparator(str);\n    return pretty;\n  }\n  trim(bool) {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.trim(bool);\n    return pretty;\n  }\n  shrink(bool) {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.shrink(bool);\n    return pretty;\n  }\n  locale(locale) {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.locale(locale);\n    return pretty;\n  }\n  /**\n   * Ready indicates the actual value is ready to show the users.\n   * Even if the ready option is false, it expects that the value can be shown to users (probably as 0).\n   * The method that returns prettied value may return `undefined` or `null` if the value is not ready.\n   * But, alternatively, it can return the 0 value that can be shown the users anyway, but indicates that the value is not ready.\n   * @param bool\n   */\n  ready(bool) {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.ready(bool);\n    return pretty;\n  }\n  get isReady() {\n    return this.intPretty.isReady;\n  }\n  add(target) {\n    const isCoinPretty = target instanceof CoinPretty;\n    if (isCoinPretty) {\n      // If target is `CoinPretty` and it has different denom, do nothing.\n      if (\"currency\" in target && this.currency.coinMinimalDenom !== target.currency.coinMinimalDenom) {\n        return this.clone();\n      }\n    }\n    if (\"toDec\" in target) {\n      target = target.toDec();\n    }\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.add(isCoinPretty ? target : target.mul(dec_utils_1.DecUtils.getTenExponentNInPrecisionRange(-this._currency.coinDecimals)));\n    return pretty;\n  }\n  sub(target) {\n    const isCoinPretty = target instanceof CoinPretty;\n    if (isCoinPretty) {\n      // If target is `CoinPretty` and it has different denom, do nothing.\n      if (\"currency\" in target && this.currency.coinMinimalDenom !== target.currency.coinMinimalDenom) {\n        return this.clone();\n      }\n    }\n    if (\"toDec\" in target) {\n      target = target.toDec();\n    }\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.sub(isCoinPretty ? target : target.mul(dec_utils_1.DecUtils.getTenExponentNInPrecisionRange(-this._currency.coinDecimals)));\n    return pretty;\n  }\n  mul(target) {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.mul(target);\n    return pretty;\n  }\n  quo(target) {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.quo(target);\n    return pretty;\n  }\n  toDec() {\n    return this.intPretty.toDec();\n  }\n  toCoin() {\n    const amount = this.toDec().mulTruncate(dec_utils_1.DecUtils.getTenExponentNInPrecisionRange(this.currency.coinDecimals)).truncate();\n    return {\n      denom: this.currency.coinMinimalDenom,\n      amount: amount.toString()\n    };\n  }\n  toString() {\n    let denom = this.denom;\n    if (this._options.upperCase) {\n      denom = denom.toUpperCase();\n    }\n    if (this._options.lowerCase) {\n      denom = denom.toLowerCase();\n    }\n    let separator = this._options.separator;\n    if (this._options.hideDenom) {\n      denom = \"\";\n      separator = \"\";\n    }\n    return this.intPretty.toStringWithSymbols(\"\", `${separator}${denom}`);\n  }\n  clone() {\n    const pretty = new CoinPretty(this._currency, this.amount);\n    pretty._options = Object.assign({}, this._options);\n    pretty.intPretty = this.intPretty.clone();\n    return pretty;\n  }\n}\nexports.CoinPretty = CoinPretty;","map":{"version":3,"mappings":"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","names":["CoinPretty","constructor","_currency","amount","separator","upperCase","lowerCase","hideDenom","toDec","decimal_1","intPretty","int_pretty_1","quoTruncate","dec_utils_1","getTenExponentNInPrecisionRange","coinDecimals","maxDecimals","options","_options","denom","currency","coinDenom","setCurrency","pretty","clone","moveDecimalPointRight","str","bool","moveDecimalPointLeft","delta","increasePrecision","decreasePrecision","max","inequalitySymbol","inequalitySymbolSeparator","trim","shrink","locale","ready","isReady","add","target","isCoinPretty","coinMinimalDenom","mul","sub","quo","toCoin","mulTruncate","truncate","toString","toUpperCase","toLowerCase","toStringWithSymbols","exports"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/@keplr-wallet/unit/src/coin-pretty.ts"],"sourcesContent":["import { IntPretty, IntPrettyOptions } from \"./int-pretty\";\nimport { Dec } from \"./decimal\";\nimport { AppCurrency } from \"@keplr-wallet/types\";\nimport { DeepReadonly } from \"utility-types\";\nimport { DecUtils } from \"./dec-utils\";\nimport bigInteger from \"big-integer\";\n\nexport type CoinPrettyOptions = {\n  separator: string;\n  upperCase: boolean;\n  lowerCase: boolean;\n  hideDenom: boolean;\n};\n\nexport class CoinPretty {\n  protected intPretty: IntPretty;\n\n  protected _options: CoinPrettyOptions = {\n    separator: \" \",\n    upperCase: false,\n    lowerCase: false,\n    hideDenom: false,\n  };\n\n  constructor(\n    protected _currency: AppCurrency,\n    protected amount: Dec | { toDec(): Dec } | bigInteger.BigNumber\n  ) {\n    if (typeof this.amount === \"object\" && \"toDec\" in this.amount) {\n      this.amount = this.amount.toDec();\n    } else if (!(this.amount instanceof Dec)) {\n      this.amount = new Dec(this.amount);\n    }\n\n    this.intPretty = new IntPretty(\n      this.amount.quoTruncate(\n        DecUtils.getTenExponentNInPrecisionRange(_currency.coinDecimals)\n      )\n    ).maxDecimals(_currency.coinDecimals);\n  }\n\n  get options(): DeepReadonly<IntPrettyOptions & CoinPrettyOptions> {\n    return {\n      ...this._options,\n      ...this.intPretty.options,\n    };\n  }\n\n  get denom(): string {\n    return this.currency.coinDenom;\n  }\n\n  get currency(): AppCurrency {\n    return this._currency;\n  }\n\n  setCurrency(currency: AppCurrency): CoinPretty {\n    const pretty = this.clone();\n    pretty.intPretty = this.intPretty.moveDecimalPointRight(\n      this._currency.coinDecimals - currency.coinDecimals\n    );\n    pretty._currency = currency;\n    return pretty;\n  }\n\n  separator(str: string): CoinPretty {\n    const pretty = this.clone();\n    pretty._options.separator = str;\n    return pretty;\n  }\n\n  upperCase(bool: boolean): CoinPretty {\n    const pretty = this.clone();\n    pretty._options.upperCase = bool;\n    pretty._options.lowerCase = !bool;\n    return pretty;\n  }\n\n  lowerCase(bool: boolean): CoinPretty {\n    const pretty = this.clone();\n    pretty._options.lowerCase = bool;\n    pretty._options.upperCase = !bool;\n    return pretty;\n  }\n\n  hideDenom(bool: boolean): CoinPretty {\n    const pretty = this.clone();\n    pretty._options.hideDenom = bool;\n    return pretty;\n  }\n\n  moveDecimalPointLeft(delta: number): CoinPretty {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.moveDecimalPointLeft(delta);\n    return pretty;\n  }\n\n  moveDecimalPointRight(delta: number): CoinPretty {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.moveDecimalPointRight(delta);\n    return pretty;\n  }\n\n  /**\n   * @deprecated Use`moveDecimalPointLeft`\n   */\n  increasePrecision(delta: number): CoinPretty {\n    return this.moveDecimalPointLeft(delta);\n  }\n\n  /**\n   * @deprecated Use`moveDecimalPointRight`\n   */\n  decreasePrecision(delta: number): CoinPretty {\n    return this.moveDecimalPointRight(delta);\n  }\n\n  maxDecimals(max: number): CoinPretty {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.maxDecimals(max);\n    return pretty;\n  }\n\n  inequalitySymbol(bool: boolean): CoinPretty {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.inequalitySymbol(bool);\n    return pretty;\n  }\n\n  inequalitySymbolSeparator(str: string): CoinPretty {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.inequalitySymbolSeparator(str);\n    return pretty;\n  }\n\n  trim(bool: boolean): CoinPretty {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.trim(bool);\n    return pretty;\n  }\n\n  shrink(bool: boolean): CoinPretty {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.shrink(bool);\n    return pretty;\n  }\n\n  locale(locale: boolean): CoinPretty {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.locale(locale);\n    return pretty;\n  }\n\n  /**\n   * Ready indicates the actual value is ready to show the users.\n   * Even if the ready option is false, it expects that the value can be shown to users (probably as 0).\n   * The method that returns prettied value may return `undefined` or `null` if the value is not ready.\n   * But, alternatively, it can return the 0 value that can be shown the users anyway, but indicates that the value is not ready.\n   * @param bool\n   */\n  ready(bool: boolean): CoinPretty {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.ready(bool);\n    return pretty;\n  }\n\n  get isReady(): boolean {\n    return this.intPretty.isReady;\n  }\n\n  add(target: Dec | { toDec(): Dec } | CoinPretty): CoinPretty {\n    const isCoinPretty = target instanceof CoinPretty;\n    if (isCoinPretty) {\n      // If target is `CoinPretty` and it has different denom, do nothing.\n      if (\n        \"currency\" in target &&\n        this.currency.coinMinimalDenom !== target.currency.coinMinimalDenom\n      ) {\n        return this.clone();\n      }\n    }\n\n    if (\"toDec\" in target) {\n      target = target.toDec();\n    }\n\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.add(\n      isCoinPretty\n        ? target\n        : target.mul(\n            DecUtils.getTenExponentNInPrecisionRange(\n              -this._currency.coinDecimals\n            )\n          )\n    );\n    return pretty;\n  }\n\n  sub(target: Dec | { toDec(): Dec } | CoinPretty): CoinPretty {\n    const isCoinPretty = target instanceof CoinPretty;\n    if (isCoinPretty) {\n      // If target is `CoinPretty` and it has different denom, do nothing.\n      if (\n        \"currency\" in target &&\n        this.currency.coinMinimalDenom !== target.currency.coinMinimalDenom\n      ) {\n        return this.clone();\n      }\n    }\n\n    if (\"toDec\" in target) {\n      target = target.toDec();\n    }\n\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.sub(\n      isCoinPretty\n        ? target\n        : target.mul(\n            DecUtils.getTenExponentNInPrecisionRange(\n              -this._currency.coinDecimals\n            )\n          )\n    );\n    return pretty;\n  }\n\n  mul(target: Dec | { toDec(): Dec }): CoinPretty {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.mul(target);\n    return pretty;\n  }\n\n  quo(target: Dec | { toDec(): Dec }): CoinPretty {\n    const pretty = this.clone();\n    pretty.intPretty = pretty.intPretty.quo(target);\n    return pretty;\n  }\n\n  toDec(): Dec {\n    return this.intPretty.toDec();\n  }\n\n  toCoin(): {\n    denom: string;\n    amount: string;\n  } {\n    const amount = this.toDec()\n      .mulTruncate(\n        DecUtils.getTenExponentNInPrecisionRange(this.currency.coinDecimals)\n      )\n      .truncate();\n\n    return {\n      denom: this.currency.coinMinimalDenom,\n      amount: amount.toString(),\n    };\n  }\n\n  toString(): string {\n    let denom = this.denom;\n    if (this._options.upperCase) {\n      denom = denom.toUpperCase();\n    }\n    if (this._options.lowerCase) {\n      denom = denom.toLowerCase();\n    }\n\n    let separator = this._options.separator;\n\n    if (this._options.hideDenom) {\n      denom = \"\";\n      separator = \"\";\n    }\n\n    return this.intPretty.toStringWithSymbols(\"\", `${separator}${denom}`);\n  }\n\n  clone(): CoinPretty {\n    const pretty = new CoinPretty(this._currency, this.amount);\n    pretty._options = {\n      ...this._options,\n    };\n    pretty.intPretty = this.intPretty.clone();\n    return pretty;\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}