{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LedgerInitStore = void 0;\nconst mobx_1 = require(\"mobx\");\nconst router_1 = require(\"@keplr-wallet/router\");\nconst background_1 = require(\"@keplr-wallet/background\");\nconst common_1 = require(\"@keplr-wallet/common\");\nclass LedgerInitStore {\n  constructor(interactionStore, msgRequester) {\n    this.interactionStore = interactionStore;\n    this.msgRequester = msgRequester;\n    this._isLoading = false;\n    this._isWebHID = false;\n    mobx_1.makeObservable(this);\n    this.fetchIsWebHID();\n  }\n  *fetchIsWebHID() {\n    this._isWebHID = yield* common_1.toGenerator(this.msgRequester.sendMessage(router_1.BACKGROUND_PORT, new background_1.LedgerGetWebHIDFlagMsg()));\n  }\n  *setWebHID(flag) {\n    yield this.msgRequester.sendMessage(router_1.BACKGROUND_PORT, new background_1.LedgerSetWebHIDFlagMsg(flag));\n    yield this.fetchIsWebHID();\n  }\n  get isWebHID() {\n    return this._isWebHID;\n  }\n  get isGetPubKeySucceeded() {\n    const datas = this.interactionStore.getEvents(\"ledger-init\");\n    for (const data of datas) {\n      if (data.data.event === \"get-pubkey\" && data.data.success) {\n        return true;\n      }\n    }\n    return false;\n  }\n  get isSignCompleted() {\n    return this.isSignSucceeded || this.isSignRejected;\n  }\n  get isSignSucceeded() {\n    const datas = this.interactionStore.getEvents(\"ledger-init\");\n    for (const data of datas) {\n      if (data.data.event === \"sign\" && data.data.success) {\n        return true;\n      }\n    }\n    return false;\n  }\n  get isSignRejected() {\n    const datas = this.interactionStore.getEvents(\"ledger-init\");\n    for (const data of datas) {\n      if (data.data.event === \"sign\" && !data.data.success) {\n        return true;\n      }\n    }\n    return false;\n  }\n  get isInitAborted() {\n    const datas = this.interactionStore.getEvents(\"ledger-init\");\n    for (const data of datas) {\n      if (data.data.event === \"init-aborted\") {\n        return true;\n      }\n    }\n    return false;\n  }\n  get isInitNeeded() {\n    const datas = this.interactionStore.getDatas(\"ledger-init\");\n    for (const data of datas) {\n      if (data.data.event === \"init-failed\") {\n        return true;\n      }\n    }\n    return false;\n  }\n  *resume() {\n    this._isLoading = true;\n    try {\n      const datas = this.interactionStore.getDatas(\"ledger-init\");\n      for (var _len = arguments.length, initArgs = new Array(_len), _key = 0; _key < _len; _key++) {\n        initArgs[_key] = arguments[_key];\n      }\n      for (const data of datas) {\n        if (data.data.event === \"init-failed\") {\n          // Approve resuming the initing ledger.\n          yield this.interactionStore.approve(\"ledger-init\", data.id, {\n            initArgs\n          });\n          break;\n        }\n      }\n    } finally {\n      this._isLoading = false;\n    }\n  }\n  *resumeAll() {\n    this._isLoading = true;\n    try {\n      const datas = this.interactionStore.getDatas(\"ledger-init\");\n      for (var _len2 = arguments.length, initArgs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        initArgs[_key2] = arguments[_key2];\n      }\n      for (const data of datas) {\n        if (data.data.event === \"init-failed\") {\n          // Approve resuming the initing ledger.\n          yield this.interactionStore.approve(\"ledger-init\", data.id, {\n            initArgs\n          });\n        }\n      }\n    } finally {\n      this._isLoading = false;\n    }\n  }\n  *abort() {\n    this._isLoading = true;\n    try {\n      const datas = this.interactionStore.getDatas(\"ledger-init\");\n      for (const data of datas) {\n        if (data.data.event === \"init-failed\") {\n          // Approve resuming the initing ledger.\n          yield this.interactionStore.approve(\"ledger-init\", data.id, {\n            abort: true\n          });\n          break;\n        }\n      }\n    } finally {\n      this._isLoading = false;\n    }\n  }\n  *abortAll() {\n    this._isLoading = true;\n    try {\n      const datas = this.interactionStore.getDatas(\"ledger-init\");\n      for (const data of datas) {\n        if (data.data.event === \"init-failed\") {\n          // Approve resuming the initing ledger.\n          yield this.interactionStore.approve(\"ledger-init\", data.id, {\n            abort: true\n          });\n        }\n      }\n    } finally {\n      this._isLoading = false;\n    }\n  }\n  get isLoading() {\n    return this._isLoading;\n  }\n}\n__decorate([mobx_1.observable], LedgerInitStore.prototype, \"_isLoading\", void 0);\n__decorate([mobx_1.observable], LedgerInitStore.prototype, \"_isWebHID\", void 0);\n__decorate([mobx_1.flow], LedgerInitStore.prototype, \"fetchIsWebHID\", null);\n__decorate([mobx_1.flow], LedgerInitStore.prototype, \"setWebHID\", null);\n__decorate([mobx_1.computed], LedgerInitStore.prototype, \"isGetPubKeySucceeded\", null);\n__decorate([mobx_1.computed], LedgerInitStore.prototype, \"isSignCompleted\", null);\n__decorate([mobx_1.computed], LedgerInitStore.prototype, \"isSignSucceeded\", null);\n__decorate([mobx_1.computed], LedgerInitStore.prototype, \"isSignRejected\", null);\n__decorate([mobx_1.computed], LedgerInitStore.prototype, \"isInitAborted\", null);\n__decorate([mobx_1.computed], LedgerInitStore.prototype, \"isInitNeeded\", null);\n__decorate([mobx_1.flow], LedgerInitStore.prototype, \"resume\", null);\n__decorate([mobx_1.flow], LedgerInitStore.prototype, \"resumeAll\", null);\n__decorate([mobx_1.flow], LedgerInitStore.prototype, \"abort\", null);\n__decorate([mobx_1.flow], LedgerInitStore.prototype, \"abortAll\", null);\nexports.LedgerInitStore = LedgerInitStore;","map":{"version":3,"mappings":"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","names":["LedgerInitStore","constructor","interactionStore","msgRequester","mobx_1","fetchIsWebHID","_isWebHID","common_1","sendMessage","router_1","background_1","setWebHID","flag","isWebHID","isGetPubKeySucceeded","datas","getEvents","data","event","success","isSignCompleted","isSignSucceeded","isSignRejected","isInitAborted","isInitNeeded","getDatas","resume","_isLoading","initArgs","approve","id","resumeAll","abort","abortAll","isLoading","__decorate","exports"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/@keplr-wallet/stores/src/core/interaction/ledger.ts"],"sourcesContent":["import { InteractionStore } from \"./interaction\";\nimport { computed, flow, makeObservable, observable } from \"mobx\";\nimport { BACKGROUND_PORT, MessageRequester } from \"@keplr-wallet/router\";\nimport {\n  LedgerGetWebHIDFlagMsg,\n  LedgerSetWebHIDFlagMsg,\n} from \"@keplr-wallet/background\";\nimport { toGenerator } from \"@keplr-wallet/common\";\n\nexport type LedgerInitDataType =\n  | {\n      event: \"get-pubkey\";\n      success: boolean;\n    }\n  | {\n      event: \"sign\";\n      success: boolean;\n    }\n  | {\n      // Should interact to resume the ledger initing on the background.\n      event: \"init-failed\";\n    }\n  | {\n      event: \"init-aborted\";\n    };\n\nexport class LedgerInitStore {\n  @observable\n  protected _isLoading: boolean = false;\n\n  @observable\n  protected _isWebHID: boolean = false;\n\n  constructor(\n    protected readonly interactionStore: InteractionStore,\n    protected readonly msgRequester: MessageRequester\n  ) {\n    makeObservable(this);\n\n    this.fetchIsWebHID();\n  }\n\n  @flow\n  *fetchIsWebHID() {\n    this._isWebHID = yield* toGenerator(\n      this.msgRequester.sendMessage(\n        BACKGROUND_PORT,\n        new LedgerGetWebHIDFlagMsg()\n      )\n    );\n  }\n\n  @flow\n  *setWebHID(flag: boolean) {\n    yield this.msgRequester.sendMessage(\n      BACKGROUND_PORT,\n      new LedgerSetWebHIDFlagMsg(flag)\n    );\n    yield this.fetchIsWebHID();\n  }\n\n  get isWebHID(): boolean {\n    return this._isWebHID;\n  }\n\n  @computed\n  get isGetPubKeySucceeded(): boolean {\n    const datas = this.interactionStore.getEvents<LedgerInitDataType>(\n      \"ledger-init\"\n    );\n\n    for (const data of datas) {\n      if (data.data.event === \"get-pubkey\" && data.data.success) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  @computed\n  get isSignCompleted(): boolean {\n    return this.isSignSucceeded || this.isSignRejected;\n  }\n\n  @computed\n  get isSignSucceeded(): boolean {\n    const datas = this.interactionStore.getEvents<LedgerInitDataType>(\n      \"ledger-init\"\n    );\n\n    for (const data of datas) {\n      if (data.data.event === \"sign\" && data.data.success) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  @computed\n  get isSignRejected(): boolean {\n    const datas = this.interactionStore.getEvents<LedgerInitDataType>(\n      \"ledger-init\"\n    );\n\n    for (const data of datas) {\n      if (data.data.event === \"sign\" && !data.data.success) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  @computed\n  get isInitAborted(): boolean {\n    const datas = this.interactionStore.getEvents<LedgerInitDataType>(\n      \"ledger-init\"\n    );\n\n    for (const data of datas) {\n      if (data.data.event === \"init-aborted\") {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  @computed\n  get isInitNeeded(): boolean {\n    const datas = this.interactionStore.getDatas<LedgerInitDataType>(\n      \"ledger-init\"\n    );\n\n    for (const data of datas) {\n      if (data.data.event === \"init-failed\") {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  @flow\n  *resume(...initArgs: any[]) {\n    this._isLoading = true;\n\n    try {\n      const datas = this.interactionStore.getDatas<LedgerInitDataType>(\n        \"ledger-init\"\n      );\n\n      for (const data of datas) {\n        if (data.data.event === \"init-failed\") {\n          // Approve resuming the initing ledger.\n          yield this.interactionStore.approve(\"ledger-init\", data.id, {\n            initArgs,\n          });\n          break;\n        }\n      }\n    } finally {\n      this._isLoading = false;\n    }\n  }\n\n  @flow\n  *resumeAll(...initArgs: any[]) {\n    this._isLoading = true;\n\n    try {\n      const datas = this.interactionStore.getDatas<LedgerInitDataType>(\n        \"ledger-init\"\n      );\n\n      for (const data of datas) {\n        if (data.data.event === \"init-failed\") {\n          // Approve resuming the initing ledger.\n          yield this.interactionStore.approve(\"ledger-init\", data.id, {\n            initArgs,\n          });\n        }\n      }\n    } finally {\n      this._isLoading = false;\n    }\n  }\n\n  @flow\n  *abort() {\n    this._isLoading = true;\n\n    try {\n      const datas = this.interactionStore.getDatas<LedgerInitDataType>(\n        \"ledger-init\"\n      );\n\n      for (const data of datas) {\n        if (data.data.event === \"init-failed\") {\n          // Approve resuming the initing ledger.\n          yield this.interactionStore.approve(\"ledger-init\", data.id, {\n            abort: true,\n          });\n          break;\n        }\n      }\n    } finally {\n      this._isLoading = false;\n    }\n  }\n\n  @flow\n  *abortAll() {\n    this._isLoading = true;\n\n    try {\n      const datas = this.interactionStore.getDatas<LedgerInitDataType>(\n        \"ledger-init\"\n      );\n\n      for (const data of datas) {\n        if (data.data.event === \"init-failed\") {\n          // Approve resuming the initing ledger.\n          yield this.interactionStore.approve(\"ledger-init\", data.id, {\n            abort: true,\n          });\n        }\n      }\n    } finally {\n      this._isLoading = false;\n    }\n  }\n\n  get isLoading(): boolean {\n    return this._isLoading;\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}