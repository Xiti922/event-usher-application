{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/* eslint-disable @typescript-eslint/camelcase */\nconst encoding_1 = require(\"@iov/encoding\");\nfunction parseAttribute(input) {\n  if (!encoding_1.isNonNullObject(input)) throw new Error(\"Attribute must be a non-null object\");\n  const {\n    key,\n    value\n  } = input;\n  if (typeof key !== \"string\" || !key) throw new Error(\"Attribute's key must be a non-empty string\");\n  if (typeof value !== \"string\" && typeof value !== \"undefined\") {\n    throw new Error(\"Attribute's value must be a string or unset\");\n  }\n  return {\n    key: key,\n    value: value || \"\"\n  };\n}\nexports.parseAttribute = parseAttribute;\nfunction parseEvent(input) {\n  if (!encoding_1.isNonNullObject(input)) throw new Error(\"Event must be a non-null object\");\n  const {\n    type,\n    attributes\n  } = input;\n  if (typeof type !== \"string\" || type === \"\") {\n    throw new Error(`Event type must be a non-empty string`);\n  }\n  if (!Array.isArray(attributes)) throw new Error(\"Event's attributes must be an array\");\n  return {\n    type: type,\n    attributes: attributes.map(parseAttribute)\n  };\n}\nexports.parseEvent = parseEvent;\nfunction parseLog(input) {\n  if (!encoding_1.isNonNullObject(input)) throw new Error(\"Log must be a non-null object\");\n  const {\n    msg_index,\n    log,\n    events\n  } = input;\n  if (!Array.isArray(events)) throw new Error(\"Log's events must be an array\");\n  return {\n    msg_index: 0,\n    log: \"\",\n    events: events.map(parseEvent)\n  };\n}\nexports.parseLog = parseLog;\nfunction parseLogs(input) {\n  if (!Array.isArray(input)) throw new Error(\"Logs must be an array\");\n  return input.map(parseLog);\n}\nexports.parseLogs = parseLogs;\n/**\n * Searches in logs for the first event of the given event type and in that event\n * for the first first attribute with the given attribute key.\n *\n * Throws if the attribute was not found.\n */\nfunction findAttribute(logs, eventType, attrKey) {\n  var _a, _b;\n  const firstLogs = logs.find(() => true);\n  const out = (_b = (_a = firstLogs) === null || _a === void 0 ? void 0 : _a.events.find(event => event.type === eventType)) === null || _b === void 0 ? void 0 : _b.attributes.find(attr => attr.key === attrKey);\n  if (!out) {\n    throw new Error(`Could not find attribute '${attrKey}' in first event of type '${eventType}' in first log.`);\n  }\n  return out;\n}\nexports.findAttribute = findAttribute;","map":{"version":3,"mappings":";;;;;AAAA;AACA;AAkBA,SAAgBA,cAAc,CAACC,KAAc;EAC3C,IAAI,CAACC,0BAAe,CAACD,KAAK,CAAC,EAAE,MAAM,IAAIE,KAAK,CAAC,qCAAqC,CAAC;EACnF,MAAM;IAAEC,GAAG;IAAEC;EAAK,CAAE,GAAGJ,KAAY;EACnC,IAAI,OAAOG,GAAG,KAAK,QAAQ,IAAI,CAACA,GAAG,EAAE,MAAM,IAAID,KAAK,CAAC,4CAA4C,CAAC;EAClG,IAAI,OAAOE,KAAK,KAAK,QAAQ,IAAI,OAAOA,KAAK,KAAK,WAAW,EAAE;IAC7D,MAAM,IAAIF,KAAK,CAAC,6CAA6C,CAAC;;EAGhE,OAAO;IACLC,GAAG,EAAEA,GAAG;IACRC,KAAK,EAAEA,KAAK,IAAI;GACjB;AACH;AAZAC;AAcA,SAAgBC,UAAU,CAACN,KAAc;EACvC,IAAI,CAACC,0BAAe,CAACD,KAAK,CAAC,EAAE,MAAM,IAAIE,KAAK,CAAC,iCAAiC,CAAC;EAC/E,MAAM;IAAEK,IAAI;IAAEC;EAAU,CAAE,GAAGR,KAAY;EACzC,IAAI,OAAOO,IAAI,KAAK,QAAQ,IAAIA,IAAI,KAAK,EAAE,EAAE;IAC3C,MAAM,IAAIL,KAAK,CAAC,uCAAuC,CAAC;;EAE1D,IAAI,CAACO,KAAK,CAACC,OAAO,CAACF,UAAU,CAAC,EAAE,MAAM,IAAIN,KAAK,CAAC,qCAAqC,CAAC;EACtF,OAAO;IACLK,IAAI,EAAEA,IAAI;IACVC,UAAU,EAAEA,UAAU,CAACG,GAAG,CAACZ,cAAc;GAC1C;AACH;AAXAM;AAaA,SAAgBO,QAAQ,CAACZ,KAAc;EACrC,IAAI,CAACC,0BAAe,CAACD,KAAK,CAAC,EAAE,MAAM,IAAIE,KAAK,CAAC,+BAA+B,CAAC;EAC7E,MAAM;IAAEW,SAAS;IAAEC,GAAG;IAAEC;EAAM,CAAE,GAAGf,KAAY;EAC/C,IAAI,CAACS,KAAK,CAACC,OAAO,CAACK,MAAM,CAAC,EAAE,MAAM,IAAIb,KAAK,CAAC,+BAA+B,CAAC;EAC5E,OAAO;IACLW,SAAS,EAAE,CAAC;IACZC,GAAG,EAAE,EAAE;IACPC,MAAM,EAAEA,MAAM,CAACJ,GAAG,CAACL,UAAU;GAC9B;AACH;AATAD;AAWA,SAAgBW,SAAS,CAAChB,KAAc;EACtC,IAAI,CAACS,KAAK,CAACC,OAAO,CAACV,KAAK,CAAC,EAAE,MAAM,IAAIE,KAAK,CAAC,uBAAuB,CAAC;EACnE,OAAOF,KAAK,CAACW,GAAG,CAACC,QAAQ,CAAC;AAC5B;AAHAP;AAKA;;;;;;AAMA,SAAgBY,aAAa,CAC3BC,IAAoB,EACpBC,SAAiC,EACjCC,OAAe;;EAEf,MAAMC,SAAS,GAAGH,IAAI,CAACI,IAAI,CAAC,MAAM,IAAI,CAAC;EACvC,MAAMC,GAAG,eAAGF,SAAS,0CAAEN,MAAM,CAC1BO,IAAI,CAAEE,KAAK,IAAKA,KAAK,CAACjB,IAAI,KAAKY,SAAS,2CACvCX,UAAU,CAACc,IAAI,CAAEG,IAAI,IAAKA,IAAI,CAACtB,GAAG,KAAKiB,OAAO,CAAC;EACnD,IAAI,CAACG,GAAG,EAAE;IACR,MAAM,IAAIrB,KAAK,CACb,6BAA6BkB,OAAO,6BAA6BD,SAAS,iBAAiB,CAC5F;;EAEH,OAAOI,GAAG;AACZ;AAfAlB","names":["parseAttribute","input","encoding_1","Error","key","value","exports","parseEvent","type","attributes","Array","isArray","map","parseLog","msg_index","log","events","parseLogs","findAttribute","logs","eventType","attrKey","firstLogs","find","out","event","attr"],"sources":["../src/logs.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}