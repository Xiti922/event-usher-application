{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fromBinary = exports.toBinary = void 0;\nconst encoding_1 = require(\"@cosmjs/encoding\");\n/**\n * Takes a value, serializes it to JSON and encodes it as base64.\n *\n * This can be used for creating values of fields that have the CosmWasm Binary type.\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction toBinary(obj) {\n  return (0, encoding_1.toBase64)((0, encoding_1.toUtf8)(JSON.stringify(obj)));\n}\nexports.toBinary = toBinary;\n/**\n * Takes a base64 string, decodes it and parses the content from JSON to an object.\n *\n * This can be used for parsing the values of a CosmWasm Binary field.\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction fromBinary(base64) {\n  return JSON.parse((0, encoding_1.fromUtf8)((0, encoding_1.fromBase64)(base64)));\n}\nexports.fromBinary = fromBinary;","map":{"version":3,"mappings":";;;;;;AAAA;AAEA;;;;;AAKA;AACA,SAAgBA,QAAQ,CAACC,GAAQ;EAC/B,OAAO,uBAAQ,EAAC,qBAAM,EAACC,IAAI,CAACC,SAAS,CAACF,GAAG,CAAC,CAAC,CAAC;AAC9C;AAFAG;AAIA;;;;;AAKA;AACA,SAAgBC,UAAU,CAACC,MAAc;EACvC,OAAOJ,IAAI,CAACK,KAAK,CAAC,uBAAQ,EAAC,yBAAU,EAACD,MAAM,CAAC,CAAC,CAAC;AACjD;AAFAF","names":["toBinary","obj","JSON","stringify","exports","fromBinary","base64","parse"],"sources":["../src/encoding.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}