{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Ledger = exports.LedgerInitError = exports.LedgerWebHIDIniter = exports.LedgerWebUSBIniter = exports.LedgerInitErrorOn = void 0;\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst CosmosApp = require(\"ledger-cosmos-js\").default;\nconst hw_transport_webhid_1 = __importDefault(require(\"@ledgerhq/hw-transport-webhid\"));\nconst hw_transport_webusb_1 = __importDefault(require(\"@ledgerhq/hw-transport-webusb\"));\nconst secp256k1_1 = require(\"secp256k1\");\nconst router_1 = require(\"@keplr-wallet/router\");\nvar LedgerInitErrorOn;\n(function (LedgerInitErrorOn) {\n  LedgerInitErrorOn[LedgerInitErrorOn[\"Transport\"] = 0] = \"Transport\";\n  LedgerInitErrorOn[LedgerInitErrorOn[\"App\"] = 1] = \"App\";\n  LedgerInitErrorOn[LedgerInitErrorOn[\"Unknown\"] = 2] = \"Unknown\";\n})(LedgerInitErrorOn = exports.LedgerInitErrorOn || (exports.LedgerInitErrorOn = {}));\nconst LedgerWebUSBIniter = () => __awaiter(void 0, void 0, void 0, function* () {\n  return yield hw_transport_webusb_1.default.create();\n});\nexports.LedgerWebUSBIniter = LedgerWebUSBIniter;\nconst LedgerWebHIDIniter = () => __awaiter(void 0, void 0, void 0, function* () {\n  return yield hw_transport_webhid_1.default.create();\n});\nexports.LedgerWebHIDIniter = LedgerWebHIDIniter;\nclass LedgerInitError extends Error {\n  constructor(errorOn, message) {\n    super(message);\n    this.errorOn = errorOn;\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, LedgerInitError.prototype);\n  }\n}\nexports.LedgerInitError = LedgerInitError;\nclass Ledger {\n  constructor(cosmosApp) {\n    this.cosmosApp = cosmosApp;\n  }\n  static init(transportIniter) {\n    let initArgs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    return __awaiter(this, void 0, void 0, function* () {\n      const transport = yield transportIniter(...initArgs);\n      try {\n        const cosmosApp = new CosmosApp(transport);\n        const ledger = new Ledger(cosmosApp);\n        const versionResponse = yield ledger.getVersion();\n        // In this case, device is on screen saver.\n        // However, it is almost same as that the device is not unlocked to user-side.\n        // So, handle this case as initializing failed in `Transport`.\n        if (versionResponse.deviceLocked) {\n          throw new router_1.KeplrError(\"ledger\", 102, \"Device is on screen saver\");\n        }\n        return ledger;\n      } catch (e) {\n        if (transport) {\n          yield transport.close();\n        }\n        if (e.message === \"Device is on screen saver\") {\n          throw new LedgerInitError(LedgerInitErrorOn.Transport, e.message);\n        }\n        throw new LedgerInitError(LedgerInitErrorOn.App, e.message);\n      }\n    });\n  }\n  getVersion() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.cosmosApp) {\n        throw new router_1.KeplrError(\"ledger\", 100, \"Cosmos App not initialized\");\n      }\n      const result = yield this.cosmosApp.getVersion();\n      if (result.error_message !== \"No errors\") {\n        throw new Error(result.error_message);\n      }\n      return {\n        deviceLocked: result.device_locked,\n        major: result.major,\n        minor: result.minor,\n        patch: result.patch,\n        targetId: result.target_id,\n        testMode: result.test_mode\n      };\n    });\n  }\n  getPublicKey(path) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.cosmosApp) {\n        throw new router_1.KeplrError(\"ledger\", 100, \"Cosmos App not initialized\");\n      }\n      const result = yield this.cosmosApp.publicKey(path);\n      if (result.error_message !== \"No errors\") {\n        throw new Error(result.error_message);\n      }\n      return result.compressed_pk;\n    });\n  }\n  sign(path, message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.cosmosApp) {\n        throw new router_1.KeplrError(\"ledger\", 100, \"Cosmos App not initialized\");\n      }\n      const result = yield this.cosmosApp.sign(path, message);\n      if (result.error_message !== \"No errors\") {\n        throw new Error(result.error_message);\n      }\n      // Parse a DER ECDSA signature\n      return secp256k1_1.signatureImport(result.signature);\n    });\n  }\n  close() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return yield this.cosmosApp.transport.close();\n    });\n  }\n  static isWebHIDSupported() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return yield hw_transport_webhid_1.default.isSupported();\n    });\n  }\n}\nexports.Ledger = Ledger;","map":{"version":3,"mappings":"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","names":["CosmosApp","require","default","LedgerInitErrorOn","exports","LedgerWebUSBIniter","__awaiter","hw_transport_webusb_1","create","LedgerWebHIDIniter","hw_transport_webhid_1","LedgerInitError","Error","constructor","errorOn","message","Object","setPrototypeOf","prototype","Ledger","cosmosApp","init","transportIniter","initArgs","transport","ledger","versionResponse","getVersion","deviceLocked","router_1","e","close","Transport","App","result","error_message","device_locked","major","minor","patch","targetId","target_id","testMode","test_mode","getPublicKey","path","publicKey","compressed_pk","sign","secp256k1_1","signature","isWebHIDSupported","isSupported"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/@keplr-wallet/background/src/ledger/ledger.ts"],"sourcesContent":["import { TransportIniter } from \"./options\";\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst CosmosApp: any = require(\"ledger-cosmos-js\").default;\nimport TransportWebHID from \"@ledgerhq/hw-transport-webhid\";\nimport TransportWebUSB from \"@ledgerhq/hw-transport-webusb\";\nimport { signatureImport } from \"secp256k1\";\nimport { KeplrError } from \"@keplr-wallet/router\";\n\nexport enum LedgerInitErrorOn {\n  Transport,\n  App,\n  Unknown,\n}\n\nexport const LedgerWebUSBIniter: TransportIniter = async () => {\n  return await TransportWebUSB.create();\n};\n\nexport const LedgerWebHIDIniter: TransportIniter = async () => {\n  return await TransportWebHID.create();\n};\n\nexport class LedgerInitError extends Error {\n  constructor(public readonly errorOn: LedgerInitErrorOn, message?: string) {\n    super(message);\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, LedgerInitError.prototype);\n  }\n}\n\nexport class Ledger {\n  constructor(private readonly cosmosApp: any) {}\n\n  static async init(\n    transportIniter: TransportIniter,\n    initArgs: any[] = []\n  ): Promise<Ledger> {\n    const transport = await transportIniter(...initArgs);\n    try {\n      const cosmosApp = new CosmosApp(transport);\n      const ledger = new Ledger(cosmosApp);\n      const versionResponse = await ledger.getVersion();\n\n      // In this case, device is on screen saver.\n      // However, it is almost same as that the device is not unlocked to user-side.\n      // So, handle this case as initializing failed in `Transport`.\n      if (versionResponse.deviceLocked) {\n        throw new KeplrError(\"ledger\", 102, \"Device is on screen saver\");\n      }\n\n      return ledger;\n    } catch (e) {\n      if (transport) {\n        await transport.close();\n      }\n      if (e.message === \"Device is on screen saver\") {\n        throw new LedgerInitError(LedgerInitErrorOn.Transport, e.message);\n      }\n\n      throw new LedgerInitError(LedgerInitErrorOn.App, e.message);\n    }\n  }\n\n  async getVersion(): Promise<{\n    deviceLocked: boolean;\n    major: number;\n    minor: number;\n    patch: number;\n    targetId: string;\n    testMode: boolean;\n  }> {\n    if (!this.cosmosApp) {\n      throw new KeplrError(\"ledger\", 100, \"Cosmos App not initialized\");\n    }\n\n    const result = await this.cosmosApp.getVersion();\n    if (result.error_message !== \"No errors\") {\n      throw new Error(result.error_message);\n    }\n\n    return {\n      deviceLocked: result.device_locked,\n      major: result.major,\n      minor: result.minor,\n      patch: result.patch,\n      targetId: result.target_id,\n      testMode: result.test_mode,\n    };\n  }\n\n  async getPublicKey(path: number[]): Promise<Uint8Array> {\n    if (!this.cosmosApp) {\n      throw new KeplrError(\"ledger\", 100, \"Cosmos App not initialized\");\n    }\n\n    const result = await this.cosmosApp.publicKey(path);\n    if (result.error_message !== \"No errors\") {\n      throw new Error(result.error_message);\n    }\n\n    return result.compressed_pk;\n  }\n\n  async sign(path: number[], message: Uint8Array): Promise<Uint8Array> {\n    if (!this.cosmosApp) {\n      throw new KeplrError(\"ledger\", 100, \"Cosmos App not initialized\");\n    }\n\n    const result = await this.cosmosApp.sign(path, message);\n    if (result.error_message !== \"No errors\") {\n      throw new Error(result.error_message);\n    }\n\n    // Parse a DER ECDSA signature\n    return signatureImport(result.signature);\n  }\n\n  async close(): Promise<void> {\n    return await this.cosmosApp.transport.close();\n  }\n\n  static async isWebHIDSupported(): Promise<boolean> {\n    return await TransportWebHID.isSupported();\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}