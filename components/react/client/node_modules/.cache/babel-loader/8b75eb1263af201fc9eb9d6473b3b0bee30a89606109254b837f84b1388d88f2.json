{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Bech32 = void 0;\nconst bech32 = __importStar(require(\"bech32\"));\nclass Bech32 {\n  static encode(prefix, data, limit) {\n    const address = bech32.encode(prefix, bech32.toWords(data), limit);\n    return address;\n  }\n  static decode(address) {\n    let limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;\n    const decodedAddress = bech32.decode(address, limit);\n    return {\n      prefix: decodedAddress.prefix,\n      data: new Uint8Array(bech32.fromWords(decodedAddress.words))\n    };\n  }\n}\nexports.Bech32 = Bech32;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA,MAAaA,MAAM;EACV,OAAOC,MAAM,CAACC,MAAc,EAAEC,IAAgB,EAAEC,KAAc;IACnE,MAAMC,OAAO,GAAGC,MAAM,CAACL,MAAM,CAACC,MAAM,EAAEI,MAAM,CAACC,OAAO,CAACJ,IAAI,CAAC,EAAEC,KAAK,CAAC;IAClE,OAAOC,OAAO;EAChB;EAEO,OAAOG,MAAM,CAClBH,OAAe,EACC;IAAA,IAAhBD,KAAK,uEAAGK,QAAQ;IAEhB,MAAMC,cAAc,GAAGJ,MAAM,CAACE,MAAM,CAACH,OAAO,EAAED,KAAK,CAAC;IACpD,OAAO;MACLF,MAAM,EAAEQ,cAAc,CAACR,MAAM;MAC7BC,IAAI,EAAE,IAAIQ,UAAU,CAACL,MAAM,CAACM,SAAS,CAACF,cAAc,CAACG,KAAK,CAAC;KAC5D;EACH;;AAfFC","names":["Bech32","encode","prefix","data","limit","address","bech32","toWords","decode","Infinity","decodedAddress","Uint8Array","fromWords","words","exports"],"sources":["../src/bech32.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}