{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ChainIdHelper = void 0;\nclass ChainIdHelper {\n  static parse(chainId) {\n    const split = chainId.split(ChainIdHelper.VersionFormatRegExp).filter(Boolean);\n    if (split.length !== 2) {\n      return {\n        identifier: chainId,\n        version: 0\n      };\n    } else {\n      return {\n        identifier: split[0],\n        version: parseInt(split[1])\n      };\n    }\n  }\n  static hasChainVersion(chainId) {\n    const version = ChainIdHelper.parse(chainId);\n    return version.identifier !== chainId;\n  }\n}\nexports.ChainIdHelper = ChainIdHelper;\n// VersionFormatRegExp checks if a chainID is in the format required for parsing versions\n// The chainID should be in the form: `{identifier}-{version}`\nChainIdHelper.VersionFormatRegExp = /(.+)-([\\d]+)/;","map":{"version":3,"mappings":";;;;;;AAAA,MAAaA,aAAa;EAKxB,OAAOC,KAAK,CACVC,OAAe;IAKf,MAAMC,KAAK,GAAGD,OAAO,CAClBC,KAAK,CAACH,aAAa,CAACI,mBAAmB,CAAC,CACxCC,MAAM,CAACC,OAAO,CAAC;IAClB,IAAIH,KAAK,CAACI,MAAM,KAAK,CAAC,EAAE;MACtB,OAAO;QACLC,UAAU,EAAEN,OAAO;QACnBO,OAAO,EAAE;OACV;KACF,MAAM;MACL,OAAO;QAAED,UAAU,EAAEL,KAAK,CAAC,CAAC,CAAC;QAAEM,OAAO,EAAEC,QAAQ,CAACP,KAAK,CAAC,CAAC,CAAC;MAAC,CAAE;;EAEhE;EAEA,OAAOQ,eAAe,CAACT,OAAe;IACpC,MAAMO,OAAO,GAAGT,aAAa,CAACC,KAAK,CAACC,OAAO,CAAC;IAC5C,OAAOO,OAAO,CAACD,UAAU,KAAKN,OAAO;EACvC;;AA3BFU;AACE;AACA;AACgBZ,iCAAmB,GAAG,cAAc","names":["ChainIdHelper","parse","chainId","split","VersionFormatRegExp","filter","Boolean","length","identifier","version","parseInt","hasChainVersion","exports"],"sources":["/Users/seanwavy/Development/legends/event-usher-application/components/react/client/node_modules/@keplr-wallet/background/node_modules/@keplr-wallet/cosmos/src/chain-id/index.ts"],"sourcesContent":["export class ChainIdHelper {\n  // VersionFormatRegExp checks if a chainID is in the format required for parsing versions\n  // The chainID should be in the form: `{identifier}-{version}`\n  static readonly VersionFormatRegExp = /(.+)-([\\d]+)/;\n\n  static parse(\n    chainId: string\n  ): {\n    identifier: string;\n    version: number;\n  } {\n    const split = chainId\n      .split(ChainIdHelper.VersionFormatRegExp)\n      .filter(Boolean);\n    if (split.length !== 2) {\n      return {\n        identifier: chainId,\n        version: 0,\n      };\n    } else {\n      return { identifier: split[0], version: parseInt(split[1]) };\n    }\n  }\n\n  static hasChainVersion(chainId: string): boolean {\n    const version = ChainIdHelper.parse(chainId);\n    return version.identifier !== chainId;\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}