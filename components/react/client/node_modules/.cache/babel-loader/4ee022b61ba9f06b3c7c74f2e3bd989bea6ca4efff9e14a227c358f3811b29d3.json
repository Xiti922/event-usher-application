{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.makeSignBytes = exports.makeSignDoc = exports.makeAuthInfoBytes = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nconst utils_1 = require(\"@cosmjs/utils\");\nconst signing_1 = require(\"cosmjs-types/cosmos/tx/signing/v1beta1/signing\");\nconst tx_1 = require(\"cosmjs-types/cosmos/tx/v1beta1/tx\");\nconst long_1 = __importDefault(require(\"long\"));\n/**\n * Create signer infos from the provided signers.\n *\n * This implementation does not support different signing modes for the different signers.\n */\nfunction makeSignerInfos(signers, signMode) {\n  return signers.map(_ref => {\n    let {\n      pubkey,\n      sequence\n    } = _ref;\n    return {\n      publicKey: pubkey,\n      modeInfo: {\n        single: {\n          mode: signMode\n        }\n      },\n      sequence: long_1.default.fromNumber(sequence)\n    };\n  });\n}\n/**\n * Creates and serializes an AuthInfo document.\n *\n * This implementation does not support different signing modes for the different signers.\n */\nfunction makeAuthInfoBytes(signers, feeAmount, gasLimit, feeGranter, feePayer) {\n  let signMode = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : signing_1.SignMode.SIGN_MODE_DIRECT;\n  // Required arguments 4 and 5 were added in CosmJS 0.29. Use runtime checks to help our non-TS users.\n  (0, utils_1.assert)(feeGranter === undefined || typeof feeGranter === \"string\", \"feeGranter must be undefined or string\");\n  (0, utils_1.assert)(feePayer === undefined || typeof feePayer === \"string\", \"feePayer must be undefined or string\");\n  const authInfo = {\n    signerInfos: makeSignerInfos(signers, signMode),\n    fee: {\n      amount: [...feeAmount],\n      gasLimit: long_1.default.fromNumber(gasLimit),\n      granter: feeGranter,\n      payer: feePayer\n    }\n  };\n  return tx_1.AuthInfo.encode(tx_1.AuthInfo.fromPartial(authInfo)).finish();\n}\nexports.makeAuthInfoBytes = makeAuthInfoBytes;\nfunction makeSignDoc(bodyBytes, authInfoBytes, chainId, accountNumber) {\n  return {\n    bodyBytes: bodyBytes,\n    authInfoBytes: authInfoBytes,\n    chainId: chainId,\n    accountNumber: long_1.default.fromNumber(accountNumber)\n  };\n}\nexports.makeSignDoc = makeSignDoc;\nfunction makeSignBytes(_ref2) {\n  let {\n    accountNumber,\n    authInfoBytes,\n    bodyBytes,\n    chainId\n  } = _ref2;\n  const signDoc = tx_1.SignDoc.fromPartial({\n    accountNumber: accountNumber,\n    authInfoBytes: authInfoBytes,\n    bodyBytes: bodyBytes,\n    chainId: chainId\n  });\n  return tx_1.SignDoc.encode(signDoc).finish();\n}\nexports.makeSignBytes = makeSignBytes;","map":{"version":3,"mappings":";;;;;;;;;;;AAAA;AACA;AAEA;AACA;AAEA;AAEA;;;;;AAKA,SAASA,eAAe,CACtBC,OAA2E,EAC3EC,QAAkB;EAElB,OAAOD,OAAO,CAACE,GAAG,CAChB;IAAA,IAAC;MAAEC,MAAM;MAAEC;IAAQ,CAAE;IAAA,OAAkB;MACrCC,SAAS,EAAEF,MAAM;MACjBG,QAAQ,EAAE;QACRC,MAAM,EAAE;UAAEC,IAAI,EAAEP;QAAQ;OACzB;MACDG,QAAQ,EAAEK,cAAI,CAACC,UAAU,CAACN,QAAQ;KACnC;EAAA,CAAC,CACH;AACH;AAEA;;;;;AAKA,SAAgBO,iBAAiB,CAC/BX,OAA2E,EAC3EY,SAA0B,EAC1BC,QAAgB,EAChBC,UAA8B,EAC9BC,QAA4B,EACQ;EAAA,IAApCd,QAAQ,uEAAGe,kBAAQ,CAACC,gBAAgB;EAEpC;EACA,kBAAM,EACJH,UAAU,KAAKI,SAAS,IAAI,OAAOJ,UAAU,KAAK,QAAQ,EAC1D,wCAAwC,CACzC;EACD,kBAAM,EAACC,QAAQ,KAAKG,SAAS,IAAI,OAAOH,QAAQ,KAAK,QAAQ,EAAE,sCAAsC,CAAC;EAEtG,MAAMI,QAAQ,GAAG;IACfC,WAAW,EAAErB,eAAe,CAACC,OAAO,EAAEC,QAAQ,CAAC;IAC/CoB,GAAG,EAAE;MACHC,MAAM,EAAE,CAAC,GAAGV,SAAS,CAAC;MACtBC,QAAQ,EAAEJ,cAAI,CAACC,UAAU,CAACG,QAAQ,CAAC;MACnCU,OAAO,EAAET,UAAU;MACnBU,KAAK,EAAET;;GAEV;EACD,OAAOU,aAAQ,CAACC,MAAM,CAACD,aAAQ,CAACE,WAAW,CAACR,QAAQ,CAAC,CAAC,CAACS,MAAM,EAAE;AACjE;AAzBAC;AA2BA,SAAgBC,WAAW,CACzBC,SAAqB,EACrBC,aAAyB,EACzBC,OAAe,EACfC,aAAqB;EAErB,OAAO;IACLH,SAAS,EAAEA,SAAS;IACpBC,aAAa,EAAEA,aAAa;IAC5BC,OAAO,EAAEA,OAAO;IAChBC,aAAa,EAAEzB,cAAI,CAACC,UAAU,CAACwB,aAAa;GAC7C;AACH;AAZAL;AAcA,SAAgBM,aAAa,QAA8D;EAAA,IAA7D;IAAED,aAAa;IAAEF,aAAa;IAAED,SAAS;IAAEE;EAAO,CAAW;EACzF,MAAMG,OAAO,GAAGX,YAAO,CAACE,WAAW,CAAC;IAClCO,aAAa,EAAEA,aAAa;IAC5BF,aAAa,EAAEA,aAAa;IAC5BD,SAAS,EAAEA,SAAS;IACpBE,OAAO,EAAEA;GACV,CAAC;EACF,OAAOR,YAAO,CAACC,MAAM,CAACU,OAAO,CAAC,CAACR,MAAM,EAAE;AACzC;AARAC","names":["makeSignerInfos","signers","signMode","map","pubkey","sequence","publicKey","modeInfo","single","mode","long_1","fromNumber","makeAuthInfoBytes","feeAmount","gasLimit","feeGranter","feePayer","signing_1","SIGN_MODE_DIRECT","undefined","authInfo","signerInfos","fee","amount","granter","payer","tx_1","encode","fromPartial","finish","exports","makeSignDoc","bodyBytes","authInfoBytes","chainId","accountNumber","makeSignBytes","signDoc"],"sources":["../src/signing.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}